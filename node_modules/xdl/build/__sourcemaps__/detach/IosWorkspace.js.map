{"version":3,"sources":["detach/IosWorkspace.js"],"names":["async","sdkVersion","skipServerValidation","versions","await","Versions","versionsAsync","let","sdkVersionConfig","sdkVersions","Error","iosVersion","iosExpoViewUrl","iosClientVersion","_getVersionedExpoKitConfigAsync","context","type","path","join","data","expoSourcePath","expoRootTemplateDirectory","process","env","EXPO_VIEW_DIR","projectPath","isDirectory","fs","mkdirpSync","logger","info","invariant","Api","downloadAsync","extract","_getOrCreateTemplateDirectoryAsync","projectDirectory","projectName","gitIgnorePath","existsSync","rimraf","sync","e","filesToTransform","bundleIdentifier","exp","ios","Promise","all","map","fileName","transformFileContentsAsync","fileString","replace","filesToMove","forEach","destFileName","dirname","extname","spawnAsyncThrowError","_renameAndMoveProjectFilesAsync","configFilePath","standaloneSdkVersion","isServiceContext","IosPlist","modifyAsync","versionConfig","detachedNativeVersions","shell","kernel","_configureVersionsPlistAsync","constantsConfig","STANDALONE_CONTEXT_TYPE","_configureBuildConstantsPlistAsync","iosProjectDirectory","getPaths","podfileTemplateFilename","podfileSubstitutions","TARGET_NAME","reactNativeDependencyPath","detachableUniversalModules","Modules","getDetachableModulesForPlatformAndSdkVersion","EXPOKIT_TAG","expoDependenciesPath","UNIVERSAL_MODULES","module","libName","subdirectory","EXPOKIT_PATH","relative","VERSIONED_REACT_NATIVE_PATH","modulesPath","REACT_NATIVE_PATH","EXPOKIT_TAG_IOS","templatePodfilePath","renderPodfileAsync","shellAppSdkVersion","_renderPodfileFromTemplateAsync","supportingDirectory","getNewestSdkVersionSupportedAsync","Utils","ncpAsync","rimrafDontThrow","cleanBackupAsync","createDetachedAsync","allVersions","newestVersion","highestMajorComponent","version","majorComponent","parseSdkMajorVersion","addDetachedConfigToExp","warn","publishBundlePath","publishManifestPath","intermediatesDirectory","isAnonymous","config","name","projectNameLabel","toLowerCase","build","workspaceSourcePath","archivePath"],"mappings":";;;;;;;;;;+BAwBAA,WACEC,UADFD,EAEEE,oBAFFF,EAGO;AACL,UAAMG,WAAWC,MAAMC,gCAASC,aAATD,EAAvB;AACAE,QAAIC,mBAAmBL,SAASM,WAATN,CAAqBF,UAArBE,CAAvBI;AACA,QAAI,CAACC,gBAAL,EAAuB;AACrB,UAAIN,oBAAJ,EAA0B;AACxBM,2BAAmB,EAAnBA;AACF,OAFA,MAEO;AACL,cAAM,IAAIE,KAAJ,CAAW,4BAA2BT,UAAW,EAAjD,CAAN;AACF;AACF;AACA,UAAM,EAAEU,UAAF,EAAcC,cAAd,KAAiCJ,gBAAvC;AACA,UAAMK,mBAAmBF,aAAaA,UAAbA,GAA0BR,SAASQ,UAA5D;AACA,WAAO;AACLE,sBADK;AAELD;AAFK,KAAP;AAIF,G;;kBAnBeE,+B;;;;;;gCAqBfd,WACEe,OADFf,EAEEY,cAFFZ,EAGE;AACA,QAAIe,QAAQC,IAARD,KAAiB,SAArB,EAAgC;AAC9B,aAAOE,cAAKC,IAALD,CAAUF,QAAQI,IAARJ,CAAaK,cAAvBH,EAAuC,IAAvCA,CAAP;AACF,KAFA,MAEO,IAAIF,QAAQC,IAARD,KAAiB,MAArB,EAA6B;AAClCR,UAAIc,yBAAJd;AACA,UAAIe,QAAQC,GAARD,CAAYE,aAAhB,EAA+B;AAC7B;AACAH,oCAA4BC,QAAQC,GAARD,CAAYE,aAAxCH;AACF,OAHA,MAGO;AACL;AACA;AACAA,oCAA4BJ,cAAKC,IAALD,CAAUF,QAAQI,IAARJ,CAAaU,WAAvBR,EAAoC,oBAApCA,CAA5BI;AACA,YAAI,CAACK,2DAAYL,yBAAZK,CAAL,EAA6C;AAC3CC,gDAAGC,UAAHD,CAAcN,yBAAdM;AACAE,8CAAOC,IAAPD,CAAY,yBAAZA;AACAE,yDAAUnB,cAAVmB,EAA2B,qCAA3BA;AACA3B,gBAAM4B,8BAAIC,aAAJD,CAAkBpB,cAAlBoB,EAAkCX,yBAAlCW,EAA6D;AACjEE,qBAAS;AADwD,WAA7DF,CAAN5B;AAGF;AACF;AACA,aAAOiB,yBAAP;AACF;AACF,G;;kBA1Bec,kC;;;;;;gCA4BfnC,WACEe,OADFf,EAEEoC,gBAFFpC,EAGEqC,WAHFrC,EAIE;AACA;AACA,QAAI;AACF,YAAMsC,gBAAgBrB,cAAKC,IAALD,CAAUmB,gBAAVnB,EAA4B,YAA5BA,CAAtB;AACA,UAAIU,sCAAGY,UAAHZ,CAAcW,aAAdX,CAAJ,EAAkC;AAChCa,4CAAOC,IAAPD,CAAYF,aAAZE;AACF;AACF,KALA,CAKE,OAAOE,CAAP,EAAU,CAAC;;AAEb,UAAMC,mBAAmB,CACvB1B,cAAKC,IAALD,CAAU,kCAAVA,EAA8C,iBAA9CA,CADuB,EAEvBA,cAAKC,IAALD,CAAU,oCAAVA,EAAgD,0BAAhDA,CAFuB,EAGvBA,cAAKC,IAALD,CACE,kCADFA,EAEE,cAFFA,EAGE,WAHFA,EAIE,iCAJFA,CAHuB,CAAzB;;AAWAV,QAAIqC,gBAAJrC;AACA,QAAIQ,QAAQC,IAARD,KAAiB,MAArB,EAA6B;AAC3B,YAAM8B,MAAM9B,QAAQI,IAARJ,CAAa8B,GAAzB;AACAD,yBAAmBC,IAAIC,GAAJD,IAAWA,IAAIC,GAAJD,CAAQD,gBAAnBC,GAAsCA,IAAIC,GAAJD,CAAQD,gBAA9CC,GAAiE,IAApFD;AACA,UAAI,CAACA,gBAAL,EAAuB;AACrB,cAAM,IAAIlC,KAAJ,CAAW,sEAAX,CAAN;AACF;AACF,KANA,MAMO,IAAIK,QAAQC,IAARD,KAAiB,SAArB,EAAgC;AACrC6B,yBAAmB,mBAAnBA;AACF;;AAEAxC,UAAM2C,QAAQC,GAARD,CACJJ,iBAAiBM,GAAjBN,CAAqBO;AAAAA,aACnBC,0EAA2BlC,cAAKC,IAALD,CAAUmB,gBAAVnB,EAA4BiC,QAA5BjC,CAA3BkC,EAAkEC,sBAAc;AAC9E,eAAOA,WACJC,OADID,CACI,yCADJA,EAC+CR,gBAD/CQ,EAEJC,OAFID,CAEI,yBAFJA,EAE+Bf,WAF/Be,CAAP;AAGD,OAJDD,CADmBD;AAAAA,KAArBP,CADII,CAAN3C;;AAUA;AACA,UAAMkD,cAAc,CAClB,wBADkB,EAElBrC,cAAKC,IAALD,CACE,kCADFA,EAEE,cAFFA,EAGE,WAHFA,EAIE,iCAJFA,CAFkB,EAQlB,kCARkB,EASlB,oCATkB,CAApB;;AAYAqC,gBAAYC,OAAZD;AAAAA,oCAAoBtD,WAAMkD,QAANlD,EAAkB;AACpCO,YAAIiD,eAAevC,cAAKC,IAALD,CAAUA,cAAKwC,OAALxC,CAAaiC,QAAbjC,CAAVA,EAAmC,GAAEoB,WAAY,GAAEpB,cAAKyC,OAALzC,CAAaiC,QAAbjC,CAAuB,EAA1EA,CAAnBV;AACAH,cAAMuD,oEAAqB,SAArBA,EAAgC,CACpC1C,cAAKC,IAALD,CAAUmB,gBAAVnB,EAA4BiC,QAA5BjC,CADoC,EAEpCA,cAAKC,IAALD,CAAUmB,gBAAVnB,EAA4BuC,YAA5BvC,CAFoC,CAAhC0C,CAANvD;AAID,OANDkD;;AAAAA;AAAAA;AAAAA;AAAAA;AAOF,G;;kBAjEeM,+B;;;;;;gCAmEf5D,WACE6D,cADF7D,EAEE8D,oBAFF9D,EAGE+D,gBAHF/D,EAIE;AACAI,UAAM4D,gCAASC,WAATD,CAAqBH,cAArBG,EAAqC,eAArCA,EAAsDE,yBAAiB;AAC3EA,oBAAczD,WAAdyD,GAA4B,CAACJ,oBAAD,CAA5BI;AACAA,oBAAcC,sBAAdD,GAAuC;AACrCE,eAAON,oBAD8B;AAErCO,gBAAQP;AAF6B,OAAvCI;AAIA,aAAOA,aAAP;AACD,KAPKF,CAAN5D;AAQF,G;;kBAbekE,4B;;;;;;gCAeftE,WACE6D,cADF7D,EAEEe,OAFFf,EAGE;AACAI,UAAM4D,gCAASC,WAATD,CAAqBH,cAArBG,EAAqC,kBAArCA,EAAyDO,2BAAmB;AAChFA,sBAAgBC,uBAAhBD,GAA0CxD,QAAQC,IAAlDuD;AACA,aAAOA,eAAP;AACD,KAHKP,CAAN5D;AAIF,G;;kBAReqE,kC;;;;;;gCAUfzE,WACEe,OADFf,EAEEqB,yBAFFrB,EAGEC,UAHFD,EAIEa,gBAJFb,EAKE;AACA,UAAM,EAAE0E,mBAAF,EAAuBrC,WAAvB,KAAuCsC,SAAS5D,OAAT4D,CAA7C;AACApE,QAAIqE,uBAAJrE;AACAA,QAAIsE,uBAA4B;AAC9BC,mBAAazC;AADiB,KAAhC9B;AAGAA,QAAIwE,yBAAJxE;AACA,UAAMyE,6BAA6BC,8BAAQC,4CAARD,CACjC,KADiCA,EAEjChF,UAFiCgF,CAAnC;AAIA,QAAIlE,QAAQC,IAARD,KAAiB,MAArB,EAA6B;AAC3BgB,qDAAUlB,gBAAVkB,EAA6B,0CAA7BA;AACAgD,kCAA4B9D,cAAKC,IAALD,CAAUF,QAAQI,IAARJ,CAAaU,WAAvBR,EAAoC,cAApCA,EAAoD,cAApDA,CAA5B8D;AACAF,2BAAqBM,WAArBN,GAAoC,OAAMhE,gBAAiB,EAA3DgE;AACAD,gCAA0B,iBAA1BA;AACA,YAAMQ,uBAAuBnE,cAAKC,IAALD,CAAUF,QAAQI,IAARJ,CAAaU,WAAvBR,EAAoC,cAApCA,CAA7B;AACA4D,2BAAqBQ,iBAArBR,GAAyCG,2BAA2B/B,GAA3B+B,CAA+BM;AAAAA,4BACnEA,MADmEA;AAEtErE,gBAAMA,cAAKC,IAALD,CAAUmE,oBAAVnE,EAAgCqE,OAAOC,OAAvCtE,EAAgDqE,OAAOE,YAAvDvE;AAFgEqE;AAAAA,OAA/BN,CAAzCH;AAIF,KAVA,MAUO,IAAI9D,QAAQC,IAARD,KAAiB,SAArB,EAAgC;AACrCgE,kCAA4B9D,cAAKC,IAALD,CAC1BI,yBAD0BJ,EAE1B,kBAF0BA,EAG1B,cAH0BA,CAA5B8D;AAKAF,2BAAqBY,YAArBZ,GAAoC5D,cAAKyE,QAALzE,CAClCyD,mBADkCzD,EAElCI,yBAFkCJ,CAApC4D;AAIAA,2BAAqBc,2BAArBd,GAAmD5D,cAAKyE,QAALzE,CACjDyD,mBADiDzD,EAEjDA,cAAKC,IAALD,CAAUI,yBAAVJ,EAAqC,KAArCA,EAA4C,wBAA5CA,CAFiDA,CAAnD4D;AAIA,YAAMe,cAAc3E,cAAKC,IAALD,CAAUI,yBAAVJ,EAAqC,UAArCA,CAApB;AACA4D,2BAAqBQ,iBAArBR,GAAyCG,2BAA2B/B,GAA3B+B,CAA+BM;AAAAA,4BACnEA,MADmEA;AAEtErE,gBAAMA,cAAKC,IAALD,CAAU2E,WAAV3E,EAAuBqE,OAAOC,OAA9BtE,EAAuCqE,OAAOE,YAA9CvE;AAFgEqE;AAAAA,OAA/BN,CAAzCH;AAIAD,gCAA0B,2BAA1BA;AACF,KApBO,MAoBA;AACL,YAAM,IAAIlE,KAAJ,CAAW,6BAA4BK,QAAQC,IAAK,EAApD,CAAN;AACF;AACA6D,yBAAqBgB,iBAArBhB,GAAyC5D,cAAKyE,QAALzE,CACvCyD,mBADuCzD,EAEvC8D,yBAFuC9D,CAAzC4D;AAIAA,yBAAqBQ,iBAArBR,GAAyCA,qBAAqBQ,iBAArBR,CAAuC5B,GAAvC4B,CAA2CS;AAAAA,0BAC/EA,MAD+EA;AAElFrE,cAAMA,cAAKyE,QAALzE,CAAcyD,mBAAdzD,EAAmCqE,OAAOrE,IAA1CA;AAF4EqE;AAAAA,KAA3CT,CAAzCA;;AAKA;AACA,QAAIvD,QAAQC,GAARD,CAAYwE,eAAhB,EAAiC;AAC/BjE,0CAAOC,IAAPD,CAAa,kDAAbA;AACAgD,2BAAqBM,WAArBN,GAAmCvD,QAAQC,GAARD,CAAYwE,eAA/CjB;AACF,KAHA,MAGO,IAAIvD,QAAQC,GAARD,CAAYE,aAAhB,EAA+B;AACpCK,0CAAOC,IAAPD,CAAY,sDAAZA;AACAgD,2BAAqBY,YAArBZ,GAAoC5D,cAAKyE,QAALzE,CAClCyD,mBADkCzD,EAElCK,QAAQC,GAARD,CAAYE,aAFsBP,CAApC4D;AAIA;AACAA,2BAAqBQ,iBAArBR,GAAyCA,qBAAqBQ,iBAArBR,CAAuC5B,GAAvC4B,CAA2CS;AAAAA,4BAC/EA,MAD+EA;AAElFrE,gBAAMA,cAAKyE,QAALzE,CACJyD,mBADIzD,EAEJA,cAAKC,IAALD,CAAUK,QAAQC,GAARD,CAAYE,aAAtBP,EAAqC,UAArCA,EAAiDqE,OAAOC,OAAxDtE,EAAiEqE,OAAOE,YAAxEvE,CAFIA;AAF4EqE;AAAAA,OAA3CT,CAAzCA;AAOF;AACA,UAAMkB,sBAAsB9E,cAAKC,IAALD,CAC1BI,yBAD0BJ,EAE1B,gBAF0BA,EAG1B,KAH0BA,EAI1B2D,uBAJ0B3D,CAA5B;AAMAb,UAAM4F,gEACJD,mBADIC,EAEJ/E,cAAKC,IAALD,CAAUyD,mBAAVzD,EAA+B,SAA/BA,CAFI+E,EAGJnB,oBAHImB,EAIJjF,QAAQI,IAARJ,CAAakF,kBAJTD,EAKJ/F,UALI+F,CAAN5F;AAOF,G;;kBA1Fe8F,+B;;;;;;gCA4FflG,WAAmCe,OAAnCf,EAA+D;AAC7D,UAAM,EAAE0E,mBAAF,EAAuBrC,WAAvB,EAAoC8D,mBAApC,KAA4DxB,SAAS5D,OAAT4D,CAAlE;AACA9C,wCAAOC,IAAPD,CAAa,iCAAgC6C,mBAAoB,KAAjE7C;;AAEA,UAAMkC,mBAAmBhD,QAAQC,IAARD,KAAiB,SAA1C;AACA,UAAM+C,uBAAuB1D,MAAMgG,kCAAkCrF,OAAlCqF,CAAnC;;AAEA7F,QAAIM,gBAAJN;AACAA,QAAIK,cAAJL;AACA,QAAIQ,QAAQC,IAARD,KAAiB,MAArB,EAA6B;AAC3B,OAAC,EAAEF,gBAAF,EAAoBD,cAApB,KAAuCR,MAAMU,gCAC5CgD,oBAD4ChD,EAE5CQ,QAAQC,GAARD,CAAYE,aAFgCV,CAA9C;AAIF;;AAEA,UAAMO,4BAA4BjB,MAAM+B,mCACtCpB,OADsCoB,EAEtCvB,cAFsCuB,CAAxC;;AAKA;AACAN,wCAAOC,IAAPD,CAAY,6BAAZA;AACAA,wCAAOC,IAAPD,CAAY,2CAAZA;AACAF,0CAAGC,UAAHD,CAAc+C,mBAAd/C;AACAE,wCAAOC,IAAPD,CAAY,2CAAZA;AACAzB,UAAMiG,0BAAMC,QAAND,CACJpF,cAAKC,IAALD,CAAUI,yBAAVJ,EAAqC,wBAArCA,EAA+D,KAA/DA,CADIoF,EAEJ3B,mBAFI2B,CAANjG;;AAKAyB,wCAAOC,IAAPD,CAAY,uBAAZA;AACAzB,UAAMwD,gCAAgC7C,OAAhC6C,EAAyCc,mBAAzCd,EAA8DvB,WAA9DuB,CAANxD;;AAEAyB,wCAAOC,IAAPD,CAAY,iCAAZA;AACA;AACA;AACAzB,UAAMkE,6BAA6B6B,mBAA7B7B,EAAkDR,oBAAlDQ,EAAwEP,gBAAxEO,CAANlE;AACAA,UAAMqE,mCAAmC0B,mBAAnC1B,EAAwD1D,OAAxD0D,CAANrE;AACAA,UAAM8F,gCACJnF,OADImF,EAEJ7E,yBAFI6E,EAGJpC,oBAHIoC,EAIJrF,gBAJIqF,CAAN9F;;AAOA,QAAI,CAACkB,QAAQC,GAARD,CAAYE,aAAjB,EAAgC;AAC9B,UAAIT,QAAQC,IAARD,KAAiB,MAArB,EAA6B;AAC3BwF,uEAAgBlF,yBAAhBkF;AACF;AACAnG,YAAM4D,gCAASwC,gBAATxC,CAA0BmC,mBAA1BnC,EAA+C,eAA/CA,EAAgE,KAAhEA,CAAN5D;AACF;AACF,G;;kBApDeqG,mB;;;;;AAuHf;;;;;gCAIAzG,WAAiDe,OAAjDf,EAA6E;AAC3E,QAAIe,QAAQC,IAARD,KAAiB,MAArB,EAA6B;AAC3B,aAAOA,QAAQI,IAARJ,CAAa8B,GAAb9B,CAAiBd,UAAxB;AACF,KAFA,MAEO,IAAIc,QAAQC,IAARD,KAAiB,SAArB,EAAgC;AACrC;AACA;AACA;AACAR,UAAI,EAAE4F,mBAAF,KAA0BxB,SAAS5D,OAAT4D,CAA9BpE;AACA,UAAI,CAACoB,sCAAGY,UAAHZ,CAAcwE,mBAAdxE,CAAL,EAAyC;AACvC;AACAwE,8BAAsBlF,cAAKC,IAALD,CACpBF,QAAQI,IAARJ,CAAaK,cADOH,EAEpB,IAFoBA,EAGpB,wBAHoBA,EAIpB,KAJoBA,EAKpB,wBALoBA,EAMpB,YANoBA,CAAtBkF;AAQF;AACA5F,UAAImG,WAAJnG,EAAiBoG,aAAjBpG;AACAH,YAAM4D,gCAASC,WAATD,CAAqBmC,mBAArBnC,EAA0C,eAA1CA,EAA2DE,yBAAiB;AAChFwC,sBAAcxC,cAAczD,WAA5BiG;AACA,eAAOxC,aAAP;AACD,OAHKF,CAAN5D;AAIAG,UAAIqG,wBAAwB,CAA5BrG;AACAmG,kBAAYnD,OAAZmD,CAAoBG,mBAAW;AAC7BtG,YAAIuG,iBAAiBC,oEAAqBF,OAArBE,CAArBxG;AACA,YAAIuG,iBAAiBF,qBAArB,EAA4C;AAC1CA,kCAAwBE,cAAxBF;AACAD,0BAAgBE,OAAhBF;AACF;AACD,OANDD;AAOA,aAAOC,aAAP;AACF;AACF,G;;kBAlCeP,iC;;;;;;;AAzXf;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AACA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAOA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;AAiSA,SAASY,sBAAT,CAAgCnE,GAAhC,EAA6C9B,OAA7C,EAAiF;AAC/E,MAAIA,QAAQC,IAARD,KAAiB,MAArB,EAA6B;AAC3Bc,wCAAOoF,IAAPpF,CAAa,gEAAbA;AACA,WAAOgB,GAAP;AACF;AACA,QAAM,EAAEsD,mBAAF,KAA0BxB,SAAS5D,OAAT4D,CAAhC;AACA9B,MAAIC,GAAJD,CAAQqE,iBAARrE,GAA4B5B,cAAKyE,QAALzE,CAC1BF,QAAQI,IAARJ,CAAaU,WADaR,EAE1BA,cAAKC,IAALD,CAAUkF,mBAAVlF,EAA+B,kBAA/BA,CAF0BA,CAA5B4B;AAIAA,MAAIC,GAAJD,CAAQsE,mBAARtE,GAA8B5B,cAAKyE,QAALzE,CAC5BF,QAAQI,IAARJ,CAAaU,WADeR,EAE5BA,cAAKC,IAALD,CAAUkF,mBAAVlF,EAA+B,yBAA/BA,CAF4BA,CAA9B4B;AAIA,SAAOA,GAAP;AACF;;AAEA;;;;;;;;;;AAUA,SAAS8B,QAAT,CAAkB5D,OAAlB,EAA8C;AAC5CR,MAAImE,mBAAJnE;AACAA,MAAI8B,WAAJ9B;AACAA,MAAI4F,mBAAJ5F;AACAA,MAAI6G,sBAAJ7G;AACA,MAAIQ,QAAQsG,WAARtG,EAAJ,EAA2B;AACzBsB,kBAAc,YAAdA;AACF,GAFA,MAEO,IAAItB,QAAQuG,MAARvG,IAAkBA,QAAQuG,MAARvG,CAAewG,IAArC,EAA2C;AAChDhH,QAAIiH,mBAAmBzG,QAAQuG,MAARvG,CAAewG,IAAtChH;AACA8B,kBAAcmF,iBAAiBnE,OAAjBmE,CAAyB,gBAAzBA,EAA2C,GAA3CA,EAAgDC,WAAhDD,EAAdnF;AACF,GAHO,MAGA;AACL,UAAM,IAAI3B,KAAJ,CAAU,gDAAV,CAAN;AACF;AACA,MAAIK,QAAQC,IAARD,KAAiB,MAArB,EAA6B;AAC3B2D,0BAAsBzD,cAAKC,IAALD,CAAUF,QAAQI,IAARJ,CAAaU,WAAvBR,EAAoC,KAApCA,CAAtByD;AACAyB,0BAAsBlF,cAAKC,IAALD,CAAUyD,mBAAVzD,EAA+BoB,WAA/BpB,EAA4C,YAA5CA,CAAtBkF;AACF,GAHA,MAGO,IAAIpF,QAAQC,IAARD,KAAiB,SAArB,EAAgC;AACrC2D,0BAAsB3D,QAAQ2G,KAAR3G,CAAc+B,GAAd/B,CAAkB4G,mBAAxCjD;AACA,QAAI3D,QAAQI,IAARJ,CAAa6G,WAAjB,EAA8B;AAC5B;AACAzB,4BAAsBpF,QAAQI,IAARJ,CAAa6G,WAAnCzB;AACF,KAHA,MAGO;AACLA,4BAAsBlF,cAAKC,IAALD,CAAUyD,mBAAVzD,EAA+BoB,WAA/BpB,EAA4C,YAA5CA,CAAtBkF;AACF;AACF,GARO,MAQA;AACL,UAAM,IAAIzF,KAAJ,CAAW,uCAAsCK,QAAQC,IAAK,EAA9D,CAAN;AACF;AACA;AACA;AACAoG,2BAAyBnG,cAAKC,IAALD,CAAUyD,mBAAVzD,EAA+B,sBAA/BA,CAAzBmG;AACA,SAAO;AACLA,0BADK;AAEL1C,uBAFK;AAGLrC,eAHK;AAIL8D;AAJK,GAAP;AAMF,C,QA0CSa,sB,GAAAA,sB;QAAwBP,mB,GAAAA,mB;QAAqB9B,Q,GAAAA,Q;QAAUyB,iC,GAAAA,iC","file":"../../detach/IosWorkspace.js","sourcesContent":["/**\n * @flow\n */\nimport fs from 'fs-extra';\nimport invariant from 'invariant';\nimport path from 'path';\nimport rimraf from 'rimraf';\n\nimport Api from '../Api';\nimport {\n  isDirectory,\n  rimrafDontThrow,\n  parseSdkMajorVersion,\n  spawnAsyncThrowError,\n  transformFileContentsAsync,\n} from './ExponentTools';\nimport { renderPodfileAsync } from './IosPodsTools.js';\nimport * as IosPlist from './IosPlist';\nimport logger from './Logger';\nimport * as Utils from '../Utils';\nimport StandaloneContext from './StandaloneContext';\nimport * as Versions from '../Versions';\nimport * as Modules from '../modules/Modules';\n\nasync function _getVersionedExpoKitConfigAsync(\n  sdkVersion: string,\n  skipServerValidation: boolean\n): any {\n  const versions = await Versions.versionsAsync();\n  let sdkVersionConfig = versions.sdkVersions[sdkVersion];\n  if (!sdkVersionConfig) {\n    if (skipServerValidation) {\n      sdkVersionConfig = {};\n    } else {\n      throw new Error(`Unsupported SDK version: ${sdkVersion}`);\n    }\n  }\n  const { iosVersion, iosExpoViewUrl } = sdkVersionConfig;\n  const iosClientVersion = iosVersion ? iosVersion : versions.iosVersion;\n  return {\n    iosClientVersion,\n    iosExpoViewUrl,\n  };\n}\n\nasync function _getOrCreateTemplateDirectoryAsync(\n  context: StandaloneContext,\n  iosExpoViewUrl: ?string\n) {\n  if (context.type === 'service') {\n    return path.join(context.data.expoSourcePath, '..');\n  } else if (context.type === 'user') {\n    let expoRootTemplateDirectory;\n    if (process.env.EXPO_VIEW_DIR) {\n      // Only for testing\n      expoRootTemplateDirectory = process.env.EXPO_VIEW_DIR;\n    } else {\n      // HEY: if you need other paths into the extracted archive, be sure and include them\n      // when the archive is generated in `ios/pipeline.js`\n      expoRootTemplateDirectory = path.join(context.data.projectPath, 'temp-ios-directory');\n      if (!isDirectory(expoRootTemplateDirectory)) {\n        fs.mkdirpSync(expoRootTemplateDirectory);\n        logger.info('Downloading iOS code...');\n        invariant(iosExpoViewUrl, `The URL for ExpoKit iOS must be set`);\n        await Api.downloadAsync(iosExpoViewUrl, expoRootTemplateDirectory, {\n          extract: true,\n        });\n      }\n    }\n    return expoRootTemplateDirectory;\n  }\n}\n\nasync function _renameAndMoveProjectFilesAsync(\n  context: StandaloneContext,\n  projectDirectory: string,\n  projectName: string\n) {\n  // remove .gitignore, as this actually pertains to internal expo template management\n  try {\n    const gitIgnorePath = path.join(projectDirectory, '.gitignore');\n    if (fs.existsSync(gitIgnorePath)) {\n      rimraf.sync(gitIgnorePath);\n    }\n  } catch (e) {}\n\n  const filesToTransform = [\n    path.join('exponent-view-template.xcodeproj', 'project.pbxproj'),\n    path.join('exponent-view-template.xcworkspace', 'contents.xcworkspacedata'),\n    path.join(\n      'exponent-view-template.xcodeproj',\n      'xcshareddata',\n      'xcschemes',\n      'exponent-view-template.xcscheme'\n    ),\n  ];\n\n  let bundleIdentifier;\n  if (context.type === 'user') {\n    const exp = context.data.exp;\n    bundleIdentifier = exp.ios && exp.ios.bundleIdentifier ? exp.ios.bundleIdentifier : null;\n    if (!bundleIdentifier) {\n      throw new Error(`Cannot configure an ExpoKit workspace with no iOS bundle identifier.`);\n    }\n  } else if (context.type === 'service') {\n    bundleIdentifier = 'host.exp.Exponent';\n  }\n\n  await Promise.all(\n    filesToTransform.map(fileName =>\n      transformFileContentsAsync(path.join(projectDirectory, fileName), fileString => {\n        return fileString\n          .replace(/com.getexponent.exponent-view-template/g, bundleIdentifier)\n          .replace(/exponent-view-template/g, projectName);\n      })\n    )\n  );\n\n  // order of this array matters\n  const filesToMove = [\n    'exponent-view-template',\n    path.join(\n      'exponent-view-template.xcodeproj',\n      'xcshareddata',\n      'xcschemes',\n      'exponent-view-template.xcscheme'\n    ),\n    'exponent-view-template.xcodeproj',\n    'exponent-view-template.xcworkspace',\n  ];\n\n  filesToMove.forEach(async fileName => {\n    let destFileName = path.join(path.dirname(fileName), `${projectName}${path.extname(fileName)}`);\n    await spawnAsyncThrowError('/bin/mv', [\n      path.join(projectDirectory, fileName),\n      path.join(projectDirectory, destFileName),\n    ]);\n  });\n}\n\nasync function _configureVersionsPlistAsync(\n  configFilePath: string,\n  standaloneSdkVersion: string,\n  isServiceContext: boolean\n) {\n  await IosPlist.modifyAsync(configFilePath, 'EXSDKVersions', versionConfig => {\n    versionConfig.sdkVersions = [standaloneSdkVersion];\n    versionConfig.detachedNativeVersions = {\n      shell: standaloneSdkVersion,\n      kernel: standaloneSdkVersion,\n    };\n    return versionConfig;\n  });\n}\n\nasync function _configureBuildConstantsPlistAsync(\n  configFilePath: string,\n  context: StandaloneContext\n) {\n  await IosPlist.modifyAsync(configFilePath, 'EXBuildConstants', constantsConfig => {\n    constantsConfig.STANDALONE_CONTEXT_TYPE = context.type;\n    return constantsConfig;\n  });\n}\n\nasync function _renderPodfileFromTemplateAsync(\n  context: StandaloneContext,\n  expoRootTemplateDirectory: string,\n  sdkVersion: string,\n  iosClientVersion: ?string\n) {\n  const { iosProjectDirectory, projectName } = getPaths(context);\n  let podfileTemplateFilename;\n  let podfileSubstitutions: any = {\n    TARGET_NAME: projectName,\n  };\n  let reactNativeDependencyPath;\n  const detachableUniversalModules = Modules.getDetachableModulesForPlatformAndSdkVersion(\n    'ios',\n    sdkVersion\n  );\n  if (context.type === 'user') {\n    invariant(iosClientVersion, `The iOS client version must be specified`);\n    reactNativeDependencyPath = path.join(context.data.projectPath, 'node_modules', 'react-native');\n    podfileSubstitutions.EXPOKIT_TAG = `ios/${iosClientVersion}`;\n    podfileTemplateFilename = 'ExpoKit-Podfile';\n    const expoDependenciesPath = path.join(context.data.projectPath, 'node_modules');\n    podfileSubstitutions.UNIVERSAL_MODULES = detachableUniversalModules.map(module => ({\n      ...module,\n      path: path.join(expoDependenciesPath, module.libName, module.subdirectory),\n    }));\n  } else if (context.type === 'service') {\n    reactNativeDependencyPath = path.join(\n      expoRootTemplateDirectory,\n      'react-native-lab',\n      'react-native'\n    );\n    podfileSubstitutions.EXPOKIT_PATH = path.relative(\n      iosProjectDirectory,\n      expoRootTemplateDirectory\n    );\n    podfileSubstitutions.VERSIONED_REACT_NATIVE_PATH = path.relative(\n      iosProjectDirectory,\n      path.join(expoRootTemplateDirectory, 'ios', 'versioned-react-native')\n    );\n    const modulesPath = path.join(expoRootTemplateDirectory, 'packages');\n    podfileSubstitutions.UNIVERSAL_MODULES = detachableUniversalModules.map(module => ({\n      ...module,\n      path: path.join(modulesPath, module.libName, module.subdirectory),\n    }));\n    podfileTemplateFilename = 'ExpoKit-Podfile-versioned';\n  } else {\n    throw new Error(`Unsupported context type: ${context.type}`);\n  }\n  podfileSubstitutions.REACT_NATIVE_PATH = path.relative(\n    iosProjectDirectory,\n    reactNativeDependencyPath\n  );\n  podfileSubstitutions.UNIVERSAL_MODULES = podfileSubstitutions.UNIVERSAL_MODULES.map(module => ({\n    ...module,\n    path: path.relative(iosProjectDirectory, module.path),\n  }));\n\n  // env flags for testing\n  if (process.env.EXPOKIT_TAG_IOS) {\n    logger.info(`EXPOKIT_TAG_IOS: Using custom ExpoKit iOS tag...`);\n    podfileSubstitutions.EXPOKIT_TAG = process.env.EXPOKIT_TAG_IOS;\n  } else if (process.env.EXPO_VIEW_DIR) {\n    logger.info('EXPO_VIEW_DIR: Using local ExpoKit source for iOS...');\n    podfileSubstitutions.EXPOKIT_PATH = path.relative(\n      iosProjectDirectory,\n      process.env.EXPO_VIEW_DIR\n    );\n    // If EXPO_VIEW_DIR is defined overwrite UNIVERSAL_MODULES with paths pointing to EXPO_VIEW_DIR\n    podfileSubstitutions.UNIVERSAL_MODULES = podfileSubstitutions.UNIVERSAL_MODULES.map(module => ({\n      ...module,\n      path: path.relative(\n        iosProjectDirectory,\n        path.join(process.env.EXPO_VIEW_DIR, 'packages', module.libName, module.subdirectory)\n      ),\n    }));\n  }\n  const templatePodfilePath = path.join(\n    expoRootTemplateDirectory,\n    'template-files',\n    'ios',\n    podfileTemplateFilename\n  );\n  await renderPodfileAsync(\n    templatePodfilePath,\n    path.join(iosProjectDirectory, 'Podfile'),\n    podfileSubstitutions,\n    context.data.shellAppSdkVersion,\n    sdkVersion\n  );\n}\n\nasync function createDetachedAsync(context: StandaloneContext) {\n  const { iosProjectDirectory, projectName, supportingDirectory } = getPaths(context);\n  logger.info(`Creating ExpoKit workspace at ${iosProjectDirectory}...`);\n\n  const isServiceContext = context.type === 'service';\n  const standaloneSdkVersion = await getNewestSdkVersionSupportedAsync(context);\n\n  let iosClientVersion;\n  let iosExpoViewUrl;\n  if (context.type === 'user') {\n    ({ iosClientVersion, iosExpoViewUrl } = await _getVersionedExpoKitConfigAsync(\n      standaloneSdkVersion,\n      process.env.EXPO_VIEW_DIR\n    ));\n  }\n\n  const expoRootTemplateDirectory = await _getOrCreateTemplateDirectoryAsync(\n    context,\n    iosExpoViewUrl\n  );\n\n  // copy template workspace\n  logger.info('Moving iOS project files...');\n  logger.info('Attempting to create project directory...');\n  fs.mkdirpSync(iosProjectDirectory);\n  logger.info('Created project directory! Copying files:');\n  await Utils.ncpAsync(\n    path.join(expoRootTemplateDirectory, 'exponent-view-template', 'ios'),\n    iosProjectDirectory\n  );\n\n  logger.info('Naming iOS project...');\n  await _renameAndMoveProjectFilesAsync(context, iosProjectDirectory, projectName);\n\n  logger.info('Configuring iOS dependencies...');\n  // this configuration must happen prior to build time because it affects which\n  // native versions of RN we depend on.\n  await _configureVersionsPlistAsync(supportingDirectory, standaloneSdkVersion, isServiceContext);\n  await _configureBuildConstantsPlistAsync(supportingDirectory, context);\n  await _renderPodfileFromTemplateAsync(\n    context,\n    expoRootTemplateDirectory,\n    standaloneSdkVersion,\n    iosClientVersion\n  );\n\n  if (!process.env.EXPO_VIEW_DIR) {\n    if (context.type === 'user') {\n      rimrafDontThrow(expoRootTemplateDirectory);\n    }\n    await IosPlist.cleanBackupAsync(supportingDirectory, 'EXSDKVersions', false);\n  }\n}\n\nfunction addDetachedConfigToExp(exp: Object, context: StandaloneContext): Object {\n  if (context.type !== 'user') {\n    logger.warn(`Tried to modify exp for a non-user StandaloneContext, ignoring`);\n    return exp;\n  }\n  const { supportingDirectory } = getPaths(context);\n  exp.ios.publishBundlePath = path.relative(\n    context.data.projectPath,\n    path.join(supportingDirectory, 'shell-app.bundle')\n  );\n  exp.ios.publishManifestPath = path.relative(\n    context.data.projectPath,\n    path.join(supportingDirectory, 'shell-app-manifest.json')\n  );\n  return exp;\n}\n\n/**\n *  paths returned:\n *    iosProjectDirectory - root directory of an (uncompiled) xcworkspace and obj-c source tree\n *    projectName - xcworkspace project name normalized from context.config\n *    supportingDirectory - location of Info.plist, xib files, etc. during configuration.\n *      for an unbuilt app this is underneath iosProjectDirectory. for a compiled app it's just\n *      a path to the flat xcarchive.\n *    intermediatesDirectory - temporary spot to write whatever files are needed during the\n *      detach/build process but can be discarded afterward.\n */\nfunction getPaths(context: StandaloneContext) {\n  let iosProjectDirectory;\n  let projectName;\n  let supportingDirectory;\n  let intermediatesDirectory;\n  if (context.isAnonymous()) {\n    projectName = 'ExpoKitApp';\n  } else if (context.config && context.config.name) {\n    let projectNameLabel = context.config.name;\n    projectName = projectNameLabel.replace(/[^a-z0-9_\\-]/gi, '-').toLowerCase();\n  } else {\n    throw new Error('Cannot configure an Expo project with no name.');\n  }\n  if (context.type === 'user') {\n    iosProjectDirectory = path.join(context.data.projectPath, 'ios');\n    supportingDirectory = path.join(iosProjectDirectory, projectName, 'Supporting');\n  } else if (context.type === 'service') {\n    iosProjectDirectory = context.build.ios.workspaceSourcePath;\n    if (context.data.archivePath) {\n      // compiled archive has a flat NSBundle\n      supportingDirectory = context.data.archivePath;\n    } else {\n      supportingDirectory = path.join(iosProjectDirectory, projectName, 'Supporting');\n    }\n  } else {\n    throw new Error(`Unsupported StandaloneContext type: ${context.type}`);\n  }\n  // sandbox intermediates directory by workspace so that concurrently operating\n  // contexts do not interfere with one another.\n  intermediatesDirectory = path.join(iosProjectDirectory, 'ExpoKitIntermediates');\n  return {\n    intermediatesDirectory,\n    iosProjectDirectory,\n    projectName,\n    supportingDirectory,\n  };\n}\n\n/**\n *  Get the newest sdk version supported given the standalone context.\n *  Not all contexts support the newest sdk version.\n */\nasync function getNewestSdkVersionSupportedAsync(context: StandaloneContext) {\n  if (context.type === 'user') {\n    return context.data.exp.sdkVersion;\n  } else if (context.type === 'service') {\n    // when running in universe or on a turtle machine,\n    // we care about what sdk version is actually present in this working copy.\n    // this might not be the same thing deployed to our www Versions endpoint.\n    let { supportingDirectory } = getPaths(context);\n    if (!fs.existsSync(supportingDirectory)) {\n      // if we run this method before creating the workspace, we may need to look at the template.\n      supportingDirectory = path.join(\n        context.data.expoSourcePath,\n        '..',\n        'exponent-view-template',\n        'ios',\n        'exponent-view-template',\n        'Supporting'\n      );\n    }\n    let allVersions, newestVersion;\n    await IosPlist.modifyAsync(supportingDirectory, 'EXSDKVersions', versionConfig => {\n      allVersions = versionConfig.sdkVersions;\n      return versionConfig;\n    });\n    let highestMajorComponent = 0;\n    allVersions.forEach(version => {\n      let majorComponent = parseSdkMajorVersion(version);\n      if (majorComponent > highestMajorComponent) {\n        highestMajorComponent = majorComponent;\n        newestVersion = version;\n      }\n    });\n    return newestVersion;\n  }\n}\n\nexport { addDetachedConfigToExp, createDetachedAsync, getPaths, getNewestSdkVersionSupportedAsync };\n"],"sourceRoot":"/xdl@51.6.4/src"}