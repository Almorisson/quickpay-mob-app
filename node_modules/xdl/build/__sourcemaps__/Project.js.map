{"version":3,"sources":["Project.js"],"names":["async","projectDir","packagerPort","expoServerPort","await","ProjectSettings","readPackagerInfoAsync","currentStatus","projectRoot","url","UrlUtils","constructManifestUrlAsync","isUrlFallback","getManifestUrlWithFallbackAsync","ErrorCode","NO_PROJECT_ROOT","_assertValidProjectRoot","rangeStart","let","port","freeportAsync","NO_PORT_FOUND","_getFreePortAsync","platform","errorCode","minLength","getPlatformSpecificBundleUrl","fullUrl","response","request","get","headers","statusCode","body","JSON","parse","e","ProjectUtils","logError","undefined","message","length","_getForPlatformAsync","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","_resolveGoogleServicesFile","resolver","strict","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","fieldPath","urls","Promise","all","map","pathOrURL","match","existsSync","err","Error","localAssetPath","manifestField","forEach","index","set","logMethod","logWarning","_resolveManifestAssets","options","exp","pkg","readConfigJsonAsync","configName","configFilenameAsync","NO_PACKAGE_JSON","slug","name","INVALID_MANIFEST","getSlugAsync","formData","append","releaseChannel","queryResult","Api","callMethodAsync","getLatestReleaseAsync","sourceDirs","outputDir","assetPathToWrite","ensureDir","bundlesPathToWrite","androidIndexes","iosIndexes","sourceDir","promises","sourceAssetDir","outputAssetDir","assetPromise","copy","push","sourceBundleDir","outputBundleDir","bundlePromise","putJsonInMemory","indexPath","accumulator","JsonFile","readAsync","Array","isArray","androidIndexPath","iosIndexPath","getSortedIndex","indexes","sort","index1","index2","semver","eq","logger","global","error","gte","sortedAndroidIndexes","sortedIosIndexes","_writeArtifactSafelyAsync","join","stringify","mergeAppDistributions","publicUrl","assetUrl","_validatePackagerReadyAsync","packagerOpts","isDev","dev","minify","iosBundle","androidBundle","_buildPublishBundlesAsync","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","info","publishOptions","_getPublishExpConfigAsync","assets","_fetchAndSaveAssetsAsync","dumpAssetmap","assetmap","asset","hash","hooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","hashIds","uuid","v1","revisionId","encode","now","developer","tool","user","UserManager","ensureLoggedInAsync","id","username","bundleUrl","urljoin","dumpSourcemap","iosSourceMap","androidSourceMap","_maybeBuildSourceMapsAsync","force","iosMapName","iosMapPath","androidMapName","androidMapPath","truncateLastNLines","appendFile","debugHtml","exportForAppHosting","filePath","n","lines","readLastLines","read","to_vanquish","size","stat","truncate","paths","files","fileHashes","keyChunks","chunk","Object","keys","key","logDebug","quiet","assetPath","p","_saveAssetAsync","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","PUBLISH_VALIDATION_ERROR","validPostPublishHooks","postPublish","hook","file","config","fn","_requireFromProject","_fn","HOOK_INITIALIZATION_ERROR","_fetchAndUploadAssetsAsync","_uploadArtifactsAsync","serverError","Sentry","captureException","_maybeWriteArtifactsToDiskAsync","ios","publishManifestPath","androidManifest","iosManifest","ExponentTools","getManifestAsync","Accept","hookOptions","log","msg","result","then","warn","stack","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","IosPlist","modifyAsync","shellPlist","publishBundlePath","fullManifestUrl","replace","constantsPath","deleteLinesInFileAsync","regexFileAsync","isKernel","_handleKernelPublishedAsync","publishAsync","_createBlob","packagerInfo","startReactNativeServerAsync","reset","schema","joi","object","string","validate","INVALID_OPTIONS","toString","version","process","env","locales","getResolvedLocalesAsync","opts","entryPoint","Exp","determineEntryPointAsync","publishUrl","constructPublishUrlAsync","INVALID_BUNDLE","MINIMUM_BUNDLE_SIZE","sourceMapUrl","constructSourceMapUrlAsync","hostedAssetPrefix","assetsUrl","constructAssetsUrlAsync","iosAssetsJson","INVALID_ASSETS","androidAssetsJson","manifestAssets","absolutePath","md5hex","iosAssets","androidAssets","concat","_collectAssets","assetBundlePatterns","fullPatterns","bundledAssets","Set","shouldBundle","__packager_asset","some","minimatch","add","type","_configureExpForAssets","assetCdnPath","EXPO_CDN","uploadAssetsAsync","hostedUrl","keyName","artifactPath","artifact","pathToWrite","dirname","errorMsg","writeFile","publishSourceMapPath","kernelBundleUrl","api","scheme","host","kernel","androidManifestPath","iosManifestPath","metas","metadata","missing","exists","relativePath","_readFileForUpload","isNode","createReadStream","data","Blob","configPrefix","ThirdParty","getManifest","getConfigAsync","current","boolean","mode","any","valid","expIds","array","regex","bundleIdentifier","package","buildAsync","includes","delayAsync","_waitForRunningAsync","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","nodeModulesPath","customLogReporterPath","assetExts","nonPersistent","maxWorkers","Versions","gteSdkVersion","userPackagerOpts","uniq","cliOpts","reduce","val","defaultCliPath","cliPath","rnCliPath","nodePath","_nodePathForProjectRoot","packagerProcess","child_process","fork","cwd","REACT_NATIVE_APP_ROOT","NODE_PATH","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","treekill","stdout","setEncoding","stderr","pipe","split","_logPackagerOutput","exitPromise","reject","once","code","packagerUrl","constructBundleUrlAsync","urlType","hostType","statusUrl","timeoutPromise","setTimeout","WAIT_FOR_PACKAGER_TIMEOUT","race","treekillAsync","stopExpoServerAsync","app","express","use","json","limit","urlencoded","extended","manifestHandler","req","res","getPackagerOptsAsync","bundleUrlPackagerOpts","xde","shouldExposeEnvironmentVariableInManifest","mainModuleName","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","hostname","encodeURI","encodeURIComponent","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","hostUUID","UserSettings","anonymousIdentifier","currentSession","getSessionAsync","offline","manifestString","_cachedSignedManifest","signedManifest","unsignedManifest","signature","publishInfo","getPublishInfoAsync","args","hostInfo","server","serverVersion","require","serverDriver","serverOS","os","serverOSVersion","release","send","status","post","deviceId","deviceName","_handleDeviceLogs","close","expRc","readExpRcAsync","manifestPort","listen","address","saveRecentExpRootAsync","startExpoServerAsync","hostnameAsync","ngrokPid","attempts","configPath","dotExpoHomeDirectory","ngrokConnectAsync","NGROK_ERROR","error_code","kill","ngrokKillAsync","resetProjectRandomnessAsync","_connectToNgrokAsync","getCurrentUsernameAsync","NO_PACKAGER_PORT","NO_EXPO_SERVER_PORT","stopTunnelsAsync","Android","startAdbReverseAsync","logInfo","packageShortName","base","startedTunnelsSuccessfully","TUNNEL_TIMEOUT","expoServerNgrokUrl","authtoken","ngrok","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","packagerNgrokUrl","logWithLevel","tag","_expoEventType","addListener","startTunnelsAsync","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","number","integer","setOptionsAsync","getUrlAsync","DevSession","startSession","startAsync","stopSession","_stopInternalAsync","stopAsync","promisify","connect","Request","defaults","resolveWithFullResponse","modulePath","indexOf","fullPath","decache","_stripPackagerOutputBox","output","re","found","level","_isIgnorableDuplicateModuleWarning","test","startsWith","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","escapeRegExp","reactNativeNodeModulesCollisionRegex","RegExp","_isIgnorableBugReportingExtraData","logs","i","obj","DEBUG","groupDepth","shouldHide","includesStack","directory","parentDirectory","delimiter","blacklistedEnvironmentVariables","has","toUpperCase"],"mappings":"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","file":"../Project.js","sourcesContent":["/**\n * @flow\n */\nimport JsonFile from '@expo/json-file';\nimport child_process from 'child_process';\nimport crypto from 'crypto';\nimport delayAsync from 'delay-async';\nimport decache from 'decache';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport joi from 'joi';\nimport promisify from 'util.promisify';\nimport chunk from 'lodash/chunk';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport get from 'lodash/get';\nimport reduce from 'lodash/reduce';\nimport set from 'lodash/set';\nimport uniq from 'lodash/uniq';\nimport minimatch from 'minimatch';\nimport ngrok from '@expo/ngrok';\nimport os from 'os';\nimport path from 'path';\nimport Request from 'request-promise-native';\nimport semver from 'semver';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport md5hex from 'md5hex';\nimport url from 'url';\nimport urljoin from 'url-join';\nimport uuid from 'uuid';\nimport readLastLines from 'read-last-lines';\n\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport Config from './Config';\nimport * as Doctor from './project/Doctor';\nimport * as DevSession from './DevSession';\nimport ErrorCode from './ErrorCode';\nimport logger from './Logger';\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as Exp from './Exp';\nimport * as ExpSchema from './project/ExpSchema';\nimport FormData from './tools/FormData';\nimport * as IosPlist from './detach/IosPlist';\nimport * as IosWorkspace from './detach/IosWorkspace';\nimport { isNode } from './tools/EnvironmentHelper';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Sentry from './Sentry';\nimport StandaloneContext from './detach/StandaloneContext';\nimport * as ThirdParty from './ThirdParty';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME } from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport XDLError from './XDLError';\n\nimport type { User as ExpUser } from './User'; //eslint-disable-line\n\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\nconst WAIT_FOR_PACKAGER_TIMEOUT = 30 * 1000;\n\nconst treekillAsync = promisify(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\n\nconst request = Request.defaults({\n  resolveWithFullResponse: true,\n});\n\ntype CachedSignedManifest = {\n  manifestString: ?string,\n  signedManifest: ?string,\n};\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\n// DECPRECATED: use UrlUtils.constructManifestUrlAsync\nexport async function getManifestUrlWithFallbackAsync(projectRoot: string) {\n  return {\n    url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n    isUrlFallback: false,\n  };\n}\n\nasync function _assertValidProjectRoot(projectRoot) {\n  if (!projectRoot) {\n    throw new XDLError(ErrorCode.NO_PROJECT_ROOT, 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart) {\n  let port = await freeportAsync(rangeStart);\n  if (!port) {\n    throw new XDLError(ErrorCode.NO_PORT_FOUND, 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(projectRoot, url, platform, { errorCode, minLength }) {\n  url = UrlUtils.getPlatformSpecificBundleUrl(url, platform);\n\n  let fullUrl = `${url}&platform=${platform}`;\n  let response = await request.get({\n    url: fullUrl,\n    headers: {\n      'Exponent-Platform': platform,\n    },\n  });\n\n  if (response.statusCode !== 200) {\n    if (response.body) {\n      let body;\n      try {\n        body = JSON.parse(response.body);\n      } catch (e) {\n        ProjectUtils.logError(projectRoot, 'expo', response.body);\n      }\n\n      if (body !== undefined) {\n        if (body.message) {\n          ProjectUtils.logError(projectRoot, 'expo', body.message);\n        } else {\n          ProjectUtils.logError(projectRoot, 'expo', response.body);\n        }\n      }\n    }\n    throw new XDLError(\n      errorCode,\n      `Packager URL ${fullUrl} returned unexpected code ${response.statusCode}. ` +\n        'Please open your project in the Expo app and see if there are any errors. ' +\n        'Also scroll up and make sure there were no errors or warnings when opening your project.'\n    );\n  }\n\n  if (!response.body || (minLength && response.body.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.body}`);\n  }\n\n  return response.body;\n}\n\nasync function _resolveGoogleServicesFile(projectRoot, manifest) {\n  if (manifest.android && manifest.android.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n}\n\nasync function _resolveManifestAssets(projectRoot, manifest, resolver, strict = false) {\n  try {\n    // Asset fields that the user has set\n    const assetSchemas = (await ExpSchema.getAssetSchemasAsync(\n      manifest.sdkVersion\n    )).filter(({ fieldPath }) => get(manifest, fieldPath));\n\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async ({ fieldPath }) => {\n        const pathOrURL = get(manifest, fieldPath);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err = new Error('Could not resolve local asset.');\n          // $FlowFixMe\n          err.localAssetPath = pathOrURL;\n          // $FlowFixMe\n          err.manifestField = fieldPath;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach(({ fieldPath }, index) => set(manifest, fieldPath + 'Url', urls[index]));\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app/exp.json.`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\nfunction _requireFromProject(modulePath, projectRoot) {\n  try {\n    if (modulePath.indexOf('.') === 0) {\n      let fullPath = path.resolve(projectRoot, modulePath);\n\n      // Clear the require cache for this module so get a fresh version of it\n      // without requiring the user to restart XDE\n      decache(fullPath);\n\n      // $FlowIssue: doesn't work with dynamic requires\n      return require(fullPath);\n    } else {\n      let fullPath = path.resolve(projectRoot, 'node_modules', modulePath);\n\n      // Clear the require cache for this module so get a fresh version of it\n      // without requiring the user to restart XDE\n      decache(fullPath);\n\n      // $FlowIssue: doesn't work with dynamic requires\n      return require(fullPath);\n    }\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getSlugAsync(projectRoot: string, options: Object = {}) {\n  // Verify that exp/app.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  } else if (!exp.slug) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.INVALID_MANIFEST,\n      `${configName} in ${projectRoot} must contain the slug field`\n    );\n  }\n  return exp.slug;\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string,\n    platform: string,\n  }\n) {\n  // TODO(ville): move request from multipart/form-data to JSON once supported by the endpoint.\n  let formData = new FormData();\n  formData.append('queryType', 'history');\n  formData.append('slug', await getSlugAsync(projectRoot));\n  formData.append('version', '2');\n  formData.append('count', '1');\n  formData.append('releaseChannel', options.releaseChannel);\n  formData.append('platform', options.platform);\n  const { queryResult } = await Api.callMethodAsync('publishInfo', [], 'post', null, {\n    formData,\n  });\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\n// Takes multiple exported apps in sourceDirs and coalesces them to one app in outputDir\nexport async function mergeAppDistributions(\n  projectRoot: string,\n  sourceDirs: Array<string>,\n  outputDir: string\n) {\n  const assetPathToWrite = path.resolve(projectRoot, outputDir, 'assets');\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, outputDir, 'bundles');\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // merge files from bundles and assets\n  const androidIndexes = [];\n  const iosIndexes = [];\n\n  for (let sourceDir of sourceDirs) {\n    const promises = [];\n\n    // copy over assets/bundles from other src dirs to the output dir\n    if (sourceDir !== outputDir) {\n      // copy file over to assetPath\n      const sourceAssetDir = path.resolve(projectRoot, sourceDir, 'assets');\n      const outputAssetDir = path.resolve(projectRoot, outputDir, 'assets');\n      const assetPromise = fs.copy(sourceAssetDir, outputAssetDir);\n      promises.push(assetPromise);\n\n      // copy files over to bundlePath\n      const sourceBundleDir = path.resolve(projectRoot, sourceDir, 'bundles');\n      const outputBundleDir = path.resolve(projectRoot, outputDir, 'bundles');\n      const bundlePromise = fs.copy(sourceBundleDir, outputBundleDir);\n      promises.push(bundlePromise);\n\n      await Promise.all(promises);\n    }\n\n    // put index.jsons into memory\n    const putJsonInMemory = async (indexPath, accumulator) => {\n      const index = await JsonFile.readAsync(indexPath);\n      if (!index.sdkVersion) {\n        throw new XDLError(\n          ErrorCode.INVALID_MANIFEST,\n          `Invalid index.json, must specify an sdkVersion at ${indexPath}`\n        );\n      }\n      if (Array.isArray(index)) {\n        // index.json could also be an array\n        accumulator.push(...index);\n      } else {\n        accumulator.push(index);\n      }\n    };\n\n    const androidIndexPath = path.resolve(projectRoot, sourceDir, 'android-index.json');\n    await putJsonInMemory(androidIndexPath, androidIndexes);\n\n    const iosIndexPath = path.resolve(projectRoot, sourceDir, 'ios-index.json');\n    await putJsonInMemory(iosIndexPath, iosIndexes);\n  }\n\n  // sort indexes by descending sdk value\n  const getSortedIndex = indexes => {\n    return indexes.sort((index1, index2) => {\n      if (semver.eq(index1.sdkVersion, index2.sdkVersion)) {\n        logger.global.error(\n          `Encountered multiple index.json with the same SDK version ${index1.sdkVersion}. This could result in undefined behavior.`\n        );\n      }\n      return semver.gte(index1.sdkVersion, index2.sdkVersion) ? -1 : 1;\n    });\n  };\n\n  const sortedAndroidIndexes = getSortedIndex(androidIndexes);\n  const sortedIosIndexes = getSortedIndex(iosIndexes);\n\n  // Save the json arrays to disk\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(sortedAndroidIndexes)\n  );\n\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(sortedIosIndexes)\n  );\n}\n\n/**\n * Apps exporting for self hosting will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportForAppHosting(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {} = {}\n) {\n  await _validatePackagerReadyAsync(projectRoot);\n\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // build the bundles\n  let packagerOpts = {};\n  if (options.isDev) {\n    packagerOpts = { dev: true, minify: true };\n  }\n  const { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot, packagerOpts);\n  const iosBundleHash = crypto\n    .createHash('md5')\n    .update(iosBundle)\n    .digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(outputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto\n    .createHash('md5')\n    .update(androidBundle)\n    .digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(outputDir, 'bundles', androidBundleUrl);\n\n  await _writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await _writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n  logger.global.info('Finished saving JS Bundles.');\n\n  // save the assets\n  // Get project config\n  const publishOptions = options.publishOptions || {};\n  const exp = await _getPublishExpConfigAsync(projectRoot, publishOptions);\n  const { assets } = await _fetchAndSaveAssetsAsync(projectRoot, exp, publicUrl, outputDir);\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n    const assetmap = {};\n    assets.forEach(asset => {\n      assetmap[asset.hash] = asset;\n    });\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  // Delete keys that are normally deleted in the publish process\n  delete exp.hooks;\n\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  exp.publishedTime = new Date().toISOString();\n  exp.commitTime = new Date().toISOString();\n\n  // generate revisionId and id the same way www does\n  const hashIds = new HashIds(uuid.v1(), 10);\n  exp.revisionId = hashIds.encode(Date.now());\n\n  if (options.isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!exp.slug) {\n    throw new XDLError(\n      ErrorCode.INVALID_MANIFEST,\n      'Must provide a slug field in the app.json manifest.'\n    );\n  }\n  const user = await UserManager.ensureLoggedInAsync();\n  exp.id = `@${user.username}/${exp.slug}`;\n\n  // save the android manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', androidBundleUrl);\n  exp.platform = 'android';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(exp)\n  );\n\n  // save the ios manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', iosBundleUrl);\n  exp.platform = 'ios';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(exp)\n  );\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    const { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n      force: true,\n    });\n    // write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(outputDir, 'bundles', iosMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(outputDir, 'bundles', androidMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    // Remove original mapping to incorrect sourcemap paths\n    logger.global.info('Configuring sourcemaps');\n    await truncateLastNLines(iosJsPath, 1);\n    await truncateLastNLines(androidJsPath, 1);\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n    <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n    <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n    Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n    You can see a red coloured folder containing the original source code from your bundle.\n    `;\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n\nasync function _saveAssetAsync(projectRoot, assets, outputDir) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n      logger.global.info({ quiet: true }, `Saving ${paths[key]}`);\n\n      let assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      const p = fs.copy(paths[key], assetPath);\n      promises.push(p);\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: Object = {}\n): Promise<{ url: string, ids: string[], err: ?string }> {\n  const user = await UserManager.ensureLoggedInAsync();\n  await _validatePackagerReadyAsync(projectRoot);\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus == Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      ErrorCode.PUBLISH_VALIDATION_ERROR,\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  let exp = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostPublishHooks = [];\n  if (hooks && hooks.postPublish) {\n    hooks.postPublish.forEach(hook => {\n      let { file, config } = hook;\n      let fn = _requireFromProject(file, projectRoot);\n      if (fn === null) {\n        logger.global.error(`Unable to load postPublishHook: '${file}'`);\n      } else {\n        hook._fn = fn;\n        validPostPublishHooks.push(hook);\n      }\n    });\n\n    if (validPostPublishHooks.length !== hooks.postPublish.length) {\n      logger.global.error();\n\n      throw new XDLError(\n        ErrorCode.HOOK_INITIALIZATION_ERROR,\n        'Please fix your postPublish hook configuration.'\n      );\n    }\n  }\n\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot);\n\n  await _fetchAndUploadAssetsAsync(projectRoot, exp);\n\n  let { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n    force: validPostPublishHooks.length,\n  });\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app/exp.json.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  await _maybeWriteArtifactsToDiskAsync({\n    exp,\n    projectRoot,\n    iosBundle,\n    androidBundle,\n    iosSourceMap,\n    androidSourceMap,\n  });\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath)\n  ) {\n    let [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: msg => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (let hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        let result = hook._fn({\n          config: hook.config,\n          ...hookOptions,\n        });\n\n        // If it's a promise, wait for it to resolve\n        if (result && result.then) {\n          result = await result;\n        }\n\n        if (result) {\n          logger.global.info({ quiet: true }, result);\n        }\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n\n    if (exp.ios && exp.ios.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'ios.publishManifestPath',\n        exp.ios.publishManifestPath,\n        JSON.stringify(iosManifest)\n      );\n      const context = StandaloneContext.createUserContext(projectRoot, exp);\n      const { supportingDirectory } = IosWorkspace.getPaths(context);\n      await IosPlist.modifyAsync(supportingDirectory, 'EXShell', shellPlist => {\n        shellPlist.releaseChannel = options.releaseChannel;\n        return shellPlist;\n      });\n    }\n\n    if (exp.android && exp.android.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'android.publishManifestPath',\n        exp.android.publishManifestPath,\n        JSON.stringify(androidManifest)\n      );\n    }\n\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    if (exp.android && exp.android.publishManifestPath && exp.android.publishBundlePath) {\n      let fullManifestUrl = response.url.replace('exp://', 'https://');\n      let constantsPath = path.join(\n        projectRoot,\n        'android',\n        'app',\n        'src',\n        'main',\n        'java',\n        'host',\n        'exp',\n        'exponent',\n        'generated',\n        'AppConstants.java'\n      );\n      await ExponentTools.deleteLinesInFileAsync(\n        `START EMBEDDED RESPONSES`,\n        `END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        '// ADD EMBEDDED RESPONSES HERE',\n        `\n        // ADD EMBEDDED RESPONSES HERE\n        // START EMBEDDED RESPONSES\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${fullManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifest.bundleUrl}\", \"assets://shell-app.bundle\", \"application/javascript\"));\n        // END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${options.releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({ exp, iosBundle, androidBundle, options }) {\n  logger.global.info('Uploading JavaScript bundles');\n  let formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('iosBundle', _createBlob(iosBundle), 'iosBundle');\n  formData.append('androidBundle', _createBlob(androidBundle), 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n  let response = await Api.callMethodAsync('publish', null, 'put', null, {\n    formData,\n  });\n  return response;\n}\n\nasync function _validatePackagerReadyAsync(projectRoot) {\n  _assertValidProjectRoot(projectRoot);\n\n  // Ensure the packager is started\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      'Metro Bundler is not running. Trying to restart it...'\n    );\n    await startReactNativeServerAsync(projectRoot, { reset: true });\n  }\n}\n\nasync function _getPublishExpConfigAsync(projectRoot, options) {\n  let schema = joi.object().keys({\n    releaseChannel: joi.string(),\n  });\n\n  // Validate schema\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, error.toString());\n  }\n  options.releaseChannel = options.releaseChannel || 'default'; // joi default not enforcing this :/\n\n  // Verify that exp/app.json and package.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (exp.sdkVersion === 'UNVERSIONED' && !process.env['EXPO_SKIP_MANIFEST_VALIDATION_TOKEN']) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(exp);\n  return exp;\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function _buildPublishBundlesAsync(projectRoot, opts?: Object) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let publishUrl = await UrlUtils.constructPublishUrlAsync(projectRoot, entryPoint, null, opts);\n\n  logger.global.info('Building iOS bundle');\n  let iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  let androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosBundle, androidBundle };\n}\n\n// note(brentvatne): currently we build source map anytime there is a\n// postPublish hook -- we may have an option in the future to manually\n// enable sourcemap building, but for now it's very fast, most apps in\n// production should use sourcemaps for error reporting, and in the worst\n// case, adding a few seconds to a postPublish hook isn't too annoying\nasync function _maybeBuildSourceMapsAsync(projectRoot, exp, options = {}) {\n  if (!options.force) {\n    return { iosSourceMap: null, androidSourceMap: null };\n  }\n\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building sourcemaps');\n  let iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  let androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosSourceMap, androidSourceMap };\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function _collectAssets(projectRoot, exp, hostedAssetPrefix) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  let iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  let androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets = [];\n  await _resolveManifestAssets(\n    projectRoot,\n    exp,\n    async assetPath => {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    true\n  );\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  return iosAssets.concat(androidAssets).concat(manifestAssets);\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot, exp, assets) {\n  // Add google services file if it exists\n  await _resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns = exp.assetBundlePatterns.map(p => path.join(projectRoot, p));\n    logger.global.info('Processing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        asset.__packager_asset && file && fullPatterns.some(p => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add('asset_' + hash + (asset.type ? '.' + asset.type : ''))\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nasync function _fetchAndUploadAssetsAsync(projectRoot, exp) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(EXPO_CDN, '~assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Uploading assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return exp;\n}\n\nasync function _fetchAndSaveAssetsAsync(projectRoot, exp, hostedUrl, outputDir) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(hostedUrl, 'assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await _saveAssetAsync(projectRoot, assets, outputDir);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\nasync function _writeArtifactSafelyAsync(projectRoot, keyName, artifactPath, artifact) {\n  const pathToWrite = path.resolve(projectRoot, artifactPath);\n  if (!fs.existsSync(path.dirname(pathToWrite))) {\n    const errorMsg = keyName\n      ? `app.json specifies: ${pathToWrite}, but that directory does not exist.`\n      : `app.json specifies ${keyName}: ${pathToWrite}, but that directory does not exist.`;\n    logger.global.warn(errorMsg);\n  } else {\n    await fs.writeFile(pathToWrite, artifact);\n  }\n}\n\nasync function _maybeWriteArtifactsToDiskAsync({\n  exp,\n  projectRoot,\n  iosBundle,\n  androidBundle,\n  iosSourceMap,\n  androidSourceMap,\n}) {\n  if (exp.android && exp.android.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      exp.android.publishBundlePath,\n      androidBundle\n    );\n  }\n\n  if (exp.ios && exp.ios.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishBundlePath',\n      exp.ios.publishBundlePath,\n      iosBundle\n    );\n  }\n\n  if (exp.android && exp.android.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishSourceMapPath',\n      exp.android.publishSourceMapPath,\n      androidSourceMap\n    );\n  }\n\n  if (exp.ios && exp.ios.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishSourceMapPath',\n      exp.ios.publishSourceMapPath,\n      iosSourceMap\n    );\n  }\n}\n\nasync function _handleKernelPublishedAsync({ projectRoot, user, exp, url }) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel.androidManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel.iosManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot, assets) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  const metas = (await Api.callMethodAsync('assetsMetadata', [], 'post', {\n    keys: Object.keys(paths),\n  })).metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n  }\n\n  // Upload them!\n  await Promise.all(\n    chunk(missing, 5).map(async keys => {\n      let formData = new FormData();\n      for (const key of keys) {\n        ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n        let relativePath = paths[key].replace(projectRoot, '');\n        logger.global.info({ quiet: true }, `Uploading ${relativePath}`);\n\n        formData.append(key, await _readFileForUpload(paths[key]), paths[key]);\n      }\n      await Api.callMethodAsync('uploadAssets', [], 'put', null, { formData });\n    })\n  );\n}\n\nfunction _createBlob(string) {\n  if (isNode()) {\n    return string;\n  } else {\n    return new Blob([string]);\n  }\n}\n\nasync function _readFileForUpload(path) {\n  if (isNode()) {\n    return fs.createReadStream(path);\n  } else {\n    const data = await fs.readFile(path);\n    return new Blob([data]);\n  }\n}\n\nasync function getConfigAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n  } = {}\n) {\n  if (!options.publicUrl) {\n    // get the manifest from the project directory\n    const { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    return {\n      exp,\n      pkg,\n      configName: await ProjectUtils.configFilenameAsync(projectRoot),\n      configPrefix: configName === 'app.json' ? 'expo.' : '',\n    };\n  } else {\n    // get the externally hosted manifest\n    return {\n      exp: await ThirdParty.getManifest(options.publicUrl, options),\n      configName: options.publicUrl,\n      configPrefix: '',\n      pkg: {},\n    };\n  }\n}\n\nexport async function buildAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n    sdkVersion?: string,\n  } = {}\n) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  const schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator', 'client'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: joi.string().regex(/^[a-zA-Z][a-zA-Z0-9\\-\\.]+$/),\n    publicUrl: joi.string(),\n    sdkVersion: joi.strict(),\n  });\n\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, error.toString());\n  }\n\n  const { exp, pkg, configName, configPrefix } = await getConfigAsync(projectRoot, options);\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (options.platform === 'ios' || options.platform === 'all') {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a bundle identifier in order to build this experience for iOS.` +\n          `Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.platform === 'android' || options.platform === 'all') {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a java package in order to build this experience for Android.` +\n          `Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n\n  return await Api.callMethodAsync('build', [], 'put', {\n    manifest: exp,\n    options,\n  });\n}\n\nasync function _waitForRunningAsync(url) {\n  try {\n    let response = await request(url);\n    // Looking for \"Cached Bundles\" string is hacky, but unfortunately\n    // ngrok returns a 200 when it succeeds but the port it's proxying\n    // isn't bound.\n    if (\n      response.statusCode >= 200 &&\n      response.statusCode < 300 &&\n      response.body &&\n      response.body.includes('packager-status:running')\n    ) {\n      return true;\n    }\n  } catch (e) {\n    // Try again after delay\n  }\n\n  await delayAsync(100);\n  return _waitForRunningAsync(url);\n}\n\nfunction _stripPackagerOutputBox(output: string) {\n  let re = /Running packager on port (\\d+)/;\n  let found = output.match(re);\n  if (found && found.length >= 2) {\n    return `Running packager on port ${found[1]}\\n`;\n  } else {\n    return null;\n  }\n}\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: Object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  let reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  let reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  let reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _isIgnorableBugReportingExtraData(body) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    let log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let string = body\n      .map(obj => {\n        if (typeof obj === 'undefined') {\n          return 'undefined';\n        }\n        if (obj === 'null') {\n          return 'null';\n        }\n        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n          return obj;\n        }\n        try {\n          return JSON.stringify(obj);\n        } catch (e) {\n          return obj.toString();\n        }\n      })\n      .join(' ');\n    let level = log.level;\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = logger.DEBUG;\n    }\n    let groupDepth = log.groupDepth;\n    let shouldHide = log.shouldHide;\n    let includesStack = log.includesStack;\n    ProjectUtils.logWithLevel(\n      projectRoot,\n      level,\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth,\n        shouldHide,\n        includesStack,\n      },\n      string\n    );\n  }\n}\nexport async function startReactNativeServerAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n) {\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n  let nodeModulesPath = exp.nodeModulesPath\n    ? path.join(path.resolve(projectRoot, exp.nodeModulesPath), 'node_modules')\n    : path.join(projectRoot, 'node_modules');\n  let packagerOpts = {\n    port: packagerPort,\n    customLogReporterPath: path.join(nodeModulesPath, 'expo', 'tools', 'LogReporter'),\n    assetExts: ['ttf'],\n    nonPersistent: !!options.nonPersistent,\n  };\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      ...(userPackagerOpts.assetExts\n        ? {\n            assetExts: uniq([...packagerOpts.assetExts, ...userPackagerOpts.assetExts]),\n          }\n        : {}),\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  let cliOpts = reduce(\n    packagerOpts,\n    (opts, val, key) => {\n      // If the packager opt value is boolean, don't set\n      // --[opt] [value], just set '--opt'\n      if (val && typeof val === 'boolean') {\n        opts.push(`--${key}`);\n      } else if (val) {\n        opts.push(`--${key}`, val);\n      }\n      return opts;\n    },\n    ['start']\n  );\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'local-cli',\n    'cli.js'\n  );\n  const cliPath = exp.rnCliPath || defaultCliPath;\n  let nodePath;\n  // When using a custom path for the RN CLI, we want it to use the project\n  // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      NODE_PATH: nodePath,\n      ELECTRON_RUN_AS_NODE: 1,\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  let exitPromise = new Promise((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      reject(new Error(`Metro Bundler process exited with code ${code}`));\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  const statusUrl = `${packagerUrl}/status`;\n  const timeoutPromise = new Promise((resolve, reject) =>\n    setTimeout(\n      () =>\n        reject(\n          new Error(\n            `Could not access packager status at ${statusUrl}. Are you sure the packager is running and reachable?`\n          )\n        ),\n      WAIT_FOR_PACKAGER_TIMEOUT\n    )\n  );\n  await Promise.race([_waitForRunningAsync(statusUrl), exitPromise, timeoutPromise]);\n}\n\n// Simulate the node_modules resolution\n// If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns\n// \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nlet blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nexport async function startExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  let app = express();\n  app.use(\n    express.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    express.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  } // Serve the manifest.\n  let manifestHandler = async (req, res) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n      let { exp: manifest } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n      if (!manifest) {\n        const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n        throw new Error(`No ${configName} file found`);\n      } // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n        projectRoot,\n      };\n      manifest.packagerOpts = packagerOpts;\n      manifest.env = {};\n      for (let key of Object.keys(process.env)) {\n        if (shouldExposeEnvironmentVariableInManifest(key)) {\n          manifest.env[key] = process.env[key];\n        }\n      }\n      let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n      let platform = req.headers['exponent-platform'] || 'ios';\n      entryPoint = UrlUtils.getPlatformSpecificBundleUrl(entryPoint, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(\n        projectRoot,\n        packagerOpts,\n        req.hostname\n      );\n      let path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n        platform\n      )}&${queryParams}`;\n      manifest.bundleUrl =\n        (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, req.hostname)) +\n        path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, req.hostname);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, req.hostname);\n      manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, req.hostname);\n      await _resolveManifestAssets(\n        projectRoot,\n        manifest,\n        async path => manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path\n      ); // the server normally inserts this but if we're offline we'll do it here\n      await _resolveGoogleServicesFile(projectRoot, manifest);\n      const hostUUID = await UserSettings.anonymousIdentifier();\n      let currentSession = await UserManager.getSessionAsync();\n      if (!currentSession || Config.offline) {\n        manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n      }\n      let manifestString = JSON.stringify(manifest);\n      if (req.headers['exponent-accept-signature']) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          if (!currentSession || Config.offline) {\n            const unsignedManifest = {\n              manifestString,\n              signature: 'UNSIGNED',\n            };\n            _cachedSignedManifest.manifestString = manifestString;\n            manifestString = JSON.stringify(unsignedManifest);\n            _cachedSignedManifest.signedManifest = manifestString;\n          } else {\n            let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n            let signedManifest = await Api.callMethodAsync(\n              'signManifest',\n              [publishInfo.args],\n              'post',\n              manifest\n            );\n            _cachedSignedManifest.manifestString = manifestString;\n            _cachedSignedManifest.signedManifest = signedManifest.response;\n            manifestString = signedManifest.response;\n          }\n        }\n      }\n      const hostInfo = {\n        host: hostUUID,\n        server: 'xdl',\n        serverVersion: require('../package.json').version,\n        serverDriver: Config.developerTool,\n        serverOS: os.platform(),\n        serverOSVersion: os.release(),\n      };\n      res.append('Exponent-Server', JSON.stringify(hostInfo));\n      res.send(manifestString);\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n      });\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error in manifestHandler: ${e} ${e.stack}`);\n      // 5xx = Server Error HTTP code\n      res.status(520).send({\n        error: e.toString(),\n      });\n    }\n  };\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n  let expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    let host = server.address().address;\n    let port = server.address().port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\nexport async function stopExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await request.post(`http://localhost:${packagerInfo.expoServerPort}/shutdown`);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: mixed,\n  hostnameAsync: Function,\n  ngrokPid: ?number,\n  attempts: number = 0\n) {\n  try {\n    let configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    let hostname = await hostnameAsync();\n    let url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError(ErrorCode.NGROK_ERROR, e.toString());\n      } else {\n        throw new XDLError(ErrorCode.NGROK_ERROR, JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string) {\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGER_PORT,\n      `No packager found for project at ${projectRoot}.`\n    );\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      ErrorCode.NO_EXPO_SERVER_PORT,\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  let packageShortName = path.parse(projectRoot).base;\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      let expoServerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      let packagerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', status => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\nexport async function stopTunnelsAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number,\n  }\n) {\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  let schema = joi.object().keys({\n    packagerPort: joi.number().integer(),\n  });\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, error.toString());\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\nexport async function getUrlAsync(projectRoot: string, options: Object = {}) {\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n): Promise<any> {\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n  await startExpoServerAsync(projectRoot);\n  await startReactNativeServerAsync(projectRoot, options, verbose);\n  if (!Config.offline) {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  DevSession.startSession(projectRoot, exp);\n  return exp;\n}\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n  await stopExpoServerAsync(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n}\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise((resolve, reject) => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n    });\n  }\n}\n"],"sourceRoot":"/xdl@51.6.4/src"}