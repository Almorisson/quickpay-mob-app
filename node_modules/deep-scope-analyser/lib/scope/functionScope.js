"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const estraverse_1 = require("estraverse");
const scope_1 = require("./scope");
const assert = require("assert");
class FunctionScope extends scope_1.Scope {
    constructor(scopeManager, upperScope, block, isMethodDefinition) {
        super(scopeManager, "function", upperScope, block, isMethodDefinition);
        if (this.block.type !== estraverse_1.Syntax.ArrowFunctionExpression) {
            this.__defineArguments();
        }
    }
    isArgumentsMaterialized() {
        if (this.block.type === estraverse_1.Syntax.ArrowFunctionExpression) {
            return false;
        }
        if (!this.isStatic()) {
            return true;
        }
        const variable = this.set.get("arguments");
        assert(typeof variable !== "undefined", "Always have arguments variable.");
        return (variable.tainted || variable.references.length !== 0);
    }
    isThisMaterialized() {
        if (!this.isStatic()) {
            return true;
        }
        return this.thisFound;
    }
    __defineArguments() {
        this.__defineGeneric("arguments", this.set, this.variables, null);
        this.taints.set("arguments", true);
    }
    __isValidResolution(ref, variable) {
        if (this.block.type === "Program") {
            return true;
        }
        const bodyStart = this.block.body.range[0];
        return !(variable.scope === this &&
            ref.identifier.range[0] < bodyStart &&
            variable.defs.every(d => d.name.range[0] >= bodyStart));
    }
}
exports.FunctionScope = FunctionScope;
//# sourceMappingURL=functionScope.js.map