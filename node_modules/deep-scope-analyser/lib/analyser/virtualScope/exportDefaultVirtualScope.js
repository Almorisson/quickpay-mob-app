"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
class ExportDefaultVirtualScope {
    constructor(id, contentType, declaration, isChildrenDependent = true) {
        this.id = id;
        this.contentType = contentType;
        this.declaration = declaration;
        this.isChildrenDependent = isChildrenDependent;
        this.children = [];
    }
    get type() {
        return _1.VirtualScopeType.Default;
    }
    findAllReferencesToVirtualScope(visitedSet, scopeManager, virtualScopeMap) {
        const moduleScope = this.getModuleScope(scopeManager);
        if (this.contentType === _1.VScopeContentType.Reference) {
            const id = this.declaration;
            const idName = id.name;
            const variable = moduleScope.set.get(idName);
            const vs = virtualScopeMap.get(variable);
            this.children.push(vs);
        }
        else {
            const scopes = scopeManager.__nodeToScope.get(this.declaration);
            this.traverseScopes(scopes, moduleScope, visitedSet, virtualScopeMap);
        }
    }
    getModuleScope(scopeManager) {
        return scopeManager.scopes[1];
    }
    traverseScopes(scopes, moduleScope, visitedSet, virtualScopeMap) {
        scopes.forEach(scope => {
            visitedSet.add(scope);
            const traverse = (scope) => {
                scope.references.forEach(ref => {
                    if (ref.resolved &&
                        ref.resolved.scope.type === "module") {
                        const idName = ref.identifier.name;
                        this.addToVs(idName, moduleScope, virtualScopeMap);
                    }
                });
                scope.childScopes.forEach(traverse);
            };
            traverse(scope);
        });
    }
    addToVs(idName, moduleScope, virtualScopeMap) {
        const refVar = moduleScope.set.get(idName);
        const virtualScope = virtualScopeMap.get(refVar);
        this.children.push(virtualScope);
    }
}
exports.ExportDefaultVirtualScope = ExportDefaultVirtualScope;
//# sourceMappingURL=exportDefaultVirtualScope.js.map