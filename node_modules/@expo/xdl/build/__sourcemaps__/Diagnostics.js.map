{"version":3,"sources":["Diagnostics.js"],"names":["async","_uploadLogsAsync","info","let","user","await","UserManager","getCurrentUserAsync","username","ANONYMOUS_USERNAME","expoHome","UserSettings","dotExpoHomeDirectory","infoJsonFile","JsonFile","path","join","writeAsync","tempDir","Env","home","archivePath","Utils","ncpAsync","filter","filename","includes","settingsJsonFile","SETTINGS_FILE_NAME","settingsJson","readAsync","key","e","console","error","tar","create","file","gzip","cwd","relative","rimraf","sync","formData","FormData","append","fs","createReadStream","response","Api","callMethodAsync","url","_formatBytes","bytes","toFixed","getDeviceInfoAsync","options","any","Binaries","sourceBashLoginScriptsAsync","whichCommand","process","platform","result","spawnAsync","nodeVersion","_","trim","stdout","nodePath","npmVersion","npmPath","watchmanVersion","Watchman","unblockAndGetVersionAsync","watchmanPath","adbVersion","adbPath","env","PATH","shell","SHELL","os","homedir","nvmPath","NVM_PATH","lang","LANG","dirname","__dirname","memoryFree","freemem","memoryTotal","totalmem","ip","address","hostname","xdeProcesses","child_process","execSync","toString","numXdeProcesses","watchmanProcesses","numWatchmanProcesses","ngrokProcesses","numNgrokProcesses","isXcodeInstalled","xcrunVersion","xcodebuildVersion","launchctlLimit","uploadLogs","limitLengthForIntercom","mapValues","value","length","startsWith","substring"],"mappings":"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","file":"../Diagnostics.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport child_process from 'child_process';\nimport fs from 'fs-extra';\nimport JsonFile from '@expo/json-file';\nimport os from 'os';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport spawnAsync from '@expo/spawn-async';\nimport tar from 'tar';\n\nimport ip from './ip';\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport * as Env from './Env';\nimport FormData from './tools/FormData';\nimport UserManager, { ANONYMOUS_USERNAME } from './User';\nimport UserSettings from './UserSettings';\nimport * as Utils from './Utils';\nimport * as Watchman from './Watchman';\n\nasync function _uploadLogsAsync(info: any): Promise<boolean | string> {\n  let user = await UserManager.getCurrentUserAsync();\n  let username = user ? user.username : ANONYMOUS_USERNAME;\n\n  // write info to file\n  let expoHome = UserSettings.dotExpoHomeDirectory();\n  let infoJsonFile = new JsonFile(path.join(expoHome, 'debug-info.json'));\n  await infoJsonFile.writeAsync(info);\n\n  // copy files to tempDir\n  let tempDir = path.join(Env.home(), `${username}-diagnostics`);\n  let archivePath = path.join(expoHome, 'diagnostics.tar.gz');\n  await Utils.ncpAsync(expoHome, tempDir, {\n    filter: filename => {\n      if (\n        filename.includes('diagnostics') ||\n        filename.includes('starter-app-cache') ||\n        filename.includes('android-apk-cache') ||\n        filename.includes('ios-simulator-app-cache') ||\n        filename.includes('state.json~')\n      ) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n  });\n\n  // remove access token\n  try {\n    let settingsJsonFile = new JsonFile(path.join(tempDir, UserSettings.SETTINGS_FILE_NAME));\n    let settingsJson = await settingsJsonFile.readAsync();\n    for (let key of ['accessToken', 'auth', 'uuid', 'sendTo']) {\n      if (settingsJson[key]) {\n        settingsJson[key] = 'redacted';\n      }\n    }\n    await settingsJsonFile.writeAsync(settingsJson);\n  } catch (e) {\n    console.error(e);\n  }\n\n  // compress\n  await tar.create({ file: archivePath, gzip: true, cwd: Env.home() }, [\n    path.relative(Env.home(), tempDir),\n  ]);\n  rimraf.sync(tempDir);\n\n  // upload\n  let formData = new FormData();\n  formData.append('archive', fs.createReadStream(archivePath));\n\n  let response = await Api.callMethodAsync('uploadDiagnostics', [{}], 'put', null, { formData });\n  return response.url;\n}\n\n/* eslint-disable prefer-template */\n// From http://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript\nfunction _formatBytes(bytes: number): string {\n  if (bytes >= 1000000000) {\n    return (bytes / 1000000000).toFixed(2) + ' GB';\n  } else if (bytes >= 1000000) {\n    return (bytes / 1000000).toFixed(2) + ' MB';\n  } else if (bytes >= 1000) {\n    return (bytes / 1000).toFixed(2) + ' KB';\n  } else if (bytes > 1) {\n    return bytes + ' bytes';\n  } else if (bytes === 1) {\n    return bytes + '${bytes} byte';\n  } else {\n    return '0 bytes';\n  }\n}\n/* eslint-enable prefer-template */\n\nexport async function getDeviceInfoAsync(options: any = {}): Promise<any> {\n  let info = {};\n\n  await Binaries.sourceBashLoginScriptsAsync();\n  let whichCommand = process.platform === 'win32' ? 'where' : 'which';\n\n  try {\n    let result = await spawnAsync('node', ['--version']);\n    info.nodeVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['node']);\n    info.nodePath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync('npm', ['--version']);\n    info.npmVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['npm']);\n    info.npmPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    info.watchmanVersion = await Watchman.unblockAndGetVersionAsync();\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['watchman']);\n    info.watchmanPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync('adb', ['version']);\n    info.adbVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['adb']);\n    info.adbPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  info.path = process.env.PATH;\n  info.shell = process.env.SHELL;\n  info.home = os.homedir();\n  info.nvmPath = process.env.NVM_PATH;\n  info.lang = process.env.LANG;\n  info.dirname = __dirname;\n  info.memoryFree = _formatBytes(os.freemem());\n  info.memoryTotal = _formatBytes(os.totalmem());\n  info.ip = ip.address();\n  info.hostname = os.hostname();\n\n  // TODO: fix these commands on linux\n  if (process.platform === 'darwin') {\n    // || process.platform === 'linux') {\n    try {\n      info.xdeProcesses = _.trim(child_process.execSync('pgrep XDE | xargs ps -p').toString());\n    } catch (e) {}\n\n    try {\n      info.numXdeProcesses = _.trim(child_process.execSync('pgrep XDE | wc -l').toString());\n    } catch (e) {}\n\n    try {\n      info.watchmanProcesses = _.trim(\n        child_process.execSync('pgrep watchman | xargs ps -p').toString()\n      );\n    } catch (e) {}\n\n    try {\n      info.numWatchmanProcesses = _.trim(\n        child_process.execSync('pgrep watchman | wc -l').toString()\n      );\n    } catch (e) {}\n\n    try {\n      info.ngrokProcesses = _.trim(child_process.execSync('pgrep ngrok | xargs ps -p').toString());\n    } catch (e) {}\n\n    try {\n      info.numNgrokProcesses = _.trim(child_process.execSync('pgrep ngrok | wc -l').toString());\n    } catch (e) {}\n  }\n\n  if (process.platform === 'darwin') {\n    // `xcrun` and `xcodebuild` will pop up a dialog if Xcode isn't installed\n    if (Binaries.isXcodeInstalled()) {\n      try {\n        let result = await spawnAsync('xcrun', ['--version']);\n        info.xcrunVersion = _.trim(result.stdout);\n      } catch (e) {}\n\n      try {\n        let result = await spawnAsync('xcodebuild', ['-version']);\n        info.xcodebuildVersion = _.trim(result.stdout);\n      } catch (e) {}\n    }\n\n    try {\n      let result = await spawnAsync('launchctl', ['limit']);\n      info.launchctlLimit = _.trim(result.stdout);\n    } catch (e) {}\n  }\n\n  // TODO: can probably get rid of these options if we remove Intercom\n  if (options.uploadLogs) {\n    info.url = await _uploadLogsAsync(info);\n  }\n\n  if (options.limitLengthForIntercom) {\n    info = _.mapValues(info, value => {\n      if (value && value.length > 100 && !value.startsWith('http')) {\n        return value.substring(0, 100);\n      } else {\n        return value;\n      }\n    });\n  }\n\n  return info;\n}\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}