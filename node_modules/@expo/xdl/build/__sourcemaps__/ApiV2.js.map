{"version":3,"sources":["ApiV2.js"],"names":["_rootBaseUrl","Config","api","scheme","host","_apiBaseUrl","let","rootBaseUrl","port","ApiV2Error","ExtendableError","constructor","message","code","string","_isApiError","ApiV2Client","static","clientForUser","user","sessionSecret","options","APIV2ClientOptions","async","getAsync","methodName","args","QueryParameters","extraOptions","Object","returnEntireResponse","boolean","_requestAsync","httpMethod","queryParameters","json","postAsync","data","body","putAsync","deleteAsync","extraRequestOptions","url","reqOptions","method","headers","params","paramsSerializer","QueryString","stringify","_","merge","response","result","await","axios","request","e","maybeErrorData","idx","errors","length","responseError","error","serverStack","stack","details"],"mappings":"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","file":"../ApiV2.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport ExtendableError from 'es6-error';\nimport QueryString from 'querystring';\nimport axios from 'axios';\nimport idx from 'idx';\n\nimport Config from './Config';\n\n// These aren't constants because some commands switch between staging and prod\nfunction _rootBaseUrl() {\n  return `${Config.api.scheme}://${Config.api.host}`;\n}\n\nfunction _apiBaseUrl() {\n  let rootBaseUrl = _rootBaseUrl();\n  if (Config.api.port) {\n    rootBaseUrl += ':' + Config.api.port;\n  }\n  return rootBaseUrl + '/--/api/v2';\n}\n\nexport class ApiV2Error extends ExtendableError {\n  code: string;\n  details: Object;\n  serverStack: ?string;\n\n  constructor(message: string, code: string = 'UNKNOWN') {\n    super(message);\n    this.code = code;\n    this._isApiError = true;\n  }\n}\n\ntype RequestOptions = {\n  httpMethod: 'get' | 'post' | 'put',\n  queryParameters?: ?QueryParameters,\n  body?: ?Object,\n  json?: boolean,\n};\n\ntype QueryParameters = { [key: string]: ?(string | number | boolean) };\n\ntype APIV2ClientOptions = {\n  sessionSecret?: string,\n};\n\nexport default class ApiV2Client {\n  sessionSecret: ?string = null;\n\n  static clientForUser(user): ApiV2Client {\n    if (user && user.sessionSecret) {\n      return new ApiV2Client({ sessionSecret: user.sessionSecret });\n    }\n\n    return new ApiV2Client();\n  }\n\n  constructor(options: APIV2ClientOptions = {}) {\n    if (options.sessionSecret) {\n      this.sessionSecret = options.sessionSecret;\n    }\n  }\n\n  async getAsync(\n    methodName: string,\n    args: QueryParameters = {},\n    extraOptions: Object = {},\n    returnEntireResponse: boolean = false\n  ): Promise<*> {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'get',\n        queryParameters: args,\n        json: true,\n      },\n      extraOptions,\n      returnEntireResponse\n    );\n  }\n\n  async postAsync(\n    methodName: string,\n    data: Object = {},\n    extraOptions: Object = {},\n    returnEntireResponse: boolean = false\n  ): Promise<*> {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'post',\n        body: data,\n      },\n      extraOptions,\n      returnEntireResponse\n    );\n  }\n\n  async putAsync(\n    methodName: string,\n    data: Object = {},\n    extraOptions: Object = {},\n    returnEntireResponse: boolean = false\n  ): Promise<*> {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'put',\n        body: data,\n      },\n      extraOptions,\n      returnEntireResponse\n    );\n  }\n\n  async deleteAsync(\n    methodName: string,\n    data: Object = {},\n    extraOptions: Object = {},\n    returnEntireResponse: boolean = false\n  ): Promise<*> {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'delete',\n        body: data,\n      },\n      extraOptions,\n      returnEntireResponse\n    );\n  }\n\n  async _requestAsync(\n    methodName: string,\n    options: RequestOptions,\n    extraRequestOptions: Object,\n    returnEntireResponse: boolean = false\n  ): Promise<*> {\n    const url = `${_apiBaseUrl()}/${methodName}`;\n    let reqOptions: Object = {\n      url,\n      method: options.httpMethod,\n      headers: {\n        'Exponent-Client': 'xdl',\n      },\n      json: typeof options.json !== 'undefined' ? options.json : false,\n    };\n\n    if (this.sessionSecret) {\n      reqOptions.headers['Expo-Session'] = this.sessionSecret;\n    }\n\n    // Handle qs\n    if (options.queryParameters) {\n      reqOptions.params = options.queryParameters;\n      reqOptions.paramsSerializer = QueryString.stringify;\n    }\n\n    // Handle body\n    if (options.body) {\n      reqOptions.data = options.body;\n    }\n\n    reqOptions = _.merge({}, reqOptions, extraRequestOptions);\n    let response;\n    let result;\n    try {\n      response = await axios.request(reqOptions);\n      result = response.data;\n    } catch (e) {\n      const maybeErrorData = idx(e, _ => _.response.data.errors.length);\n      if (maybeErrorData) {\n        result = e.response.data;\n      } else {\n        throw e;\n      }\n    }\n\n    if (result.errors && result.errors.length) {\n      let responseError = result.errors[0];\n      let error = new ApiV2Error(responseError.message, responseError.code);\n      error.serverStack = responseError.stack;\n      error.details = responseError.details;\n      throw error;\n    }\n\n    return returnEntireResponse ? response : result.data;\n  }\n}\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}