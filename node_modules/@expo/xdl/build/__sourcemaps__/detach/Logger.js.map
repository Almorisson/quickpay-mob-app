{"version":3,"sources":["detach/Logger.js"],"names":["PRINT_JSON_LOGS","process","env","JSON_LOGS","LOGGER_NAME","LEVELS","logger","init","levels","loggerObj","bunyan","createLogger","name","console","configured","selfConfigured","extraFields","forEach","level","args","logLine","configure","withFields","Object","assign","argsToLog","extraFieldsFromArgsExist","_","isPlainObject","first","extraFieldsFromArgs","shift","isEmpty","unshift","pipeOutputToLogger","stdout","stderr","stdoutOnly","dontShowStdout","stdoutExtraFields","on","line","logMultiline","source","data","lines","String","split","shouldntLogMessage","info"],"mappings":"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","file":"../../detach/Logger.js","sourcesContent":["import bunyan from '@expo/bunyan';\nimport _ from 'lodash';\n\nconst PRINT_JSON_LOGS = process.env.JSON_LOGS === '1';\nconst LOGGER_NAME = 'xdl-detach';\nconst LEVELS = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n\nconst logger = {\n  init(levels) {\n    this.loggerObj = PRINT_JSON_LOGS ? bunyan.createLogger({ name: LOGGER_NAME }) : console;\n    this.configured = PRINT_JSON_LOGS;\n    this.selfConfigured = this.configured && true;\n    this.extraFields = {};\n    levels.forEach(level => {\n      this[level] = function(...args) {\n        this.logLine(level, ...args);\n      };\n    });\n  },\n  configure(loggerObj) {\n    this.loggerObj = loggerObj;\n    this.configured = true;\n    this.selfConfigured = false;\n  },\n  withFields(extraFields) {\n    return Object.assign({}, this, { extraFields: { ...this.extraFields, ...extraFields } });\n  },\n  logLine(level, ...args) {\n    const argsToLog = [...args];\n    const extraFieldsFromArgsExist = _.isPlainObject(_.first(args));\n    const extraFieldsFromArgs = extraFieldsFromArgsExist ? args[0] : {};\n    if (extraFieldsFromArgsExist) {\n      argsToLog.shift();\n    }\n    const extraFields = { ...extraFieldsFromArgs, ...this.extraFields };\n    if (!_.isEmpty(extraFields)) {\n      argsToLog.unshift(extraFields);\n    }\n    this.loggerObj[level](...argsToLog);\n  },\n};\n\nlogger.init(LEVELS);\n\nexport default logger;\n\nexport function pipeOutputToLogger(\n  { stdout, stderr } = {},\n  extraFields = {},\n  { stdoutOnly = false, dontShowStdout = false } = {}\n) {\n  if (stdout) {\n    const stdoutExtraFields = { ...extraFields };\n    if (dontShowStdout) {\n      stdoutExtraFields.dontShowStdout = true;\n    }\n    stdout.on('data', line => logMultiline(line, { ...stdoutExtraFields, source: 'stdout' }));\n  }\n  if (stderr) {\n    const source = stdoutOnly ? 'stdout' : 'stderr';\n    stderr.on('data', line => logMultiline(line, { ...extraFields, source }));\n  }\n}\n\nfunction logMultiline(data, extraFields) {\n  if (!data) {\n    return;\n  }\n  const lines = String(data).split('\\n');\n  lines.forEach(line => {\n    if (line) {\n      const args = [line];\n      if (logger.configured) {\n        args.unshift(extraFields);\n      }\n      const shouldntLogMessage =\n        extraFields.source === 'stdout' &&\n        extraFields.dontShowStdout &&\n        logger.configured &&\n        !logger.selfConfigured;\n      if (!shouldntLogMessage) {\n        logger.info(...args);\n      }\n    }\n  });\n}\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}