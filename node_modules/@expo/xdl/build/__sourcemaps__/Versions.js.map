{"version":3,"sources":["Versions.js"],"names":["async","versionsAsync","api","ApiV2Client","versionCache","Cacher","getAsync","path","join","__dirname","await","sdkVersionsAsync","sdkVersions","turtleSdkVersionsAsync","turtleSdkVersions","setVersionsAsync","value","user","UserManager","getCurrentUserAsync","clientForUser","postAsync","secret","process","env","EXPO_VERSIONS_SECRET","gteSdkVersion","expJson","sdkVersion","semver","gte","e","XDLError","lteSdkVersion","lte","parseSdkVersionFromTag","tag","startsWith","substring","newestSdkVersionAsync","let","result","highestMajorVersion","_","forEach","key","major","version","oldestSupportedMajorVersionAsync","supportedVersions","pickBy","v","isDeprecated","versionNumbers","push","Math","min","facebookReactNativeVersionsAsync","facebookReactNativeVersions","Set","facebookReactNativeVersion","add","Array","from","facebookReactNativeVersionToExpoVersionAsync","valid","currentSdkVersion","minor","gt","canTurtleBuildSdkVersion","platform","expoSdkVersion","undefined","turtleSdkVersion"],"mappings":"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","file":"../Versions.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport path from 'path';\nimport semver from 'semver';\n\nimport ApiV2Client from './ApiV2';\nimport { Cacher } from './tools/FsCache';\nimport XDLError from './XDLError';\nimport UserManager from './User';\n\nexport async function versionsAsync() {\n  const api = new ApiV2Client();\n  const versionCache = new Cacher(\n    () => api.getAsync('versions/latest'),\n    'versions.json',\n    0,\n    path.join(__dirname, '../caches/versions.json')\n  );\n  return await versionCache.getAsync();\n}\n\nexport async function sdkVersionsAsync() {\n  const { sdkVersions } = await versionsAsync();\n  return sdkVersions;\n}\n\nexport async function turtleSdkVersionsAsync() {\n  const { turtleSdkVersions } = await versionsAsync();\n  return turtleSdkVersions;\n}\n\nexport async function setVersionsAsync(value: any) {\n  const user = await UserManager.getCurrentUserAsync();\n  const api = ApiV2Client.clientForUser(user);\n  return await api.postAsync('versions/update', {\n    value,\n    secret: process.env.EXPO_VERSIONS_SECRET,\n  });\n}\n\nexport function gteSdkVersion(expJson: any, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function lteSdkVersion(expJson: any, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function parseSdkVersionFromTag(tag: string) {\n  if (tag.startsWith('sdk-')) {\n    return tag.substring(4);\n  }\n\n  return tag;\n}\n\nexport async function newestSdkVersionAsync() {\n  let sdkVersions = await sdkVersionsAsync();\n  let result = {};\n  let highestMajorVersion = '0.0.0';\n  _.forEach(sdkVersions, (value, key) => {\n    if (semver.major(key) > semver.major(highestMajorVersion)) {\n      highestMajorVersion = key;\n      result = value;\n    }\n  });\n  result.version = highestMajorVersion;\n  return result;\n}\n\nexport async function oldestSupportedMajorVersionAsync() {\n  const sdkVersions = await sdkVersionsAsync();\n  const supportedVersions = _.pickBy(sdkVersions, v => !v.isDeprecated);\n  let versionNumbers = [];\n  _.forEach(supportedVersions, (value, key) => {\n    versionNumbers.push(semver.major(key));\n  });\n  return Math.min(...versionNumbers);\n}\n\nexport async function facebookReactNativeVersionsAsync(): Promise<Array<string>> {\n  let sdkVersions = await sdkVersionsAsync();\n  let facebookReactNativeVersions = new Set();\n\n  _.forEach(sdkVersions, value => {\n    if (value.facebookReactNativeVersion) {\n      facebookReactNativeVersions.add(value.facebookReactNativeVersion);\n    }\n  });\n\n  return Array.from(facebookReactNativeVersions);\n}\n\nexport async function facebookReactNativeVersionToExpoVersionAsync(\n  facebookReactNativeVersion: string\n): Promise<?string> {\n  if (!semver.valid(facebookReactNativeVersion)) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${facebookReactNativeVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n\n  let sdkVersions = await sdkVersionsAsync();\n  let currentSdkVersion = null;\n\n  _.forEach(sdkVersions, (value, key) => {\n    if (\n      semver.major(value.facebookReactNativeVersion) === semver.major(facebookReactNativeVersion) &&\n      semver.minor(value.facebookReactNativeVersion) === semver.minor(facebookReactNativeVersion) &&\n      (!currentSdkVersion || semver.gt(key, currentSdkVersion))\n    ) {\n      currentSdkVersion = key;\n    }\n  });\n\n  return currentSdkVersion;\n}\n\nexport async function canTurtleBuildSdkVersion(sdkVersion, platform) {\n  if (sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  if (semver.valid(sdkVersion) == null) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `\"${sdkVersion}\" is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n\n  const turtleSdkVersions = await turtleSdkVersionsAsync();\n  const expoSdkVersion = (await sdkVersionsAsync())[sdkVersion];\n\n  if (expoSdkVersion === undefined) {\n    throw new XDLError('INVALID_VERSION', `\"${sdkVersion}\" is not a valid Expo SDK version.`);\n  } else if (expoSdkVersion.isDeprecated) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `\"${sdkVersion}\" is deprecated. Please update Expo SDK version.`\n    );\n  }\n  if (!turtleSdkVersions || !turtleSdkVersions[platform]) {\n    return true;\n  }\n\n  const turtleSdkVersion = turtleSdkVersions[platform];\n  return semver.gte(turtleSdkVersion, sdkVersion);\n}\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}