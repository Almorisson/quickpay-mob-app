{"version":3,"sources":["Binaries.js"],"names":["let","hasSourcedBashLoginScripts","OSX_SOURCE_PATH","path","join","__dirname","ERROR_MESSAGE","_hasbinAsync","name","Promise","resolve","reject","hasbin","result","getBinariesPath","process","platform","XDLError","async","addToPathAsync","await","sourceBashLoginScriptsAsync","ignoreBundledBinaries","UserSettings","getAsync","includes","binariesPath","_prependToPath","_expoRCFileExists","fs","statSync","dotExpoHomeDirectory","isFile","e","newPath","currentPath","env","PATH","length","delimiter","Config","developerTool","userSettingsPATH","spawnAsync","stderr","Logger","global","warn","stdout","shellName","SHELL","Error","test","regexResult","match","writePathToUserSettingsAsync","setAsync","pathFile","writeFile","_isDirectory","dir","isDirectory","isXcodeInstalled"],"mappings":"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","file":"../Binaries.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport hasbin from 'hasbin';\nimport spawnAsync from '@expo/spawn-async';\nimport path from 'path';\n\nimport Config from './Config';\nimport Logger from './Logger';\nimport UserSettings from './UserSettings';\nimport XDLError from './XDLError';\n\nlet hasSourcedBashLoginScripts = false;\n\nexport const OSX_SOURCE_PATH = path.join(__dirname, '..', 'binaries', 'osx');\nconst ERROR_MESSAGE = '\\nPlease run `npm install -g exp && exp path`';\n\nfunction _hasbinAsync(name) {\n  return new Promise((resolve, reject) => {\n    hasbin(name, result => {\n      resolve(result);\n    });\n  });\n}\n\nexport function getBinariesPath(): string {\n  if (process.platform === 'darwin') {\n    return path.join(__dirname, '..', 'binaries', 'osx');\n  } else if (process.platform === 'win32') {\n    return path.join(__dirname, '..', 'binaries', 'windows');\n  } else if (process.platform === 'linux') {\n    return path.join(__dirname, '..', 'binaries', 'linux');\n  } else {\n    throw new XDLError('PLATFORM_NOT_SUPPORTED', 'Platform not supported.');\n  }\n}\n\nexport async function addToPathAsync(name: string) {\n  await sourceBashLoginScriptsAsync();\n\n  if (await _hasbinAsync(name)) {\n    return;\n  }\n\n  // Users can set {ignoreBundledBinaries: [\"watchman\"]} to tell us to never use our version\n  let ignoreBundledBinaries = await UserSettings.getAsync('ignoreBundledBinaries', []);\n  if (ignoreBundledBinaries.includes(name)) {\n    return;\n  }\n\n  let binariesPath = path.join(getBinariesPath(), name);\n  _prependToPath(binariesPath);\n}\n\nfunction _expoRCFileExists() {\n  try {\n    return fs.statSync(path.join(UserSettings.dotExpoHomeDirectory(), 'bashrc')).isFile();\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _prependToPath(newPath) {\n  let currentPath = process.env.PATH ? process.env.PATH : '';\n  if (currentPath.length > 0) {\n    let delimiter = process.platform === 'win32' ? ';' : ':';\n    currentPath = `${delimiter}${currentPath}`;\n  }\n\n  process.env.PATH = `${newPath}${currentPath}`;\n}\n\nexport async function sourceBashLoginScriptsAsync() {\n  if (hasSourcedBashLoginScripts || process.platform === 'win32') {\n    return;\n  }\n\n  if (Config.developerTool !== 'xde') {\n    return;\n  }\n\n  hasSourcedBashLoginScripts = true;\n\n  let userSettingsPATH = await UserSettings.getAsync('PATH', null);\n\n  if (userSettingsPATH) {\n    _prependToPath(userSettingsPATH);\n  } else if (_expoRCFileExists()) {\n    try {\n      // User has a ~/.expo/bashrc. Run that and grab PATH.\n      let result = await spawnAsync(path.join(getBinariesPath(), `get-path-bash`), {\n        env: {\n          PATH: '',\n        },\n      });\n\n      if (result.stderr) {\n        Logger.global.warn(`Error sourcing ~/.expo/bashrc script: ${result.stderr}`);\n      }\n\n      if (result.stdout) {\n        _prependToPath(result.stdout);\n      }\n    } catch (e) {\n      Logger.global.warn(`Error sourcing ~/.expo/bashrc script: ${e.stderr}`);\n    }\n  } else {\n    try {\n      // No ~/.expo/bashrc file found. Run `env` in process.env.SHELL.\n      const shellName = process.env.SHELL;\n      if (!shellName) {\n        throw new Error('This command requires being run within a shell.');\n      }\n\n      let result;\n      if (/t?csh$/.test(shellName)) {\n        // csh\n        result = await spawnAsync(shellName, ['-d', '-c', 'env']);\n      } else if (/zsh$/.test(shellName)) {\n        // zsh\n        result = await spawnAsync(shellName, ['-l', '-c', 'env']);\n      } else {\n        // bash, fish\n        result = await spawnAsync(shellName, ['-l', '-c', 'env']);\n      }\n\n      if (result.stderr) {\n        Logger.global.warn(\n          `Error sourcing shell startup scripts: ${result.stderr}.${ERROR_MESSAGE}`\n        );\n      }\n\n      if (result.stdout) {\n        let regexResult = result.stdout.match(/(^|\\n)PATH=(.+)/);\n\n        if (regexResult.length >= 3) {\n          _prependToPath(regexResult[2]);\n        } else {\n          Logger.global.warn(\n            `Error parsing shell startup scripts output: ${result.stderr}.${ERROR_MESSAGE}`\n          );\n        }\n      }\n    } catch (e) {\n      Logger.global.warn(`Error sourcing shell startup scripts: ${e.stderr}.${ERROR_MESSAGE}`);\n    }\n  }\n}\n\nexport async function writePathToUserSettingsAsync() {\n  await UserSettings.setAsync('PATH', process.env.PATH);\n\n  // Used in detach app\n  let pathFile = path.join(UserSettings.dotExpoHomeDirectory(), 'PATH');\n  await fs.writeFile(pathFile, process.env.PATH);\n}\n\nfunction _isDirectory(dir) {\n  try {\n    if (fs.statSync(dir).isDirectory()) {\n      return true;\n    }\n\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function isXcodeInstalled() {\n  return _isDirectory('/Applications/Xcode.app/');\n}\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}