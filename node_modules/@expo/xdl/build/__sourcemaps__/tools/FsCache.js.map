{"version":3,"sources":["tools/FsCache.js"],"names":["Cacher","constructor","refresher","filename","ttlMilliseconds","bootstrapFile","path","join","getCacheDir","async","getAsync","let","mtime","stats","await","fs","stat","e","mkdirp","bootstrapContents","readFile","toString","writeFile","Date","fromCache","failedRefresh","JSON","stringify","writeError","parse","readError","Error","clearAsync","unlink","homeDir","os","homedir","process","env","XDG_CACHE_HOME","platform"],"mappings":"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","file":"../../tools/FsCache.js","sourcesContent":["// @flow\n\nimport fs from 'fs-extra';\nimport os from 'os';\nimport path from 'path';\n\n/*\nA Cacher is used to wrap a fallible or expensive function and to memoize its results on disk\nin case it either fails or we don't need fresh results very often. It stores objects in JSON, and\nparses JSON from disk when returning an object.\n\nIt's constructed with a \"refresher\" callback which will be called for the results, a filename to use\nfor the cache, and an optional TTL and boostrap file. The TTL (in milliseconds) can be used to speed\nup slow calls from the cache (for example checking npm published versions can be very slow). The\nbootstrap file can be used to \"seed\" the cache with a particular value stored in a file.\n\nIf there is a problem calling the refresher function or in performing the cache's disk I/O, errors\nwill be stored in variables on the class. The only times Cacher will throw an exception are if it's\nnot possible to create the cache directory (usually weird home directory permissions), or if getAsync()\nis called but no value can be provided. The latter will only occur if the refresher fails, no cache\nis available on disk (i.e. this is the first call or it has been recently cleared), and bootstrapping\nwas not available (either a bootstrap file wasn't provided or reading/writing failed).\n\nSee src/__tests__/tools/FsCache-test.js for usage examples.\n*/\nclass Cacher<T> {\n  refresher: () => Promise<T>;\n  filename: string;\n  bootstrapFile: ?string;\n  ttlMilliseconds: number;\n\n  readError: ?any;\n  writeError: ?any;\n\n  constructor(\n    refresher: () => Promise<T>,\n    filename: string,\n    ttlMilliseconds: ?number,\n    bootstrapFile: ?string\n  ) {\n    this.refresher = refresher;\n    this.filename = path.join(getCacheDir(), filename);\n    this.ttlMilliseconds = ttlMilliseconds || 0;\n    this.bootstrapFile = bootstrapFile;\n  }\n\n  async getAsync(): Promise<T> {\n    let mtime: Date;\n    try {\n      const stats = await fs.stat(this.filename);\n      mtime = stats.mtime;\n    } catch (e) {\n      try {\n        await fs.mkdirp(getCacheDir());\n\n        if (this.bootstrapFile) {\n          const bootstrapContents = (await fs.readFile(this.bootstrapFile)).toString();\n\n          await fs.writeFile(this.filename, bootstrapContents, 'utf8');\n        }\n      } catch (e) {\n        // intentional no-op\n      }\n      mtime = new Date(1989, 10, 19);\n    }\n\n    let fromCache: ?T;\n    let failedRefresh = null;\n\n    // if mtime + ttl >= now, attempt to fetch the value, otherwise read from disk\n    if (new Date() - mtime > this.ttlMilliseconds) {\n      try {\n        fromCache = await this.refresher();\n\n        try {\n          await fs.writeFile(this.filename, JSON.stringify(fromCache), 'utf8');\n        } catch (e) {\n          this.writeError = e;\n          // do nothing, if the refresh succeeded it'll be returned, if the persist failed we don't care\n        }\n      } catch (e) {\n        failedRefresh = e;\n      }\n    }\n\n    if (!fromCache) {\n      try {\n        fromCache = JSON.parse(await fs.readFile(this.filename));\n      } catch (e) {\n        this.readError = e;\n        // if this fails then we've exhausted our options and it should remain null\n      }\n    }\n\n    if (fromCache) {\n      return fromCache;\n    } else {\n      if (failedRefresh) {\n        throw new Error(`Unable to perform cache refresh for ${this.filename}: ${failedRefresh}`);\n      } else {\n        throw new Error(`Unable to read ${this.filename}. ${this.readError || ''}`);\n      }\n    }\n  }\n\n  async clearAsync(): Promise<void> {\n    try {\n      await fs.unlink(this.filename);\n    } catch (e) {\n      this.writeError = e;\n    }\n  }\n}\n\nfunction getCacheDir(): string {\n  const homeDir = os.homedir();\n  if (process.env.XDG_CACHE_HOME) {\n    return process.env.XDG_CACHE_HOME;\n  } else if (process.platform === 'win32') {\n    return path.join(homeDir, 'AppData', 'Local', 'Expo');\n  } else if (process.platform === 'darwin') {\n    // too many mac users have broken permissions on their ~/.cache directory\n    return path.join(homeDir, '.expo', 'cache');\n  } else {\n    return path.join(homeDir, '.cache', 'expo');\n  }\n}\n\nexport { Cacher, getCacheDir };\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}