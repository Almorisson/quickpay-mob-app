{"version":3,"sources":["tools/ImageUtils.js"],"names":["async","getImageDimensionsAsync","projectDirname","basename","await","_getImageDimensionsAsync","_","_getImageDimensionsWithImageProbeAsync","imagePath","path","resolve","readStream","fs","createReadStream","width","height","probeImageSize","destroy","let","_hasWarned","resizeImageAsync","iconSizePx","iconFilename","destinationIconPath","process","platform","_resizeImageAsync","_resizeImageWithSipsAsync","logger","warn","spawnAsyncThrowError","stdio","cwd","setResizeImageFunction","fn","setGetImageDimensionsFunction"],"mappings":";;;;;;;;;;AAIA;;AACA;;AACA;;AAEA;;AACA;;;;AAEA;;;;;AAKAA,eAAeC,uBAAfD,CACEE,cADFF,EAEEG,QAFFH,EAG+C;AAC7C,MAAI;AACF,WAAOI,MAAMC,wBAAwB,CAACH,cAAD,EAAiBC,QAAjB,CAArC;AACF,GAFA,CAEE,OAAOG,CAAP,EAAU,CAAC;;AACb,SAAO,IAAP;AACF;;AAEAN,eAAeO,sCAAfP,CACEE,cADFF,EAEEG,QAFFH,EAG8C;AAC5C,QAAMQ,SAAAA,GAAYC,cAAKC,OAALD,CAAaP,cAAbO,EAA6BN,QAA7BM,CAAlB;;AACA,QAAME,UAAAA,GAAaC,YAAGC,gBAAHD,CAAoBJ,SAApBI,CAAnB;;AACA,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBX,MAAMY,6BAAeL,UAAfK,CAAhC;AACAL,EAAAA,UAAU,CAACM,OAAXN;AACA,SAAO;AAAEG,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACF;;AAEAG,IAAIC,UAAAA,GAAa,KAAjBD;;AACAlB,eAAeoB,gBAAfpB,CACEqB,UADFrB,EAEEsB,YAFFtB,EAGEuB,mBAHFvB,EAIE;AACA,MACEwB,OAAO,CAACC,QAARD,KAAqB,QAArBA,IACAE,iBAAAA,KAAsBC,yBADtBH,IAEA,CAACL,UAHH,EAIE;AACAS,oBAAOC,IAAPD,CAAY,qDAAZA;;AACAT,IAAAA,UAAAA,GAAa,IAAbA;AACF;;AACA,SAAOO,iBAAiB,CAACL,UAAD,EAAaC,YAAb,EAA2BC,mBAA3B,CAAxB;AACF;;AAEAvB,eAAe2B,yBAAf3B,CACEqB,UADFrB,EAEEsB,YAFFtB,EAGEuB,mBAHFvB,EAIE;AACA,SAAO8B,yCAAqB,MAArBA,EAA6B,CAAC,IAAD,EAAOT,UAAP,EAAmBC,YAAnB,CAA7BQ,EAA+D;AACpEC,IAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CAD6D;AAC9B;AACtCC,IAAAA,GAAG,EAAET;AAF+D,GAA/DO,CAAP;AAIF,C,CAEA;;;AACAZ,IAAIQ,iBAAAA,GAAoBC,yBAAxBT;AACAA,IAAIb,wBAAAA,GAA2BE,sCAA/BW,C,CAEA;AACA;;AACA,SAASe,sBAAT,CACEC,EADF,EAEE;AACAR,EAAAA,iBAAAA,GAAoBQ,EAApBR;AACF,C,CAEA;AACA;;;AACA,SAASS,6BAAT,CACED,EADF,EAEE;AACA7B,EAAAA,wBAAAA,GAA2B6B,EAA3B7B;AACF","file":"../../tools/ImageUtils.js","sourcesContent":["/**\n * @flow\n */\n\nimport probeImageSize from 'probe-image-size';\nimport path from 'path';\nimport fs from 'fs';\n\nimport { spawnAsyncThrowError } from '../detach/ExponentTools';\nimport logger from '../detach/Logger';\n\n/**\n * @param {string} projectDirname\n * @param {string} basename\n * @returns {} { width: number, height: number } image dimensions or null\n */\nasync function getImageDimensionsAsync(\n  projectDirname: string,\n  basename: string\n): Promise<?{ width: number, height: number }> {\n  try {\n    return await _getImageDimensionsAsync(projectDirname, basename);\n  } catch (_) {}\n  return null;\n}\n\nasync function _getImageDimensionsWithImageProbeAsync(\n  projectDirname: string,\n  basename: string\n): Promise<{ width: number, height: number }> {\n  const imagePath = path.resolve(projectDirname, basename);\n  const readStream = fs.createReadStream(imagePath);\n  const { width, height } = await probeImageSize(readStream);\n  readStream.destroy();\n  return { width, height };\n}\n\nlet _hasWarned = false;\nasync function resizeImageAsync(\n  iconSizePx: number,\n  iconFilename: string,\n  destinationIconPath: string\n) {\n  if (\n    process.platform !== 'darwin' &&\n    _resizeImageAsync === _resizeImageWithSipsAsync &&\n    !_hasWarned\n  ) {\n    logger.warn('`sips` utility may or may not work outside of macOS');\n    _hasWarned = true;\n  }\n  return _resizeImageAsync(iconSizePx, iconFilename, destinationIconPath);\n}\n\nasync function _resizeImageWithSipsAsync(\n  iconSizePx: number,\n  iconFilename: string,\n  destinationIconPath: string\n) {\n  return spawnAsyncThrowError('sips', ['-Z', iconSizePx, iconFilename], {\n    stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n    cwd: destinationIconPath,\n  });\n}\n\n// Allow us to swap out the default implementations of image functions\nlet _resizeImageAsync = _resizeImageWithSipsAsync;\nlet _getImageDimensionsAsync = _getImageDimensionsWithImageProbeAsync;\n\n// Allow users to provide an alternate implementation for our image resize function.\n// This is used internally in order to use sharp instead of sips in standalone builder.\nfunction setResizeImageFunction(\n  fn: (iconSizePx: number, iconFilename: string, destinationIconPath: string) => Promise<any>\n) {\n  _resizeImageAsync = fn;\n}\n\n// Allow users to provide an alternate implementation for our image dimensions function.\n// This is used internally in order to use sharp instead of sips in standalone builder.\nfunction setGetImageDimensionsFunction(\n  fn: (dirname: string, filename: string) => Promise<?{ width: number, height: number }>\n) {\n  _getImageDimensionsAsync = fn;\n}\n\nexport {\n  resizeImageAsync,\n  setResizeImageFunction,\n  setGetImageDimensionsFunction,\n  getImageDimensionsAsync,\n};\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}