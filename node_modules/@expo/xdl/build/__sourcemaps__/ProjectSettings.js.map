{"version":3,"sources":["ProjectSettings.js"],"names":["let","projectSettingsFile","projectSettingsDefaults","hostType","lanType","dev","minify","urlRandomness","packagerInfoFile","projectSettingsJsonFile","projectRoot","filename","JsonFile","path","join","dotExpoProjectDirectory","async","readAsync","projectSettings","await","e","writeAsync","urlType","strict","_","defaults","setAsync","json","mergeAsync","cantReadFileDefault","readPackagerInfoAsync","setPackagerInfoAsync","dirPath","oldDirPath","fs","statSync","isDirectory","renameSync","mkdirpSync","dotExpoProjectDirectoryExists","getPackagerOptsAsync"],"mappings":";;;;;;;;;;;;;AAIA;;AACA;;AACA;;AACA;;;;AAEAA,IAAIC,mBAAAA,GAAsB,eAA1BD;AACAA,IAAIE,uBAAAA,GAA0B;AAC5BC,EAAAA,QAAQ,EAAE,KADkB;AAE5BC,EAAAA,OAAO,EAAE,IAFmB;AAG5BC,EAAAA,GAAG,EAAE,IAHuB;AAI5BC,EAAAA,MAAM,EAAE,KAJoB;AAK5BC,EAAAA,aAAa,EAAE;AALa,CAA9BP;AAOAA,IAAIQ,gBAAAA,GAAmB,oBAAvBR;;AAEA,SAASS,uBAAT,CAAiCC,WAAjC,EAAsDC,QAAtD,EAAwE;AACtE,SAAO,IAAIC,iBAAJ,CAAaC,cAAKC,IAALD,CAAUE,uBAAuB,CAACL,WAAD,CAAjCG,EAAgDF,QAAhDE,CAAb,CAAP;AACF;;AAEOG,eAAeC,SAAfD,CAAyBN,WAAzBM,EAA8C;AACnDhB,MAAIkB,eAAJlB;;AACA,MAAI;AACFkB,IAAAA,eAAAA,GAAkBC,MAAMV,uBAAuB,CAACC,WAAD,EAAcT,mBAAd,CAAvBQ,CAA0DQ,SAA1DR,EAAxBS;AACF,GAFA,CAEE,OAAOE,CAAP,EAAU;AACVF,IAAAA,eAAAA,GAAkBC,MAAMV,uBAAuB,CAACC,WAAD,EAAcT,mBAAd,CAAvBQ,CAA0DY,UAA1DZ,CACtBP,uBADsBO,CAAxBS;AAGF;;AAEA,MAAIA,eAAe,CAACf,QAAhBe,KAA6B,OAAjC,EAA0C;AACxC;AACAA,IAAAA,eAAe,CAACf,QAAhBe,GAA2B,QAA3BA;AACF;;AAEA,MAAIA,eAAe,CAACI,OAApB,EAA6B;AAC3B;AACA,WAAOJ,eAAe,CAACI,OAAvB;AACF;;AAEA,MAAI,YAAYJ,eAAhB,EAAiC;AAC/B;AACA,WAAOA,eAAe,CAACK,MAAvB;AACF,GAvBmD,CAyBnD;;;AACAC,kBAAEC,QAAFD,CAAWN,eAAXM,EAA4BtB,uBAA5BsB;;AACA,SAAON,eAAP;AACF;;AAEOF,eAAeU,QAAfV,CAAwBN,WAAxBM,EAA6CW,IAA7CX,EAAwD;AAC7D,MAAI;AACF,WAAOG,MAAMV,uBAAuB,CAACC,WAAD,EAAcT,mBAAd,CAAvBQ,CAA0DmB,UAA1DnB,CAAqEkB,IAArElB,EAA2E;AACtFoB,MAAAA,mBAAmB,EAAE3B;AADiE,KAA3EO,CAAb;AAGF,GAJA,CAIE,OAAOW,CAAP,EAAU;AACV,WAAOD,MAAMV,uBAAuB,CAACC,WAAD,EAAcT,mBAAd,CAAvBQ,CAA0DY,UAA1DZ,CACXe,gBAAEC,QAAFD,CAAWG,IAAXH,EAAiBtB,uBAAjBsB,CADWf,CAAb;AAGF;AACF;;AAEOO,eAAec,qBAAfd,CAAqCN,WAArCM,EAA0D;AAC/D,MAAI;AACF,WAAOG,MAAMV,uBAAuB,CAACC,WAAD,EAAcF,gBAAd,CAAvBC,CAAuDQ,SAAvDR,CAAiE;AAC5EoB,MAAAA,mBAAmB,EAAE;AADuD,KAAjEpB,CAAb;AAGF,GAJA,CAIE,OAAOW,CAAP,EAAU;AACV,WAAOD,MAAMV,uBAAuB,CAACC,WAAD,EAAcF,gBAAd,CAAvBC,CAAuDY,UAAvDZ,CAAkE,EAAlEA,CAAb;AACF;AACF;;AAEOO,eAAee,oBAAff,CAAoCN,WAApCM,EAAyDW,IAAzDX,EAAoE;AACzE,MAAI;AACF,WAAOG,MAAMV,uBAAuB,CAACC,WAAD,EAAcF,gBAAd,CAAvBC,CAAuDmB,UAAvDnB,CAAkEkB,IAAlElB,EAAwE;AACnFoB,MAAAA,mBAAmB,EAAE;AAD8D,KAAxEpB,CAAb;AAGF,GAJA,CAIE,OAAOW,CAAP,EAAU;AACV,WAAOD,MAAMV,uBAAuB,CAACC,WAAD,EAAcF,gBAAd,CAAvBC,CAAuDY,UAAvDZ,CAAkEkB,IAAlElB,CAAb;AACF;AACF;;AAEO,SAASM,uBAAT,CAAiCL,WAAjC,EAAsD;AAC3DV,MAAIgC,OAAAA,GAAUnB,cAAKC,IAALD,CAAUH,WAAVG,EAAuB,OAAvBA,CAAdb;;AACA,MAAI;AACF;AACAA,QAAIiC,UAAAA,GAAapB,cAAKC,IAALD,CAAUH,WAAVG,EAAuB,WAAvBA,CAAjBb;;AACA,QAAIkC,iBAAGC,QAAHD,CAAYD,UAAZC,EAAwBE,WAAxBF,EAAJ,EAA2C;AACzCA,uBAAGG,UAAHH,CAAcD,UAAdC,EAA0BF,OAA1BE;AACF;AACF,GANA,CAME,OAAOd,CAAP,EAAU,CACV;AACF;;AAEAc,mBAAGI,UAAHJ,CAAcF,OAAdE;;AACA,SAAOF,OAAP;AACF;;AAEO,SAASO,6BAAT,CAAuC7B,WAAvC,EAA4D;AACjEV,MAAIgC,OAAAA,GAAUnB,cAAKC,IAALD,CAAUH,WAAVG,EAAuB,OAAvBA,CAAdb;;AACA,MAAI;AACF,QAAIkC,iBAAGC,QAAHD,CAAYF,OAAZE,EAAqBE,WAArBF,EAAJ,EAAwC;AACtC,aAAO,IAAP;AACF;AACF,GAJA,CAIE,OAAOd,CAAP,EAAU,CACV;AACF;;AAEA,SAAO,KAAP;AACF;;AAEOJ,eAAewB,oBAAfxB,CAAoCN,WAApCM,EAAyD;AAC9DhB,MAAIkB,eAAAA,GAAkBC,MAAMF,SAAS,CAACP,WAAD,CAArCV;AACA,SAAOkB,eAAP;AACF","file":"../ProjectSettings.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nlet projectSettingsFile = 'settings.json';\nlet projectSettingsDefaults = {\n  hostType: 'lan',\n  lanType: 'ip',\n  dev: true,\n  minify: false,\n  urlRandomness: null,\n};\nlet packagerInfoFile = 'packager-info.json';\n\nfunction projectSettingsJsonFile(projectRoot: string, filename: string) {\n  return new JsonFile(path.join(dotExpoProjectDirectory(projectRoot), filename));\n}\n\nexport async function readAsync(projectRoot: string) {\n  let projectSettings;\n  try {\n    projectSettings = await projectSettingsJsonFile(projectRoot, projectSettingsFile).readAsync();\n  } catch (e) {\n    projectSettings = await projectSettingsJsonFile(projectRoot, projectSettingsFile).writeAsync(\n      projectSettingsDefaults\n    );\n  }\n\n  if (projectSettings.hostType === 'ngrok') {\n    // 'ngrok' is deprecated\n    projectSettings.hostType = 'tunnel';\n  }\n\n  if (projectSettings.urlType) {\n    // urlType is deprecated as a project setting\n    delete projectSettings.urlType;\n  }\n\n  if ('strict' in projectSettings) {\n    // strict mode is not supported at the moment\n    delete projectSettings.strict;\n  }\n\n  // Set defaults for any missing fields\n  _.defaults(projectSettings, projectSettingsDefaults);\n  return projectSettings;\n}\n\nexport async function setAsync(projectRoot: string, json: any) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, projectSettingsFile).mergeAsync(json, {\n      cantReadFileDefault: projectSettingsDefaults,\n    });\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, projectSettingsFile).writeAsync(\n      _.defaults(json, projectSettingsDefaults)\n    );\n  }\n}\n\nexport async function readPackagerInfoAsync(projectRoot: string) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).readAsync({\n      cantReadFileDefault: {},\n    });\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).writeAsync({});\n  }\n}\n\nexport async function setPackagerInfoAsync(projectRoot: string, json: any) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).mergeAsync(json, {\n      cantReadFileDefault: {},\n    });\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).writeAsync(json);\n  }\n}\n\nexport function dotExpoProjectDirectory(projectRoot: string) {\n  let dirPath = path.join(projectRoot, '.expo');\n  try {\n    // move .exponent to .expo\n    let oldDirPath = path.join(projectRoot, '.exponent');\n    if (fs.statSync(oldDirPath).isDirectory()) {\n      fs.renameSync(oldDirPath, dirPath);\n    }\n  } catch (e) {\n    // no old directory, continue\n  }\n\n  fs.mkdirpSync(dirPath);\n  return dirPath;\n}\n\nexport function dotExpoProjectDirectoryExists(projectRoot: string) {\n  let dirPath = path.join(projectRoot, '.expo');\n  try {\n    if (fs.statSync(dirPath).isDirectory()) {\n      return true;\n    }\n  } catch (e) {\n    // file doesn't exist\n  }\n\n  return false;\n}\n\nexport async function getPackagerOptsAsync(projectRoot: string) {\n  let projectSettings = await readAsync(projectRoot);\n  return projectSettings;\n}\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}