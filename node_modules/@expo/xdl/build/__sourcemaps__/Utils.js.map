{"version":3,"sources":["Utils.js"],"names":["ncpAsync","source","dest","options","any","Promise","resolve","reject","ncp","err","Semaphore","async","acquire","available","resolver","queue","push","release","length","Error","nextResolver","shift"],"mappings":";;;;;;;;AAIA;;;;;;AAEO,SAASA,QAAT,CAAkBC,MAAlB,EAAkCC,IAAlC,EAAgDC,OAASC,GAAM,EAA/D,EAAmE;AACxE,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,sBAAIP,MAAJO,EAAYN,IAAZM,EAAkBL,OAAlBK,EAA2BC,GAAAA,IAAO;AAChC,UAAIA,GAAJ,EAAS;AACPF,QAAAA,MAAM,CAACE,GAAD,CAANF;AACF,OAFA,MAEO;AACLD,QAAAA,OAAO;AACT;AACD,KANDE;AAOD,GARM,CAAP;AASF;;AAEO,MAAME,SAAN,CAAgB;AAAA;AAAA,mCACgB,EADhB;;AAAA,uCAET,CAFS;AAAA;;AAIrBC,QAAMC,OAAND,GAAkC;AAChC,QAAI,KAAKE,SAAL,GAAiB,CAArB,EAAwB;AACtB,WAAKA,SAAL,IAAkB,CAAlB;AACA,aAAOR,OAAO,CAACC,OAARD,CAAgB,IAAhBA,CAAP;AACF,KAJgC,CAMhC;AACA;;;AACA,WAAO,IAAIA,OAAJ,CAAYS,QAAAA,IAAY,KAAKC,KAAL,CAAWC,IAAX,CAAgBF,QAAhB,CAAxB,CAAP;AACF;;AAEAG,EAAAA,OAAO,GAAG;AACR,SAAKJ,SAAL,IAAkB,CAAlB;;AAEA,QAAI,KAAKA,SAAL,GAAiB,CAAjB,IAAsB,KAAKE,KAAL,CAAWG,MAAX,GAAoB,CAA9C,EAAiD;AAC/C,YAAM,IAAIC,KAAJ,CAAU,mEAAV,CAAN;AACF,KAFA,MAEO,IAAI,KAAKN,SAAL,KAAmB,CAAnB,IAAwB,KAAKE,KAAL,CAAWG,MAAX,GAAoB,CAAhD,EAAmD;AACxD;AACA;AACA,WAAKL,SAAL,IAAkB,CAAlB;AAEA,YAAMO,YAAAA,GAAe,KAAKL,KAAL,CAAWM,KAAX,EAArB;;AACA,UAAID,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAAC,IAAD,CAAZA;AACF;AACF;AACF;;AA9BqB","file":"../Utils.js","sourcesContent":["/**\n * @flow\n */\n\nimport ncp from 'ncp';\n\nexport function ncpAsync(source: string, dest: string, options: any = {}) {\n  return new Promise((resolve, reject) => {\n    ncp(source, dest, options, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nexport class Semaphore {\n  queue: Array<(v: boolean) => void> = [];\n  available = 1;\n\n  async acquire(): Promise<boolean> {\n    if (this.available > 0) {\n      this.available -= 1;\n      return Promise.resolve(true);\n    }\n\n    // If there is no permit available, we return a promise that resolves once the semaphore gets\n    // signaled enough times that \"available\" is equal to one.\n    return new Promise(resolver => this.queue.push(resolver));\n  }\n\n  release() {\n    this.available += 1;\n\n    if (this.available > 1 && this.queue.length > 0) {\n      throw new Error('this.available should never be > 0 when there is someone waiting.');\n    } else if (this.available === 1 && this.queue.length > 0) {\n      // If there is someone else waiting, immediately consume the permit that was released\n      // at the beginning of this function and let the waiting function resume.\n      this.available -= 1;\n\n      const nextResolver = this.queue.shift();\n      if (nextResolver) {\n        nextResolver(true);\n      }\n    }\n  }\n}\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}