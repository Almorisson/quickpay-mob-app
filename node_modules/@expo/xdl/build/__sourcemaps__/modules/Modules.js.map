{"version":3,"sources":["modules/Modules.js"],"names":["HIGHEST_KNOWN_VERSION","getAllNativeModules","expoSdkUniversalModulesConfigs","vendoredNativeModules","filter","moduleConfig","isNativeModule","mapForPlatform","platform","config","getAllForPlatform","sdkVersion","doesVersionSatisfy","sdkVersions","map","getAllNativeForExpoClientOnPlatform","includeInExpoClient","getVersionableModulesForPlatform","versionable","getDetachableModules","detachable","getPublishableModules","libName","version","versionRequirement","semver","satisfies"],"mappings":";;;;;;;;;;;;;AAIA;;AAEA;;;;AAeA,MAAMA,qBAAAA,GAAwB,WAA9B;;AAEO,SAASC,mBAAT,GAA+B;AACpC,SAAO,CAAC,GAAGC,sCAAJ,EAAoC,GAAGC,6BAAvC,EAA8DC,MAA9D,CACLC,YAAAA,IAAgBA,YAAY,CAACC,cADxB,CAAP;AAGF;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAgE;AAC9D,SAAOH,YAAAA,KAAiB,EAAE,GAAGA,YAAL;AAAmB,OAAGA,YAAY,CAACI,MAAbJ,CAAoBG,QAApBH;AAAtB,GAAjBA,CAAP;AACF;;AAEO,SAASK,iBAAT,CAA2BF,QAA3B,EAA+CG,UAA/C,EAAwF;AAC7F,SAAOT,uCACJE,MADIF,CACGG,YAAAA,IAAgBO,kBAAkB,CAACD,UAAD,EAAaN,YAAY,CAACQ,WAA1B,CADrCX,EAEJY,GAFIZ,CAEAK,cAAc,CAACC,QAAD,CAFdN,CAAP;AAGF;;AAEO,SAASa,mCAAT,CACLP,QADK,EAELG,UAFK,EAGgB;AACrB,SAAOD,iBAAiB,CAACF,QAAD,EAAWG,UAAX,CAAjBD,CAAwCN,MAAxCM,CACLL,YAAAA,IAAgBA,YAAY,CAACW,mBAAbX,IAAoCA,YAAY,CAACC,cAD5DI,CAAP;AAGF;;AAEO,SAASO,gCAAT,CACLT,QADK,EAELG,UAFK,EAGgB;AACrB,SAAOI,mCAAmC,CAACP,QAAD,EAAWG,UAAX,CAAnCI,CAA0DX,MAA1DW,CAAiEV,YAAAA,IAAgB;AACtF,WAAOA,YAAY,CAACa,WAApB;AACD,GAFMH,CAAP;AAGF;;AAEO,SAASI,oBAAT,CAA8BX,QAA9B,EAAkDG,UAAlD,EAA2F;AAChG,SAAOD,iBAAiB,CAACF,QAAD,EAAWG,UAAX,CAAjBD,CAAwCN,MAAxCM,CACLL,YAAAA,IAAgBA,YAAY,CAACC,cAAbD,IAA+BA,YAAY,CAACe,UADvDV,CAAP;AAGF;;AAEO,SAASW,qBAAT,CAA+BV,UAA/B,EAAwE;AAC7E,SAAOT,uCAA+BE,MAA/BF,CACLG,YAAAA,IACE,CAAC,CAACA,YAAY,CAACiB,OAAf,IAA0BV,kBAAkB,CAACD,UAAD,EAAaN,YAAY,CAACQ,WAA1B,CAFzCX,CAAP;AAIF;;AAEO,SAASU,kBAAT,CAA4BW,OAA5B,EAA6CC,kBAA7C,EAAkF;AACvF,MAAID,OAAAA,KAAY,aAAhB,EAA+B;AAC7B,WAAOE,gBAAOC,SAAPD,CAAiBzB,qBAAjByB,EAAwCD,kBAAxCC,CAAP;AACF;;AAEA,SAAOA,gBAAOC,SAAPD,CAAiBF,OAAjBE,EAA0BD,kBAA1BC,CAAP;AACF","file":"../../modules/Modules.js","sourcesContent":["/**\n * @flow\n */\n\nimport semver from 'semver';\n\nimport { expoSdkUniversalModulesConfigs, vendoredNativeModules } from './config';\n\ntype Platform = 'ios' | 'android';\n\ntype ModuleConfig = {\n  podName: string,\n  libName: string,\n  sdkVersions: string,\n  detachable: boolean,\n  isNativeModule: boolean,\n  subdirectory: string,\n  versionable: boolean,\n  includeInExpoClient: boolean,\n};\n\nconst HIGHEST_KNOWN_VERSION = '10000.0.0';\n\nexport function getAllNativeModules() {\n  return [...expoSdkUniversalModulesConfigs, ...vendoredNativeModules].filter(\n    moduleConfig => moduleConfig.isNativeModule\n  );\n}\n\nfunction mapForPlatform(platform: Platform): () => ModuleConfig {\n  return moduleConfig => ({ ...moduleConfig, ...moduleConfig.config[platform] });\n}\n\nexport function getAllForPlatform(platform: Platform, sdkVersion: string): Array<ModuleConfig> {\n  return expoSdkUniversalModulesConfigs\n    .filter(moduleConfig => doesVersionSatisfy(sdkVersion, moduleConfig.sdkVersions))\n    .map(mapForPlatform(platform));\n}\n\nexport function getAllNativeForExpoClientOnPlatform(\n  platform: Platform,\n  sdkVersion: string\n): Array<ModuleConfig> {\n  return getAllForPlatform(platform, sdkVersion).filter(\n    moduleConfig => moduleConfig.includeInExpoClient && moduleConfig.isNativeModule\n  );\n}\n\nexport function getVersionableModulesForPlatform(\n  platform: Platform,\n  sdkVersion: string\n): Array<ModuleConfig> {\n  return getAllNativeForExpoClientOnPlatform(platform, sdkVersion).filter(moduleConfig => {\n    return moduleConfig.versionable;\n  });\n}\n\nexport function getDetachableModules(platform: Platform, sdkVersion: string): Array<ModuleConfig> {\n  return getAllForPlatform(platform, sdkVersion).filter(\n    moduleConfig => moduleConfig.isNativeModule && moduleConfig.detachable\n  );\n}\n\nexport function getPublishableModules(sdkVersion: string): Array<ModuleConfig> {\n  return expoSdkUniversalModulesConfigs.filter(\n    moduleConfig =>\n      !!moduleConfig.libName && doesVersionSatisfy(sdkVersion, moduleConfig.sdkVersions)\n  );\n}\n\nexport function doesVersionSatisfy(version: string, versionRequirement: string): boolean {\n  if (version === 'UNVERSIONED') {\n    return semver.satisfies(HIGHEST_KNOWN_VERSION, versionRequirement);\n  }\n\n  return semver.satisfies(version, versionRequirement);\n}\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}