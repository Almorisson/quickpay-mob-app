{"version":3,"sources":["User.js"],"names":["ANONYMOUS_USERNAME","UserManagerInstance","Semaphore","static","getGlobalInstance","__globalInstance","initialize","loginServer","_currentUser","_getSessionLock","async","loginAsync","loginType","loginArgs","Error","apiAnonymous","ApiV2Client","clientForUser","loginResp","await","postAsync","username","password","error","XDLError","_getProfileAsync","currentConnection","sessionSecret","registerAsync","userData","user","getCurrentUserAsync","logoutAsync","let","registeredUser","createOrUpdateUserAsync","connection","email","givenName","familyName","e","console","message","ensureLoggedInAsync","Config","offline","_interactiveAuthenticationCallbackAsync","setInteractiveAuthenticationCallback","callback","_readUserData","auth","UserSettings","getAsync","isEmpty","acquire","Logger","global","warn","release","getCurrentUsernameAsync","data","getSessionAsync","currentUser","api","updatedUser","_prepareAuth0Profile","_parseAuth0Profile","kind","err","ApiV2Error","code","details","Analytics","logEvent","deleteKeyAsync","forgotPasswordAsync","usernameOrEmail","mergeAsync","userId","setUserProperties","rawProfile","Object","keys","reduce","p","key","_","camelCase","niceProfile","snakeCase"],"mappings":"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","file":"../User.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport isEmpty from 'lodash/isEmpty';\n\nimport ApiV2Client, { ApiV2Error } from './ApiV2';\nimport * as Analytics from './Analytics';\nimport Config from './Config';\nimport XDLError from './XDLError';\nimport Logger from './Logger';\n\nimport UserSettings from './UserSettings';\n\nimport { Semaphore } from './Utils';\n\nexport type User = {\n  kind: 'user',\n  // required\n  name: string,\n  username: string,\n  nickname: string,\n  userId: string,\n  picture: string,\n  // optional\n  email?: string,\n  emailVerified?: boolean,\n  givenName?: string,\n  familyName?: string,\n  loginsCount?: number,\n  intercomUserHash: string,\n  userMetadata: {\n    onboarded: boolean,\n    legacy?: boolean,\n  },\n  identities: Array<{\n    connection: ConnectionType,\n    isSocial: boolean,\n    provider: string,\n    userId: string,\n  }>,\n  currentConnection: ConnectionType,\n  sessionSecret: string,\n};\n\nexport type LegacyUser = {\n  kind: 'legacyUser',\n  username: string,\n  userMetadata: {\n    legacy: boolean,\n    needsPasswordMigration: boolean,\n  },\n};\n\nexport type UserOrLegacyUser = User | LegacyUser;\n\ntype ConnectionType = 'Username-Password-Authentication' | 'facebook' | 'google-oauth2' | 'github';\n\nexport type RegistrationData = {\n  username: string,\n  password: string,\n  email?: string,\n  givenName?: string,\n  familyName?: string,\n};\n\nexport type LoginType = 'user-pass' | 'facebook' | 'google' | 'github';\n\nexport const ANONYMOUS_USERNAME = 'anonymous';\n\nexport class UserManagerInstance {\n  loginServer = null;\n  refreshSessionThreshold = 60 * 60; // 1 hour\n  _currentUser: ?User = null;\n  _getSessionLock = new Semaphore();\n\n  static getGlobalInstance() {\n    if (!__globalInstance) {\n      __globalInstance = new UserManagerInstance();\n    }\n    return __globalInstance;\n  }\n\n  initialize() {\n    this.loginServer = null;\n    this._currentUser = null;\n    this._getSessionLock = new Semaphore();\n  }\n\n  /**\n   * Logs in a user for a given login type.\n   *\n   * Valid login types are:\n   *  - \"user-pass\": Username and password authentication\n   *\n   * If the login type is \"user-pass\", we directly make the request to www\n   * to login a user.\n   */\n  async loginAsync(\n    loginType: LoginType,\n    loginArgs?: { username: string, password: string }\n  ): Promise<User> {\n    if (loginType === 'user-pass') {\n      if (!loginArgs) {\n        throw new Error(`The 'user-pass' login type requires a username and password.`);\n      }\n      const apiAnonymous = ApiV2Client.clientForUser();\n      const loginResp = await apiAnonymous.postAsync('auth/loginAsync', {\n        username: loginArgs.username,\n        password: loginArgs.password,\n      });\n      if (loginResp.error) {\n        throw new XDLError('INVALID_USERNAME_PASSWORD', loginResp['error_description']);\n      }\n      return this._getProfileAsync({\n        currentConnection: 'Username-Password-Authentication',\n        sessionSecret: loginResp.sessionSecret,\n      });\n    } else {\n      throw new Error(`Invalid login type provided. Must be 'user-pass'.`);\n    }\n  }\n\n  async registerAsync(userData: RegistrationData, user: ?UserOrLegacyUser): Promise<User> {\n    if (!user) {\n      user = await this.getCurrentUserAsync();\n    }\n\n    if (user) {\n      await this.logoutAsync();\n      user = null;\n    }\n\n    try {\n      // Create or update the profile\n      let registeredUser = await this.createOrUpdateUserAsync({\n        connection: 'Username-Password-Authentication', // Always create/update username password\n        email: userData.email,\n        givenName: userData.givenName,\n        familyName: userData.familyName,\n        username: userData.username,\n        password: userData.password,\n      });\n\n      registeredUser = await this.loginAsync('user-pass', {\n        username: userData.username,\n        password: userData.password,\n      });\n\n      return registeredUser;\n    } catch (e) {\n      console.error(e);\n      throw new XDLError('REGISTRATION_ERROR', 'Error registering user: ' + e.message);\n    }\n  }\n\n  /**\n   * Ensure user is logged in and has a valid token.\n   *\n   * If there are any issues with the login, this method throws.\n   */\n  async ensureLoggedInAsync(): Promise<?User> {\n    if (Config.offline) {\n      return null;\n    }\n\n    let user = await this.getCurrentUserAsync();\n    if (!user && this._interactiveAuthenticationCallbackAsync) {\n      user = await this._interactiveAuthenticationCallbackAsync();\n    }\n    if (!user) {\n      throw new XDLError('NOT_LOGGED_IN', 'Not logged in');\n    }\n    return user;\n  }\n\n  setInteractiveAuthenticationCallback(callback) {\n    this._interactiveAuthenticationCallbackAsync = callback;\n  }\n\n  async _readUserData() {\n    let auth = await UserSettings.getAsync('auth', {});\n    if (isEmpty(auth)) {\n      // XXX(ville):\n      // We sometimes read an empty string from ~/.expo/state.json,\n      // even though it has valid credentials in it.\n      // We don't know why.\n      // An empty string can't be parsed as JSON, so an empty default object is returned.\n      // In this case, retrying usually helps.\n      auth = await UserSettings.getAsync('auth', {});\n    }\n    return auth;\n  }\n\n  /**\n   * Get the current user based on the available token.\n   * If there is no current token, returns null.\n   */\n  async getCurrentUserAsync(): Promise<?User> {\n    await this._getSessionLock.acquire();\n\n    try {\n      // If user is cached and there is a sessionSecret, return the user\n      if (this._currentUser && this._currentUser.sessionSecret) {\n        return this._currentUser;\n      }\n\n      if (Config.offline) {\n        return null;\n      }\n\n      let { currentConnection, sessionSecret } = await this._readUserData();\n\n      // No session, no current user. Need to login\n      if (!sessionSecret) {\n        return null;\n      }\n\n      try {\n        return await this._getProfileAsync({\n          currentConnection,\n          sessionSecret,\n        });\n      } catch (e) {\n        Logger.global.warn('Fetching the user profile failed');\n        Logger.global.warn(e);\n        return null;\n      }\n    } finally {\n      this._getSessionLock.release();\n    }\n  }\n\n  async getCurrentUsernameAsync(): Promise<?string> {\n    let data = await this._readUserData();\n    if (!data.username) {\n      return null;\n    }\n    return data.username;\n  }\n\n  async getSessionAsync(): Promise<?string> {\n    let data = await this._readUserData();\n    if (!data.sessionSecret) {\n      return null;\n    }\n    return { sessionSecret: data.sessionSecret };\n  }\n\n  /**\n   * Create or update a user.\n   */\n  async createOrUpdateUserAsync(userData: Object): Promise<User> {\n    let currentUser = this._currentUser;\n    if (!currentUser) {\n      // attempt to get the current user\n      currentUser = await this.getCurrentUserAsync();\n    }\n\n    try {\n      const api = ApiV2Client.clientForUser(currentUser);\n\n      const { user: updatedUser } = await api.postAsync('auth/createOrUpdateUser', {\n        userData: _prepareAuth0Profile(userData),\n      });\n\n      this._currentUser = {\n        ...(this._currentUser || {}),\n        ..._parseAuth0Profile(updatedUser),\n      };\n      return {\n        kind: 'user',\n        ...this._currentUser,\n      };\n    } catch (e) {\n      const err: ApiV2Error = (e: any);\n      if (err.code === 'AUTHENTICATION_ERROR') {\n        throw new Error(err.details.message);\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Logout\n   */\n  async logoutAsync(): Promise<void> {\n    if (this._currentUser) {\n      Analytics.logEvent('Logout', {\n        username: this._currentUser.username,\n      });\n    }\n\n    this._currentUser = null;\n\n    // Delete saved auth info\n    await UserSettings.deleteKeyAsync('auth');\n  }\n\n  /**\n   * Forgot Password\n   */\n  async forgotPasswordAsync(usernameOrEmail: string): Promise<void> {\n    const apiAnonymous = ApiV2Client.clientForUser();\n    return apiAnonymous.postAsync('auth/forgotPasswordAsync', {\n      usernameOrEmail,\n    });\n  }\n\n  /**\n   * Get profile given token data. Errors if token is not valid or if no\n   * user profile is returned.\n   *\n   * This method is called by all public authentication methods of `UserManager`\n   * except `logoutAsync`. Therefore, we use this method as a way to:\n   *  - update the UserSettings store with the current token and user id\n   *  - update UserManager._currentUser\n   *  - Fire login analytics events\n   *\n   * Also updates UserManager._currentUser.\n   *\n   * @private\n   */\n  async _getProfileAsync({\n    currentConnection,\n    sessionSecret,\n  }: {\n    currentConnection: ConnectionType,\n    sessionSecret: string,\n  }): Promise<User> {\n    let user;\n    let api = ApiV2Client.clientForUser({\n      sessionSecret,\n    });\n\n    user = await api.postAsync('auth/userProfileAsync');\n\n    if (!user) {\n      throw new Error('Unable to fetch user.');\n    }\n\n    user = {\n      ..._parseAuth0Profile(user),\n      kind: 'user',\n      currentConnection,\n      sessionSecret,\n    };\n\n    await UserSettings.mergeAsync({\n      auth: {\n        userId: user.userId,\n        username: user.username,\n        currentConnection,\n        sessionSecret,\n      },\n    });\n\n    // If no currentUser, or currentUser.id differs from profiles\n    // user id, that means we have a new login\n    if (\n      (!this._currentUser || this._currentUser.userId !== user.userId) &&\n      user.username &&\n      user.username !== ''\n    ) {\n      Analytics.logEvent('Login', {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n      });\n\n      Analytics.setUserProperties(user.username, {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n      });\n    }\n\n    this._currentUser = user;\n\n    return user;\n  }\n}\n\nlet __globalInstance;\nexport default UserManagerInstance.getGlobalInstance();\n\n/** Private Methods **/\nfunction _parseAuth0Profile(rawProfile: any): User {\n  if (!rawProfile || typeof rawProfile !== 'object') {\n    return rawProfile;\n  }\n  return ((Object.keys(rawProfile).reduce((p, key) => {\n    p[_.camelCase(key)] = _parseAuth0Profile(rawProfile[key]);\n    return p;\n  }, {}): any): User);\n}\n\nfunction _prepareAuth0Profile(niceProfile: any): Object {\n  if (typeof niceProfile !== 'object') {\n    return niceProfile;\n  }\n\n  return ((Object.keys(niceProfile).reduce((p, key) => {\n    p[_.snakeCase(key)] = _prepareAuth0Profile(niceProfile[key]);\n    return p;\n  }, {}): any): User);\n}\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}