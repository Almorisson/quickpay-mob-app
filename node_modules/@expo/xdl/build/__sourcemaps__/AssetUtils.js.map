{"version":3,"sources":["AssetUtils.js"],"names":["toReadableValue","bytes","sizes","index","Math","floor","log","reduced","pow","toFixed","calculateHash","file","contents","fs","readFileSync","crypto","createHash","update","digest","optimizeImageAsync","async","image","newName","quality","logger","global","info","copyFileSync","buffer","await","sharp","toBuffer","format","metadata","jpeg","toFile","catch","err","error","png","hasUnoptimizedAssetsAsync","projectDir","options","existsSync","path","join","selectedFiles","getAssetFilesAsync","assetInfo","readAssetJsonAsync","hash","exp","readConfigJsonAsync","assetBundlePatterns","globOptions","cwd","ignore","allFiles","patterns","forEach","pattern","push","glob","sync","included","include","toExclude","Set","exclude","add","excluded","filter","has","filtered","filterImages","files","regex","withDirectory","map","replace","allImages","test","toLowerCase","dirPath","mkdirSync","assetJson","JsonFile","message","chalk","italic","writeAsync","readAsync","createNewFilename","dir","name","ext","parse"],"mappings":"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","file":"../AssetUtils.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport crypto from 'crypto';\nimport chalk from 'chalk';\nimport sharp from 'sharp';\nimport glob from 'glob';\nimport JsonFile from '@expo/json-file';\nimport logger from './Logger';\nimport { readConfigJsonAsync } from './project/ProjectUtils';\n\n/*\n * Converts a raw number of bytes into a human readable value\n */\nexport const toReadableValue = bytes => {\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const index = Math.floor(Math.log(bytes) / Math.log(1024));\n  const reduced = (bytes / Math.pow(1024, index)).toFixed(2) * 1;\n\n  return `${reduced} ${sizes[index]}`;\n};\n\n/*\n * Calculate SHA256 Checksum value of a file based on its contents\n */\nexport const calculateHash = file => {\n  const contents = fs.readFileSync(file);\n  return crypto\n    .createHash('sha256')\n    .update(contents)\n    .digest('hex');\n};\n\n/*\n * Compress an inputted jpg or png\n */\nexport const optimizeImageAsync = async (image, newName, quality) => {\n  logger.global.info(`Optimizing ${image}`);\n  fs.copyFileSync(image, newName);\n\n  // Extract the format and compress\n  const buffer = await sharp(image).toBuffer();\n  const { format } = await sharp(buffer).metadata();\n  if (format === 'jpeg') {\n    await sharp(newName)\n      .jpeg({ quality })\n      .toFile(image)\n      .catch(err => logger.global.error(err));\n  } else {\n    await sharp(newName)\n      .png({ quality })\n      .toFile(image)\n      .catch(err => logger.global.error(err));\n  }\n};\n\n/*\n * Returns a boolean indicating whether or not there are assets to optimize\n */\nexport const hasUnoptimizedAssetsAsync = async (projectDir, options) => {\n  if (!fs.existsSync(path.join(projectDir, '.expo-shared/assets.json'))) {\n    return true;\n  }\n  const { selectedFiles } = await getAssetFilesAsync(projectDir, options);\n  const { assetInfo } = await readAssetJsonAsync(projectDir);\n\n  for (const file of selectedFiles) {\n    const hash = calculateHash(file);\n    if (!assetInfo[hash]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/*\n * Find all project assets under assetBundlePatterns in app.json excluding node_modules.\n * If --include of --exclude flags were passed in those results are filtered out.\n */\nexport const getAssetFilesAsync = async (projectDir, options) => {\n  const { exp } = await readConfigJsonAsync(projectDir);\n  const { assetBundlePatterns } = exp;\n  const globOptions = {\n    cwd: projectDir,\n    ignore: ['**/node_modules/**', '**/ios/**', '**/android/**'],\n  };\n\n  // All files must be returned even if flags are passed in to properly update assets.json\n  const allFiles = [];\n  const patterns = assetBundlePatterns || ['**/*'];\n  patterns.forEach(pattern => {\n    allFiles.push(...glob.sync(pattern, globOptions));\n  });\n  // If --include is passed in, only return files matching that pattern\n  const included =\n    options && options.include ? [...glob.sync(options.include, globOptions)] : allFiles;\n  const toExclude = new Set();\n  if (options && options.exclude) {\n    glob.sync(options.exclude, globOptions).forEach(file => toExclude.add(file));\n  }\n  // If --exclude is passed in, filter out files matching that pattern\n  const excluded = included.filter(file => !toExclude.has(file));\n  const filtered = options && options.exclude ? excluded : included;\n  return {\n    allFiles: filterImages(allFiles, projectDir),\n    selectedFiles: filterImages(filtered, projectDir),\n  };\n};\n\n/*\n * Formats an array of files to include the project directory and filters out PNGs and JPGs.\n */\nconst filterImages = (files, projectDir) => {\n  const regex = /\\.(png|jpg|jpeg)$/;\n  const withDirectory = files.map(file => `${projectDir}/${file}`.replace('//', '/'));\n  const allImages = withDirectory.filter(file => regex.test(file.toLowerCase()));\n  return allImages;\n};\n\n/*\n * Read the contents of assets.json under .expo-shared folder. Create the file/directory if they don't exist.\n */\nexport const readAssetJsonAsync = async projectDir => {\n  const dirPath = path.join(projectDir, '.expo-shared');\n  if (!fs.existsSync(dirPath)) {\n    fs.mkdirSync(dirPath);\n  }\n\n  const assetJson = new JsonFile(path.join(dirPath, 'assets.json'));\n  if (!fs.existsSync(assetJson.file)) {\n    const message =\n      `Creating ${chalk.italic('.expo-shared/assets.json')} in the project's root directory.\\n` +\n      `This file is autogenerated and should not be edited directly.\\n` +\n      'You should commit this to git so that asset state is shared between collaborators.';\n\n    logger.global.info(message);\n\n    await assetJson.writeAsync({});\n  }\n  const assetInfo = await assetJson.readAsync();\n  return { assetJson, assetInfo };\n};\n\n/*\n * Add .orig extension to a filename in a path string\n */\nexport const createNewFilename = image => {\n  const { dir, name, ext } = path.parse(image);\n  return dir + '/' + name + '.orig' + ext;\n};\n"],"sourceRoot":"/@expo/xdl@54.1.5/src"}