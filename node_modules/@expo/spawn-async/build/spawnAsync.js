"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var cross_spawn_1 = __importDefault(require("cross-spawn"));
module.exports = function spawnAsync(command, args, options) {
    var child;
    var promise = new Promise(function (resolve, reject) {
        // @ts-ignore: cross-spawn declares "args" to be a regular array instead of a read-only one
        child = cross_spawn_1.default(command, args, options);
        var stdout = '';
        var stderr = '';
        if (child.stdout) {
            child.stdout.on('data', function (data) {
                stdout += data;
            });
        }
        if (child.stderr) {
            child.stderr.on('data', function (data) {
                stderr += data;
            });
        }
        child.on('close', function (code, signal) {
            child.removeAllListeners();
            var result = {
                pid: child.pid,
                output: [stdout, stderr],
                stdout: stdout,
                stderr: stderr,
                status: code,
                signal: signal,
            };
            if (code) {
                var error = new Error("Process exited with non-zero code: " + code);
                Object.assign(error, result);
                reject(error);
            }
            else {
                resolve(result);
            }
        });
        child.on('error', function (error) {
            child.removeAllListeners();
            Object.assign(error, {
                pid: child.pid,
                output: [stdout, stderr],
                stdout: stdout,
                stderr: stderr,
                status: null,
                signal: null,
            });
            reject(error);
        });
    });
    // @ts-ignore: TypeScript isn't aware the Promise constructor argument runs synchronously and
    // thinks `child` is not yet defined
    promise.child = child;
    return promise;
};
//# sourceMappingURL=spawnAsync.js.map