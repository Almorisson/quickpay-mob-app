{"version":3,"file":"spawnAsync.js","sourceRoot":"","sources":["../src/spawnAsync.ts"],"names":[],"mappings":";;;;AACA,4DAAgC;AAehC,iBAAS,SAAS,UAAU,CAC1B,OAAe,EACf,IAA4B,EAC5B,OAAsB;IAEtB,IAAI,KAAmB,CAAC;IACxB,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACxC,2FAA2F;QAC3F,KAAK,GAAG,qBAAK,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACtC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,MAAM,GAAG,EAAE,CAAC;QAEhB,IAAI,KAAK,CAAC,MAAM,EAAE;YAChB,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,IAAI;gBAC1B,MAAM,IAAI,IAAI,CAAC;YACjB,CAAC,CAAC,CAAC;SACJ;QAED,IAAI,KAAK,CAAC,MAAM,EAAE;YAChB,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,IAAI;gBAC1B,MAAM,IAAI,IAAI,CAAC;YACjB,CAAC,CAAC,CAAC;SACJ;QAED,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,IAAI,EAAE,MAAM;YAC7B,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,IAAI,MAAM,GAAgB;gBACxB,GAAG,EAAE,KAAK,CAAC,GAAG;gBACd,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;gBACxB,MAAM,QAAA;gBACN,MAAM,QAAA;gBACN,MAAM,EAAE,IAAI;gBACZ,MAAM,QAAA;aACP,CAAC;YACF,IAAI,IAAI,EAAE;gBACR,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,wCAAsC,IAAM,CAAC,CAAC;gBACpE,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBAC7B,MAAM,CAAC,KAAK,CAAC,CAAC;aACf;iBAAM;gBACL,OAAO,CAAC,MAAM,CAAC,CAAC;aACjB;QACH,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,UAAA,KAAK;YACrB,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;gBACnB,GAAG,EAAE,KAAK,CAAC,GAAG;gBACd,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;gBACxB,MAAM,QAAA;gBACN,MAAM,QAAA;gBACN,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,IAAI;aACb,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAA8B,CAAC;IAChC,6FAA6F;IAC7F,oCAAoC;IACpC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;IACtB,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import { ChildProcess, SpawnOptions } from 'child_process';\nimport spawn from 'cross-spawn';\n\ninterface SpawnPromise<T> extends Promise<T> {\n  child: ChildProcess;\n}\n\ninterface SpawnResult {\n  pid: number;\n  output: string[];\n  stdout: string;\n  stderr: string;\n  status: number | null;\n  signal: string | null;\n}\n\nexport = function spawnAsync(\n  command: string,\n  args?: ReadonlyArray<string>,\n  options?: SpawnOptions\n): SpawnPromise<SpawnResult> {\n  let child: ChildProcess;\n  let promise = new Promise((resolve, reject) => {\n    // @ts-ignore: cross-spawn declares \"args\" to be a regular array instead of a read-only one\n    child = spawn(command, args, options);\n    let stdout = '';\n    let stderr = '';\n\n    if (child.stdout) {\n      child.stdout.on('data', data => {\n        stdout += data;\n      });\n    }\n\n    if (child.stderr) {\n      child.stderr.on('data', data => {\n        stderr += data;\n      });\n    }\n\n    child.on('close', (code, signal) => {\n      child.removeAllListeners();\n      let result: SpawnResult = {\n        pid: child.pid,\n        output: [stdout, stderr],\n        stdout,\n        stderr,\n        status: code,\n        signal,\n      };\n      if (code) {\n        let error = new Error(`Process exited with non-zero code: ${code}`);\n        Object.assign(error, result);\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n\n    child.on('error', error => {\n      child.removeAllListeners();\n      Object.assign(error, {\n        pid: child.pid,\n        output: [stdout, stderr],\n        stdout,\n        stderr,\n        status: null,\n        signal: null,\n      });\n      reject(error);\n    });\n  }) as SpawnPromise<SpawnResult>;\n  // @ts-ignore: TypeScript isn't aware the Promise constructor argument runs synchronously and\n  // thinks `child` is not yet defined\n  promise.child = child;\n  return promise;\n};\n"]}