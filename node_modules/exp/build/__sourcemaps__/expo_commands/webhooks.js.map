{"version":3,"sources":["expo_commands/webhooks.js"],"names":["prompt","type","name","message","secret","length","error","_askForSecret","WEBHOOK_TYPES","program","command","option","description","asyncActionProjectDir","projectDir","_options","options","_sanitizeOptions","webhookData","getPublishInfoAsync","experienceName","args","remoteFullPackageName","event","setWebhookAsync","Error","getWebhooksAsync","webhooks","bold","webhook","url","_sanitizeEvent","deleteWebhooksAsync","_event","err","TypeError","secretString","String","required","includes"],"mappings":"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","file":"../../expo_commands/webhooks.js","sourcesContent":["import { URL } from 'url';\nimport { Webhooks, Exp } from 'xdl';\nimport chalk from 'chalk';\nimport _ from 'lodash';\nimport inquirer from 'inquirer';\n\nimport log from '../log';\n\nconst WEBHOOK_TYPES = ['build'];\n\nexport default program => {\n  program\n    .command('webhooks:set [project-dir]')\n    .option('--url <webhook-url>', 'Webhook to be called after building the app.')\n    .option('--event <webhook-type>', 'Type of webhook: [build].')\n    .option(\n      '--secret <webhook-secret>',\n      'Secret to be used to calculate the webhook request payload signature (check docs for more details). It has to be at least 16 characters long.'\n    )\n    .description(`Set a webhook for the project.`)\n    .asyncActionProjectDir(async (projectDir, _options) => {\n      const options = _sanitizeOptions(_options);\n      const secret = options.secret ? options.secret : await _askForSecret();\n      const webhookData = { ...options, secret };\n      const { args: { remoteFullPackageName: experienceName } } = await Exp.getPublishInfoAsync(\n        projectDir\n      );\n      log(`Setting ${webhookData.event} webhook and secret for ${experienceName}`);\n      try {\n        await Webhooks.setWebhookAsync(experienceName, webhookData);\n      } catch (e) {\n        log.error(e);\n        throw new Error('Unable to set webhook and secret for this project.');\n      }\n\n      log('All done!');\n    }, true);\n\n  program\n    .command('webhooks:show [project-dir]')\n    .description(`Show webhooks for the project.`)\n    .asyncActionProjectDir(async (projectDir, options) => {\n      const { args: { remoteFullPackageName: experienceName } } = await Exp.getPublishInfoAsync(\n        projectDir\n      );\n\n      log(`Fetching webhooks for ${experienceName}`);\n\n      try {\n        const webhooks = await Webhooks.getWebhooksAsync(experienceName);\n        if (!webhooks || webhooks.length === 0) {\n          log(chalk.bold(\"You don't have any webhook set for this project.\"));\n        } else {\n          for (const webhook of webhooks) {\n            const { event, url, secret } = webhook;\n            log();\n            log(`Webhook type: ${chalk.bold(event)}`);\n            log(`Webhook URL: ${chalk.bold(url)}`);\n            log(`Webhook secret: ${chalk.bold(secret)}`);\n          }\n        }\n      } catch (e) {\n        log.error(e);\n        throw new Error('Unable to fetch webhooks for this project.');\n      }\n    }, true);\n\n  program\n    .command('webhooks:clear [project-dir]')\n    .option('--event <webhook-type>', 'Type of webhook: [build].')\n    .description(`Clear a webhook associated with this project.`)\n    .asyncActionProjectDir(async (projectDir, options) => {\n      const event = _sanitizeEvent(options.event);\n      const { args: { remoteFullPackageName: experienceName } } = await Exp.getPublishInfoAsync(\n        projectDir\n      );\n\n      log(`Clearing webhooks for ${experienceName}`);\n\n      try {\n        await Webhooks.deleteWebhooksAsync(experienceName, event);\n      } catch (e) {\n        log.error(e);\n        throw new Error('Unable to clear webhook and secret for this project.');\n      }\n      log('All done!');\n    }, true);\n};\n\nfunction _sanitizeOptions(options) {\n  const { url, secret, event: _event = 'build' } = options;\n\n  const event = _sanitizeEvent(_event, true);\n\n  if (!url) {\n    throw new Error('You must provide --url parameter');\n  } else {\n    try {\n      // eslint-disable-next-line no-new\n      new URL(url);\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw new Error(\n          'The provided webhook URL is invalid and must be an absolute URL, including a scheme.'\n        );\n      } else {\n        throw err;\n      }\n    }\n\n    if (secret) {\n      const secretString = String(secret);\n      if (secretString.length < 16 || secretString.length > 1000) {\n        throw new Error('Webhook secret has be at least 16 and not more than 1000 characters long');\n      }\n    }\n  }\n\n  return { url, secret, event };\n}\n\nfunction _sanitizeEvent(event, required = false) {\n  if (!event) {\n    if (required) {\n      throw new Error('Webhook type has to be provided');\n    } else {\n      // we don't have anything to sanitize here, continue\n      return event;\n    }\n  }\n\n  if (!_.includes(WEBHOOK_TYPES, event)) {\n    throw new Error(`Unsupported webhook type: ${event}`);\n  }\n\n  return event;\n}\n\nasync function _askForSecret() {\n  const { secret } = await inquirer.prompt({\n    type: 'password',\n    name: 'secret',\n    message: 'Webhook secret (at least 16 and not more than 1000 characters):',\n  });\n  if (secret.length < 16 || secret.length > 1000) {\n    log.error('Webhook secret has be at least 16 and not more than 1000 characters long');\n    return await _askForSecret();\n  } else {\n    return secret;\n  }\n}\n"],"sourceRoot":"/exp@57.2.1/src"}