{"version":3,"sources":["expo_commands/start.js"],"names":["projectDir","options","optsAsync","gray","root","resolve","startOpts","clear","reset","maxWorkers","startAsync","devToolsUrl","constructManifestUrlAsync","url","getRecipient","sendTo","recipient","sendUrlAsync","handleMobileOptsAsync","readConfigJsonAsync","exp","underline","nonInteractive","parent","isDetached","getAsync","bold","wait","newLine","printQRCode","nested","green","action","program","command","alias","description","option","urlOpts","allowOffline","asyncActionProjectDir"],"mappings":"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","file":"../../expo_commands/start.js","sourcesContent":["/**\n * @flow\n */\n\nimport { DevToolsServer } from '@expo/dev-tools';\nimport { ProjectUtils, ProjectSettings, Project, UserSettings, UrlUtils } from 'xdl';\nimport chalk from 'chalk';\nimport opn from 'opn';\nimport path from 'path';\n\nimport prompt from '../prompt';\nimport log from '../log';\nimport sendTo from '../sendTo';\nimport { installExitHooks } from '../exit';\nimport urlOpts from '../urlOpts';\nimport * as TerminalUI from './start/TerminalUI';\n\nasync function action(projectDir, options) {\n  installExitHooks(projectDir);\n\n  await urlOpts.optsAsync(projectDir, options);\n\n  log(chalk.gray('Starting project at', projectDir));\n\n  let root = path.resolve(projectDir);\n  let startOpts = {};\n  if (options.clear) {\n    startOpts.reset = true;\n  }\n\n  if (options.maxWorkers) {\n    startOpts.maxWorkers = options.maxWorkers;\n  }\n\n  let devToolsUrl = await DevToolsServer.startAsync(root);\n  await Project.startAsync(root, startOpts);\n\n  const url = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n  const recipient = await sendTo.getRecipient(options.sendTo);\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  await urlOpts.handleMobileOptsAsync(projectDir, options);\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n\n  log(`Expo DevTools is running at ${chalk.underline(devToolsUrl)}`);\n  const nonInteractive = options.parent && options.parent.nonInteractive;\n  if (!nonInteractive && !exp.isDetached) {\n    if (await UserSettings.getAsync('openDevToolsAtStartup', true)) {\n      log(`Opening DevTools in the browser... (press ${chalk.bold`shift-d`} to disable)`);\n      opn(devToolsUrl, { wait: false });\n    } else {\n      log(\n        `Press ${chalk.bold`d`} to open DevTools now, or ${chalk.bold`shift-d`} to always open it automatically.`\n      );\n    }\n    await TerminalUI.startAsync(projectDir);\n  } else {\n    if (!exp.isDetached) {\n      log.newLine();\n      urlOpts.printQRCode(url);\n    }\n    log(`Your app is running at ${chalk.underline(url)}`);\n  }\n\n  log.nested(chalk.green('Logs for your project will appear below. Press Ctrl+C to exit.'));\n}\n\nexport default (program: any) => {\n  program\n    .command('start [project-dir]')\n    .alias('r')\n    .description('Starts or restarts a local server for your app and gives you a URL to it')\n    .option('-s, --send-to [dest]', 'A phone number or e-mail address to send a link to')\n    .option('-c, --clear', 'Clear the React Native packager cache')\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(action, true, true);\n};\n"],"sourceRoot":"/exp@57.2.1/src"}