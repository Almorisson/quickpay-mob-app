{"version":3,"sources":["expo_commands/eject/Eject.js"],"names":["projectRoot","options","filesUsingExpoSdk","filesWithExpo","usingExpo","length","expoSdkWarning","bold","filename","cyan","yellow","italic","reactNativeOptionMessage","questions","type","name","message","default","choices","value","ejectMethod","nonInteractiveHelp","exists","resolve","useYarn","npmOrYarn","findConfigFileAsync","configPath","configName","readConfigJsonAsync","exp","pkgJson","pkg","JSON","readFile","parse","appJson","Error","displayName","validate","s","stripDashes","undefined","indexOf","expo","writeFile","green","ejectCommand","ejectArgs","sync","stdio","status","red","process","exit","newDevDependencies","projectBabelPath","projectBabelRc","toString","babelRcJson","presets","includes","map","preset","push","main","dependencies","devDependencies","scripts","start","ios","android","jest","eject","gteSdkVersion","lolThatsSomeComplexCode","args","stdin","stderr","detachAsync","ejectAsync","findJavaScriptProjectFilesInRoot","projectJsFiles","all","f","buf","i","contents","jsFileContents","filesUsingExpo","requires","findAll","sort","root","stat","stats","isFile","endsWith","isDirectory","readdir","children","join","jsFilesInChildren","concat","apply","ret","c"],"mappings":"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","file":"../../../expo_commands/eject/Eject.js","sourcesContent":["// @flow\n\nimport chalk from 'chalk';\nimport fse from 'fs-extra';\nimport matchRequire from 'match-require';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport spawn from 'cross-spawn';\nimport { ProjectUtils, Detach, Versions } from 'xdl';\nimport log from '../../log';\n\nimport prompt from '../../prompt';\nimport { loginOrRegisterIfLoggedOut } from '../../accounts';\n\nexport async function ejectAsync(projectRoot: string, options) {\n  const filesWithExpo = await filesUsingExpoSdk(projectRoot);\n  const usingExpo = filesWithExpo.length > 0;\n\n  let expoSdkWarning;\n  if (usingExpo) {\n    expoSdkWarning = `${chalk.bold(\n      'Warning!'\n    )} We found at least one file where your project imports the Expo SDK:\n`;\n\n    for (let filename of filesWithExpo) {\n      expoSdkWarning += `  ${chalk.cyan(filename)}\\n`;\n    }\n\n    expoSdkWarning += `\n${chalk.yellow.bold(\n      'If you choose the \"plain\" React Native option below, these imports will stop working.'\n    )}`;\n  } else {\n    expoSdkWarning = `\\\nWe didn't find any uses of the Expo SDK in your project, so you should be fine to eject to\n\"Plain\" React Native. (This check isn't very sophisticated, though.)`;\n  }\n\n  log(\n    `\n${expoSdkWarning}\nWe ${chalk.italic('strongly')} recommend that you read this document before you proceed:\n  ${chalk.cyan(\n    'https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md'\n  )}\nEjecting is permanent! Please be careful with your selection.\n`\n  );\n\n  let reactNativeOptionMessage = \"React Native: I'd like a regular React Native project.\";\n\n  if (usingExpo) {\n    reactNativeOptionMessage =\n      chalk.italic(\n        \"(WARNING: See above message for why this option may break your project's build)\\n  \"\n      ) + reactNativeOptionMessage;\n  }\n\n  const questions = [\n    {\n      type: 'list',\n      name: 'ejectMethod',\n      message: 'How would you like to eject from create-react-native-app?',\n      default: usingExpo ? 'expoKit' : 'plain',\n      choices: [\n        {\n          name: reactNativeOptionMessage,\n          value: 'plain',\n        },\n        {\n          name:\n            \"ExpoKit: I'll create or log in with an Expo account to use React Native and the Expo SDK.\",\n          value: 'expoKit',\n        },\n        {\n          name: \"Cancel: I'll continue with my current project structure.\",\n          value: 'cancel',\n        },\n      ],\n    },\n  ];\n\n  const ejectMethod =\n    options.ejectMethod ||\n    (await prompt(questions, {\n      nonInteractiveHelp:\n        'Please specify eject method (expoKit, plain) with --eject-method option.',\n    })).ejectMethod;\n\n  if (ejectMethod === 'plain') {\n    const useYarn = await fse.exists(path.resolve('yarn.lock'));\n    const npmOrYarn = useYarn ? 'yarn' : 'npm';\n    const { configPath, configName } = await ProjectUtils.findConfigFileAsync(projectRoot);\n    const { exp, pkg: pkgJson } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    const appJson = configName === 'app.json' ? JSON.parse(await fse.readFile(configPath)) : {};\n    if (!exp) throw new Error(`Couldn't read ${configName}`);\n    if (!pkgJson) throw new Error(`Couldn't read package.json`);\n\n    let { displayName, name } = appJson;\n    if (!displayName || !name) {\n      log(\"We have a couple of questions to ask you about how you'd like to name your app:\");\n      ({ displayName, name } = await prompt(\n        [\n          {\n            name: 'displayName',\n            message: \"What should your app appear as on a user's home screen?\",\n            default: name || exp.name,\n            validate: s => {\n              return s.length > 0;\n            },\n          },\n          {\n            name: 'name',\n            message: 'What should your Android Studio and Xcode projects be called?',\n            default: pkgJson.name ? stripDashes(pkgJson.name) : undefined,\n            validate: s => {\n              return s.length > 0 && s.indexOf('-') === -1 && s.indexOf(' ') === -1;\n            },\n          },\n        ],\n        {\n          nonInteractiveHelp: 'Please specify \"displayName\" and \"name\" in app.json.',\n        }\n      ));\n      appJson.displayName = displayName;\n      appJson.name = name;\n    }\n    delete appJson.expo;\n    log('Writing app.json...');\n    // write the updated app.json file\n    await fse.writeFile(path.resolve('app.json'), JSON.stringify(appJson, null, 2));\n    log(chalk.green('Wrote to app.json, please update it manually in the future.'));\n    const ejectCommand = 'node';\n    const ejectArgs = [\n      path.resolve('node_modules', 'react-native', 'local-cli', 'cli.js'),\n      'eject',\n    ];\n\n    const { status } = spawn.sync(ejectCommand, ejectArgs, {\n      stdio: 'inherit',\n    });\n\n    if (status !== 0) {\n      log(chalk.red(`Eject failed with exit code ${status}, see above output for any issues.`));\n      log(chalk.yellow('You may want to delete the `ios` and/or `android` directories.'));\n      process.exit(1);\n    } else {\n      log('Successfully copied template native code.');\n    }\n\n    const newDevDependencies = [];\n    // Try to replace the Babel preset.\n    try {\n      const projectBabelPath = path.resolve('.babelrc');\n      // If .babelrc doesn't exist, the app is using the default config and\n      // editing the config is not necessary.\n      if (await fse.exists(projectBabelPath)) {\n        const projectBabelRc = (await fse.readFile(projectBabelPath)).toString();\n\n        // We assume the .babelrc is valid JSON. If we can't parse it (e.g. if\n        // it's JSON5) the error is caught and a message asking to change it\n        // manually gets printed.\n        const babelRcJson = JSON.parse(projectBabelRc);\n        if (babelRcJson.presets && babelRcJson.presets.includes('babel-preset-expo')) {\n          babelRcJson.presets = babelRcJson.presets.map(\n            preset =>\n              preset === 'babel-preset-expo'\n                ? 'babel-preset-react-native-stage-0/decorator-support'\n                : preset\n          );\n          await fse.writeFile(projectBabelPath, JSON.stringify(babelRcJson, null, 2));\n          newDevDependencies.push('babel-preset-react-native-stage-0');\n          log(\n            chalk.green(\n              `Babel preset changed to \\`babel-preset-react-native-stage-0/decorator-support\\`.`\n            )\n          );\n        }\n      }\n    } catch (e) {\n      log(\n        chalk.yellow(\n          `We had an issue preparing your .babelrc for ejection.\nIf you have a .babelrc in your project, make sure to change the preset\nfrom \\`babel-preset-expo\\` to \\`babel-preset-react-native-stage-0/decorator-support\\`.`\n        )\n      );\n      log(chalk.red(e));\n    }\n\n    delete pkgJson.main;\n\n    // NOTE: expo won't work after performing a plain eject, so we should delete this\n    // it will be a better error message for the module to not be found than for whatever problems\n    // missing native modules will cause\n    delete pkgJson.dependencies.expo;\n    if (pkgJson.devDependencies) {\n      delete pkgJson.devDependencies['react-native-scripts'];\n      delete pkgJson.devDependencies['jest-expo'];\n    }\n    if (!pkgJson.scripts) {\n      pkgJson.scripts = {};\n    }\n    pkgJson.scripts.start = 'react-native start';\n    pkgJson.scripts.ios = 'react-native run-ios';\n    pkgJson.scripts.android = 'react-native run-android';\n\n    if (pkgJson.jest && pkgJson.jest.preset === 'jest-expo') {\n      pkgJson.jest.preset = 'react-native';\n      newDevDependencies.push('jest-react-native');\n    } else if (pkgJson.jest) {\n      log(\n        `${chalk.bold(\n          'Warning'\n        )}: it looks like you've changed the Jest preset from jest-expo to ${pkgJson.jest\n          .preset}. We recommend you make sure this Jest preset is compatible with ejected apps.`\n      );\n    }\n\n    // no longer relevant to an ejected project (maybe build is?)\n    delete pkgJson.scripts.eject;\n\n    log(`Updating your ${npmOrYarn} scripts in package.json...`);\n\n    await fse.writeFile(path.resolve('package.json'), JSON.stringify(pkgJson, null, 2));\n\n    log(chalk.green('Your package.json is up to date!'));\n\n    // Starting from react-native 0.49.x (SDK 22), react-native eject template includes this out of the box.\n    if (!Versions.gteSdkVersion(exp, '22.0.0')) {\n      log(`Adding entry point...`);\n      const lolThatsSomeComplexCode = `import { AppRegistry } from 'react-native';\nimport App from './App';\nAppRegistry.registerComponent('${appJson.name}', () => App);\n`;\n      await fse.writeFile(path.resolve('index.js'), lolThatsSomeComplexCode);\n      log(chalk.green('Added new entry points!'));\n    }\n\n    log(`\nNote that using \\`${npmOrYarn} start\\` will now require you to run Xcode and/or\nAndroid Studio to build the native code for your project.`);\n\n    log('Removing node_modules...');\n    rimraf.sync(path.resolve('node_modules'));\n    if (useYarn) {\n      log('Installing packages with yarn...');\n      const args = newDevDependencies.length > 0 ? ['add', '--dev', ...newDevDependencies] : [];\n      spawn.sync('yarnpkg', args, { stdio: 'inherit' });\n    } else {\n      // npm prints the whole package tree to stdout unless we ignore it.\n      const stdio = [process.stdin, 'ignore', process.stderr];\n\n      log('Installing existing packages with npm...');\n      spawn.sync('npm', ['install'], { stdio });\n\n      if (newDevDependencies.length > 0) {\n        log('Installing new packages with npm...');\n        spawn.sync('npm', ['install', '--save-dev', ...newDevDependencies], {\n          stdio,\n        });\n      }\n    }\n  } else if (ejectMethod === 'expoKit') {\n    await loginOrRegisterIfLoggedOut();\n    await Detach.detachAsync(projectRoot, options);\n  } else if (ejectMethod === 'cancel') {\n    // we don't want to print the survey for cancellations\n    log('OK! If you change your mind you can run this command again.');\n    return;\n  } else {\n    throw new Error(\n      `Unrecognized eject method \"${ejectMethod}\". Valid options are: expoKit, plain.`\n    );\n  }\n\n  log(\n    `${chalk.green('Ejected successfully!')}\nPlease consider letting us know why you ejected in this survey:\n  ${chalk.cyan('https://goo.gl/forms/iD6pl218r7fn9N0d2')}`\n  );\n}\n\nasync function filesUsingExpoSdk(projectRoot: string): Promise<Array<string>> {\n  const projectJsFiles = await findJavaScriptProjectFilesInRoot(projectRoot);\n\n  const jsFileContents = (await Promise.all(\n    projectJsFiles.map(f => fse.readFile(f))\n  )).map((buf, i) => {\n    return {\n      filename: projectJsFiles[i],\n      contents: buf.toString(),\n    };\n  });\n\n  const filesUsingExpo = [];\n\n  for (let { filename, contents } of jsFileContents) {\n    const requires = matchRequire.findAll(contents);\n\n    if (requires.includes('expo')) {\n      filesUsingExpo.push(filename);\n    }\n  }\n\n  filesUsingExpo.sort();\n\n  return filesUsingExpo;\n}\n\nfunction stripDashes(s: string): string {\n  let ret = '';\n\n  for (let c of s) {\n    if (c !== ' ' && c !== '-') {\n      ret += c;\n    }\n  }\n\n  return ret;\n}\n\nasync function findJavaScriptProjectFilesInRoot(root: string): Promise<Array<string>> {\n  // ignore node_modules\n  if (root.includes('node_modules')) {\n    return [];\n  }\n\n  const stats = await fse.stat(root);\n\n  if (stats.isFile()) {\n    if (root.endsWith('.js')) {\n      return [root];\n    } else {\n      return [];\n    }\n  } else if (stats.isDirectory()) {\n    const children = await fse.readdir(root);\n\n    // we want to do this concurrently in large project folders\n    const jsFilesInChildren = await Promise.all(\n      children.map(f => findJavaScriptProjectFilesInRoot(path.join(root, f)))\n    );\n\n    return [].concat.apply([], jsFilesInChildren);\n  } else {\n    // lol it's not a file or directory, we can't return a honey badger, 'cause it don't give a\n    return [];\n  }\n}\n"],"sourceRoot":"/exp@57.2.1/src"}