{"version":3,"sources":["exp_commands/start.js"],"names":["projectDir","options","optsAsync","gray","root","resolve","startOpts","clear","reset","maxWorkers","startAsync","newLine","getManifestUrlWithFallbackAsync","url","isUrlFallback","readConfigJsonAsync","exp","isDetached","printQRCode","underline","setAsync","hostType","warn","getRecipient","sendTo","recipient","sendUrlAsync","handleMobileOptsAsync","green","action","program","command","alias","description","option","urlOpts","allowOffline","asyncActionProjectDir"],"mappings":";;;;;;;;;;;;;;;;;;;4IAeA,iBAAsBA,UAAtB,EAAkCC,OAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACE,0DAAiBD,UAAjB;;AADF;AAAA,mBAGQ,sCAAQE,SAAR,CAAkBF,UAAlB,EAA8BC,OAA9B,CAHR;;AAAA;;AAKE,+CAAI,kCAAME,IAAN,CAAW,kBAAX,EAA+BH,UAA/B,CAAJ;;AAEII,gBAPN,GAOa,cAAKC,OAAL,CAAaL,UAAb,CAPb;AAQMM,qBARN,GAQkB,EARlB;;AASE,gBAAIL,QAAQM,KAAZ,EAAmB;AACjBD,wBAAUE,KAAV,GAAkB,IAAlB;AACD;;AAED,gBAAIP,QAAQQ,UAAZ,EAAwB;AACtBH,wBAAUG,UAAV,GAAuBR,QAAQQ,UAA/B;AACD;;AAfH;AAAA,mBAiBQ,8BAAQC,UAAR,CAAmBN,IAAnB,EAAyBE,SAAzB,CAjBR;;AAAA;;AAmBE,+CAAI,gBAAJ;AACA,0CAAIK,OAAJ;;AApBF;AAAA,mBAsBqC,8BAAQC,+BAAR,CAAwCZ,UAAxC,CAtBrC;;AAAA;AAAA;AAsBQa,eAtBR,SAsBQA,GAtBR;AAsBaC,yBAtBb,SAsBaA,aAtBb;AAAA;AAAA,mBAwBsB,mCAAaC,mBAAb,CAAiCf,UAAjC,CAxBtB;;AAAA;AAAA;AAwBQgB,eAxBR,SAwBQA,GAxBR;;;AA0BE,gBAAI,CAACA,IAAIC,UAAT,EAAqB;AACnB,oDAAQC,WAAR,CAAoBL,GAApB;AACD;;AAED,+CAAI,kBAAkB,kCAAMM,SAAN,CAAgBN,GAAhB,CAAtB;;AA9BF,gBAgCOG,IAAIC,UAhCX;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiCU,gFAjCV;;AAAA;AAAA,iBAoCMH,aApCN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAqCU,sCAAgBM,QAAhB,CAAyBpB,UAAzB,EAAqC,EAAEqB,UAAU,KAAZ,EAArC,CArCV;;AAAA;;AAuCI,0CAAIC,IAAJ,CACE,kEACE,uDADF,GAEE,wDAHJ;;AAvCJ;AAAA;AAAA,mBA8C0B,oCAAOC,YAAP,CAAoBtB,QAAQuB,MAA5B,CA9C1B;;AAAA;AA8CQC,qBA9CR;;AAAA,iBA+CMA,SA/CN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgDU,oCAAOC,YAAP,CAAoBb,GAApB,EAAyBY,SAAzB,CAhDV;;AAAA;AAAA;AAAA,mBAmDQ,sCAAQE,qBAAR,CAA8B3B,UAA9B,EAA0CC,OAA1C,CAnDR;;AAAA;;AAqDE,+CAAI,kCAAM2B,KAAN,CAAY,gEAAZ,CAAJ;;AArDF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,M;;;;;;;AAXf;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;AACA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;kBA0De,UAACC,OAAD,EAAkB;AAC/BA,UACGC,OADH,CACW,qBADX,EAEGC,KAFH,CAES,GAFT,EAGGC,WAHH,CAGe,0EAHf,EAIGC,MAJH,CAIU,sBAJV,EAIkC,oDAJlC,EAKGA,MALH,CAKU,aALV,EAKyB,uCALzB;AAME;AANF,GAOGA,MAPH,CAOU,qBAPV,EAOiC,kDAPjC,EAQGC,OARH,GASGC,YATH,GAUGC,qBAVH,CAUyBR,MAVzB,EAUiC,IAVjC;AAWD,C","file":"../../exp_commands/start.js","sourcesContent":["/**\n * @flow\n */\n\nimport { ProjectUtils, ProjectSettings, Project } from 'xdl';\n\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport log from '../log';\nimport sendTo from '../sendTo';\nimport { installExitHooks } from '../exit';\nimport urlOpts from '../urlOpts';\nimport printRunInstructionsAsync from '../printRunInstructionsAsync';\n\nasync function action(projectDir, options) {\n  installExitHooks(projectDir);\n\n  await urlOpts.optsAsync(projectDir, options);\n\n  log(chalk.gray('Using project at', projectDir));\n\n  let root = path.resolve(projectDir);\n  let startOpts = {};\n  if (options.clear) {\n    startOpts.reset = true;\n  }\n\n  if (options.maxWorkers) {\n    startOpts.maxWorkers = options.maxWorkers;\n  }\n\n  await Project.startAsync(root, startOpts);\n\n  log('Expo is ready.');\n  log.newLine();\n\n  let { url, isUrlFallback } = await Project.getManifestUrlWithFallbackAsync(projectDir);\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n\n  if (!exp.isDetached) {\n    urlOpts.printQRCode(url);\n  }\n\n  log('Your URL is: ' + chalk.underline(url));\n\n  if (!exp.isDetached) {\n    await printRunInstructionsAsync();\n  }\n\n  if (isUrlFallback) {\n    await ProjectSettings.setAsync(projectDir, { hostType: 'lan' });\n\n    log.warn(\n      'Switched to a LAN URL because the tunnel appears to be down. ' +\n        'Only devices in the same network can access the app. ' +\n        'Restart with `exp start --tunnel` to try reconnecting.'\n    );\n  }\n\n  const recipient = await sendTo.getRecipient(options.sendTo);\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  await urlOpts.handleMobileOptsAsync(projectDir, options);\n\n  log(chalk.green('Logs for your project will appear below. Press Ctrl+C to exit.'));\n}\n\nexport default (program: any) => {\n  program\n    .command('start [project-dir]')\n    .alias('r')\n    .description('Starts or restarts a local server for your app and gives you a URL to it')\n    .option('-s, --send-to [dest]', 'A phone number or e-mail address to send a link to')\n    .option('-c, --clear', 'Clear the React Native packager cache')\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(action, true);\n};\n"],"sourceRoot":"/exp@57.2.1/src"}