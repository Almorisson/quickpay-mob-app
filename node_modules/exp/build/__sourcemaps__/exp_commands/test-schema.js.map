{"version":3,"sources":["exp_commands/test-schema.js"],"names":["projectDir","options","schema","validateWithSchemaFileAsync","schemaErrorMessage","assetsErrorMessage","process","exit","action","program","command","noHelp","option","asyncActionProjectDir"],"mappings":";;;;;;;;;;;;;;;;;;;4IAIA,iBAAsBA,UAAtB,EAAkCC,OAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAEQA,QAAQC,MAFhB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAG6D,6BAAOC,2BAAP,CACrDH,UADqD,EAErDC,QAAQC,MAF6C,CAH7D;;AAAA;AAAA;AAGYE,8BAHZ,SAGYA,kBAHZ;AAGgCC,8BAHhC,SAGgCA,kBAHhC;;AAOM,gBAAID,kBAAJ,EAAwB;AACtB,iDAAIA,kBAAJ;AACD,aAFD,MAEO,IAAIC,kBAAJ,EAAwB;AAC7B,iDAAIA,kBAAJ;AACD,aAFM,MAEA;AACL;AACD;AAbP;AAAA;;AAAA;AAeM;;AAfN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAkBI;;AAlBJ;AAoBEC,oBAAQC,IAAR;;AApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,M;;;;;;;AAJf;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;kBAyBe,mBAAW;AACxBC,UACGC,OADH,CACW,2BADX,EACwC,IADxC,EAC8C,EAAEC,QAAQ,IAAV,EAD9C,EAEGC,MAFH,CAEU,qBAFV,EAEiC,yDAFjC,EAGGC,qBAHH,CAGyBL,MAHzB,EAGiC,IAHjC,CAGsC,6BAHtC;AAID,C","file":"../../exp_commands/test-schema.js","sourcesContent":["import { Doctor } from 'xdl';\n\nimport log from '../log';\n\nasync function action(projectDir, options) {\n  try {\n    if (options.schema) {\n      let { schemaErrorMessage, assetsErrorMessage } = await Doctor.validateWithSchemaFileAsync(\n        projectDir,\n        options.schema\n      );\n      if (schemaErrorMessage) {\n        log(schemaErrorMessage);\n      } else if (assetsErrorMessage) {\n        log(assetsErrorMessage);\n      } else {\n        log(`Schema and app.json are valid`);\n      }\n    } else {\n      log(`No option provided`);\n    }\n  } catch (e) {\n    log(e);\n  }\n  process.exit();\n}\n\nexport default program => {\n  program\n    .command('test-schema [project-dir]', null, { noHelp: true })\n    .option('-s, --schema [path]', 'Validate the current directory against the given schema')\n    .asyncActionProjectDir(action, true /* skip project validation */);\n};\n"],"sourceRoot":"/exp@57.2.1/src"}