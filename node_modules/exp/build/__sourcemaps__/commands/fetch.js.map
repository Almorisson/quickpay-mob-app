{"version":3,"sources":["commands/fetch.js"],"names":["exportCertAsync","keystoreFile","keystorePassword","keyAlias","certFile","program","command","description","asyncActionProjectDir","projectDir","options","getPublishInfoAsync","args","username","remotePackageName","experienceName","remoteFullPackageName","bundleIdentifier","bundleIdentifierIOS","distOutputFile","resolve","pushOutputFile","credentialMetadata","platform","getCredentialsForPlatform","certP12","certPassword","certPrivateSigningKey","pushP12","pushPassword","pushPrivateSigningKey","provisioningProfile","teamId","undefined","writeFileSync","Buffer","from","keyPath","p","bold","Error","backupKeystoreOutputPath","backupExistingAndroidCredentials","outputPath","log","logSecrets","replace","data","readFileSync","googleHash","createHash","update","digest","toUpperCase","fbHash","code","warn","stdout","stderr","error","unlinkSync","err"],"mappings":"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","file":"../../commands/fetch.js","sourcesContent":["/**\n * @flow\n */\n\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport { Credentials, Exp } from 'xdl';\nimport crypto from 'crypto';\nimport spawnAsync from '@expo/spawn-async';\nimport log from '../log';\n\nfunction exportCertAsync(keystoreFile, keystorePassword, keyAlias, certFile) {\n  return spawnAsync('keytool', [\n    '-exportcert',\n    '-keystore',\n    keystoreFile,\n    '-storepass',\n    keystorePassword,\n    '-alias',\n    keyAlias,\n    '-file',\n    certFile,\n    '-noprompt',\n    '-storetype',\n    'JKS',\n  ]);\n}\n\nexport default (program: any) => {\n  program\n    .command('fetch:ios:certs [project-dir]')\n    .description(\n      `Fetch this project's iOS certificates and provisioning profile. Writes certificates to PROJECT_DIR/PROJECT_NAME_(dist|push).p12 and prints passwords to stdout.`\n    )\n    .asyncActionProjectDir(async (projectDir, options) => {\n      const {\n        args: {\n          username,\n          remotePackageName,\n          remoteFullPackageName: experienceName,\n          bundleIdentifierIOS: bundleIdentifier,\n        },\n      } = await Exp.getPublishInfoAsync(projectDir);\n\n      let distOutputFile = path.resolve(projectDir, `${remotePackageName}_dist.p12`);\n      let pushOutputFile = path.resolve(projectDir, `${remotePackageName}_push.p12`);\n\n      const credentialMetadata = { username, experienceName, platform: 'ios', bundleIdentifier };\n\n      log(`Retreiving iOS credentials for ${experienceName}`);\n\n      try {\n        const {\n          certP12,\n          certPassword,\n          certPrivateSigningKey,\n          pushP12,\n          pushPassword,\n          pushPrivateSigningKey,\n          provisioningProfile,\n          teamId,\n        } = await Credentials.getCredentialsForPlatform(credentialMetadata);\n        // if undefines because some people might have pre-local-auth as default credentials.\n        if (teamId !== undefined) {\n          log(`These credentials are associated with Apple Team ID: ${teamId}`);\n        }\n        log(`Writing distribution cert to ${distOutputFile}...`);\n        fs.writeFileSync(distOutputFile, Buffer.from(certP12, 'base64'));\n        if (certPrivateSigningKey !== undefined) {\n          let keyPath = path.resolve(projectDir, `${remotePackageName}_dist_cert_private.key`);\n          fs.writeFileSync(keyPath, certPrivateSigningKey);\n        }\n        log('Done writing distribution cert credentials to disk.');\n        log(`Writing push cert to ${pushOutputFile}...`);\n        fs.writeFileSync(pushOutputFile, Buffer.from(pushP12, 'base64'));\n        if (pushPrivateSigningKey !== undefined) {\n          let keyPath = path.resolve(projectDir, `${remotePackageName}_push_cert_private.key`);\n          fs.writeFileSync(keyPath, pushPrivateSigningKey);\n        }\n        log('Done writing push cert credentials to disk.');\n        if (provisioningProfile !== undefined) {\n          let p = path.resolve(projectDir, `${remotePackageName}.mobileprovision`);\n          log(`Writing provisioning profile to ${p}...`);\n          fs.writeFileSync(p, Buffer.from(provisioningProfile, 'base64'));\n          log('Done writing provisioning profile to disk');\n        }\n        log(`Save these important values as well:\n\nDistribution p12 password: ${chalk.bold(certPassword)}\nPush p12 password:         ${chalk.bold(pushPassword)}\n`);\n      } catch (e) {\n        throw new Error('Unable to fetch credentials for this project. Are you sure they exist?');\n      }\n\n      log('All done!');\n    }, true);\n\n  program\n    .command('fetch:android:keystore [project-dir]')\n    .description(\n      \"Fetch this project's Android keystore. Writes keystore to PROJECT_DIR/PROJECT_NAME.jks and prints passwords to stdout.\"\n    )\n    .asyncActionProjectDir(async (projectDir, options) => {\n      const {\n        args: { username, remotePackageName, remoteFullPackageName: experienceName },\n      } = await Exp.getPublishInfoAsync(projectDir);\n\n      const backupKeystoreOutputPath = path.resolve(projectDir, `${remotePackageName}.jks`);\n      await Credentials.backupExistingAndroidCredentials({\n        outputPath: backupKeystoreOutputPath,\n        username,\n        experienceName,\n        log,\n      });\n    }, true);\n\n  program\n    .command('fetch:android:hashes [project-dir]')\n    .description(\n      \"Fetch this project's Android key hashes needed to setup Google/Facebook authentication.\"\n    )\n    .asyncActionProjectDir(async (projectDir, options) => {\n      const {\n        args: { username, remotePackageName, remoteFullPackageName: experienceName },\n      } = await Exp.getPublishInfoAsync(projectDir);\n\n      const outputPath = path.resolve(projectDir, `${remotePackageName}.tmp.jks`);\n      const { keystorePassword, keyAlias } = await Credentials.backupExistingAndroidCredentials({\n        outputPath,\n        username,\n        experienceName,\n        log,\n        logSecrets: false,\n      });\n      const certFile = outputPath.replace('jks', 'cer');\n      try {\n        await exportCertAsync(outputPath, keystorePassword, keyAlias, certFile);\n        const data = fs.readFileSync(certFile);\n        const googleHash = crypto\n          .createHash('sha1')\n          .update(data)\n          .digest('hex')\n          .toUpperCase();\n        const fbHash = crypto\n          .createHash('sha1')\n          .update(data)\n          .digest('base64');\n        log(`Google Certificate Fingerprint:  ${googleHash.replace(/(.{2}(?!$))/g, '$1:')}`);\n        log(`Google Certificate Hash:         ${googleHash}`);\n        log(`Facebook Key Hash:               ${fbHash}`);\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          log.warn('Are you sure you have keytool installed?');\n          log('keytool is part of openJDK: http://openjdk.java.net/');\n          log('Also make sure that keytool is in your PATH after installation.');\n        }\n        if (err.stdout) {\n          log(err.stdout);\n        }\n        if (err.stderr) {\n          log.error(err.stderr);\n        }\n        throw err;\n      } finally {\n        try {\n          fs.unlinkSync(certFile);\n        } catch (err) {\n          if (err.code !== 'ENOENT') {\n            log.error(err);\n          }\n        }\n        try {\n          fs.unlinkSync(outputPath);\n        } catch (err) {\n          if (err.code !== 'ENOENT') {\n            log.error(err);\n          }\n        }\n      }\n\n      log('All done!');\n    }, true);\n};\n"],"sourceRoot":"/exp@57.2.1/src"}