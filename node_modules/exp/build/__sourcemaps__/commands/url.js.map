{"version":3,"sources":["commands/url.js"],"names":["projectDir","options","optsAsync","currentStatus","parent","name","constructManifestUrlAsync","url","newLine","printQRCode","underline","raw","handleMobileOptsAsync","action","logArtifactUrl","publicUrl","isHttps","buildAsync","current","mode","res","compose","get","head","filter","platform","job","getOr","nested","Error","program","command","alias","description","urlOpts","allowOffline","asyncActionProjectDir","option"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;6IAgCA,kBAAsBA,UAAtB,EAAkCC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQ,sCAAQC,SAAR,CAAkBF,UAAlB,EAA8BC,OAA9B,CADR;;AAAA;AAAA;AAAA,mBAGa,8BAAQE,aAAR,CAAsBH,UAAtB,CAHb;;AAAA;AAAA;;AAAA,mCAGoD,SAHpD;AAAA;AAAA;AAAA;;AAAA,kBAIU,oDACJ,aADI,qDAE8CC,QAAQG,MAAR,CAAeC,IAF7D,cAJV;;AAAA;AAAA;AAAA,mBASoB,+BAASC,yBAAT,CAAmCN,UAAnC,CATpB;;AAAA;AASQO,eATR;;;AAWE,0CAAIC,OAAJ;AACA,kDAAQC,WAAR,CAAoBF,GAApB;;AAEA,+CAAI,oBAAoB,kCAAMG,SAAN,CAAgBH,GAAhB,CAApB,GAA2C,IAA/C;AACA,0CAAII,GAAJ,CAAQJ,GAAR;;AAfF;AAAA,mBAiBQ,gFAjBR;;AAAA;AAAA;AAAA,mBAkBQ,sCAAQK,qBAAR,CAA8BZ,UAA9B,EAA0CC,OAA1C,CAlBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeY,M;;;;;;;AAhCf;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB;AAAA;AAAA,8IAAY,iBAAOd,UAAP,EAAmBC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAC7BA,QAAQc,SAAR,IAAqB,CAAC,+BAASC,OAAT,CAAiBf,QAAQc,SAAzB,CADO;AAAA;AAAA;AAAA;;AAAA,oBAEzB,oDAAiB,oBAAjB,EAAuC,yCAAvC,CAFyB;;AAAA;AAAA;AAAA,qBAIf,8BAAQE,UAAR,CAAmBjB,UAAnB;AAChBkB,yBAAS,KADO;AAEhBC,sBAAM;AAFU,iBAGZlB,QAAQc,SAAR,GAAoB,EAAEA,WAAWd,QAAQc,SAArB,EAApB,GAAuD,EAH3C,EAJe;;AAAA;AAI3BK,iBAJ2B;AAS3Bb,iBAT2B,GASrB,4BAAGc,OAAH,CACV,4BAAGC,GAAH,CAAO,CAAC,WAAD,EAAc,KAAd,CAAP,CADU,EAEV,4BAAGC,IAFO,EAGV,4BAAGC,MAAH,CAAU;AAAA,uBAAOC,YAAYC,IAAID,QAAJ,KAAiBA,QAApC;AAAA,eAAV,CAHU,EAIV,4BAAGE,KAAH,CAAS,EAAT,EAAa,MAAb,CAJU,EAKVP,GALU,CATqB;;AAAA,mBAe7Bb,GAf6B;AAAA;AAAA;AAAA;;AAgB/B,4CAAIqB,MAAJ,CAAWrB,GAAX;AAhB+B;AAAA;;AAAA;AAAA,oBAkBzB,IAAIsB,KAAJ,SAAgBJ,QAAhB,2CAA8DA,QAA9D,sBAlByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;kBA2Ce,mBAAW;AACxBK,UACGC,OADH,CACW,mBADX,EAEGC,KAFH,CAES,GAFT,EAGGC,WAHH,CAGe,2DAHf,EAIGC,OAJH,GAKGC,YALH,GAMGC,qBANH,CAMyBvB,MANzB,EAMiC,4BAA6B,IAN9D,EAMoE,oBAAqB,IANzF;;AAQAiB,UACGC,OADH,CACW,uBADX,EAEGM,MAFH,CAEU,oBAFV,EAEgC,iEAFhC,EAGGJ,WAHH,CAGe,gFAHf,EAIGG,qBAJH,CAIyBtB,eAAe,KAAf,CAJzB,EAIgD,IAJhD;;AAMAgB,UACGC,OADH,CACW,uBADX,EAEGM,MAFH,CAEU,oBAFV,EAEgC,iEAFhC,EAGGJ,WAHH,CAII,oFAJJ,EAMGG,qBANH,CAMyBtB,eAAe,SAAf,CANzB,EAMoD,IANpD;AAOD,C","file":"../../commands/url.js","sourcesContent":["import chalk from 'chalk';\nimport fp from 'lodash/fp';\n\nimport { Project, UrlUtils } from 'xdl';\n\nimport CommandError from '../CommandError';\nimport log from '../log';\nimport urlOpts from '../urlOpts';\nimport printRunInstructionsAsync from '../printRunInstructionsAsync';\n\nconst logArtifactUrl = platform => async (projectDir, options) => {\n  if (options.publicUrl && !UrlUtils.isHttps(options.publicUrl)) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  }\n  const res = await Project.buildAsync(projectDir, {\n    current: false,\n    mode: 'status',\n    ...(options.publicUrl ? { publicUrl: options.publicUrl } : {}),\n  });\n  const url = fp.compose(\n    fp.get(['artifacts', 'url']),\n    fp.head,\n    fp.filter(job => platform && job.platform === platform),\n    fp.getOr([], 'jobs')\n  )(res);\n  if (url) {\n    log.nested(url);\n  } else {\n    throw new Error(`No ${platform} binary file found. Use \"exp build:${platform}\" to create one.`);\n  }\n};\n\nasync function action(projectDir, options) {\n  await urlOpts.optsAsync(projectDir, options);\n\n  if ((await Project.currentStatus(projectDir)) !== 'running') {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Project is not running. Please start it with \\`${options.parent.name} start\\`.`\n    );\n  }\n  const url = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n  log.newLine();\n  urlOpts.printQRCode(url);\n\n  log('Your URL is\\n\\n' + chalk.underline(url) + '\\n');\n  log.raw(url);\n\n  await printRunInstructionsAsync();\n  await urlOpts.handleMobileOptsAsync(projectDir, options);\n}\n\nexport default program => {\n  program\n    .command('url [project-dir]')\n    .alias('u')\n    .description('Displays the URL you can use to view your project in Expo')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(action, /* skipProjectValidation: */ true, /* skipAuthCheck: */ true);\n\n  program\n    .command('url:ipa [project-dir]')\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .description('Displays the standalone iOS binary URL you can use to download your app binary')\n    .asyncActionProjectDir(logArtifactUrl('ios'), true);\n\n  program\n    .command('url:apk [project-dir]')\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .description(\n      'Displays the standalone Android binary URL you can use to download your app binary'\n    )\n    .asyncActionProjectDir(logArtifactUrl('android'), true);\n};\n"],"sourceRoot":"/exp@57.2.1/src"}