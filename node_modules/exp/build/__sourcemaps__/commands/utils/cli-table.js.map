{"version":3,"sources":["commands/utils/cli-table.js"],"names":["printTableJsonArray","printTableJson","headers","jsonArray","colWidths","table","head","forEach","push","map","json","header","toString","VERTICAL_CELL_WIDTH","header1","header2","key","value","String","replace","RegExp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAEgBA,mB,GAAAA,mB;QAcAC,c,GAAAA,c;;;;AAhBhB;AAAA;AAAA;;;;AAEO,SAASD,mBAAT,CAA6BE,OAA7B,EAAsCC,SAAtC,EAAiDC,SAAjD,EAA4D;AACjE,MAAIC,QAAQ,4CAAa;AACvBC,UAAMJ,OADiB;AAEvBE;AAFuB,GAAb,CAAZ;;AAKAD,YAAUI,OAAV,CAAkB,gBAAQ;AACxBF,UAAMG,IAAN,CAAWN,QAAQO,GAAR,CAAY;AAAA,aAAWC,KAAKC,MAAL,IAAeD,KAAKC,MAAL,CAAf,GAA8B,EAAzC;AAAA,KAAZ,CAAX;AACD,GAFD;;AAIA,SAAON,MAAMO,QAAN,EAAP;AACD;;AAED,IAAMC,sBAAsB,EAA5B;AACO,SAASZ,cAAT,CAAwBS,IAAxB,EAA8BI,OAA9B,EAAuCC,OAAvC,EAAgD;AACrD,MAAIV,QAAQ,6CAAZ;AACA,MAAIS,WAAWC,OAAf,EAAwB;AACtBD,cAAUA,UAAUA,OAAV,GAAoB,EAA9B;AACAC,cAAUA,UAAUA,OAAV,GAAoB,EAA9B;AACAV,UAAMG,IAAN,+DAAcM,OAAd,EAAwBC,OAAxB;AACD;AACD,6CAAeL,IAAf,EAAqBH,OAArB,CAA6B,gBAAkB;AAAA;AAAA,QAAhBS,GAAgB;AAAA,QAAXC,KAAW;;AAC7C;AACA,QAAI,QAAOA,KAAP,2EAAOA,KAAP,OAAiB,QAArB,EAA+B;AAC7BA,cAAQ,+CAAeA,KAAf,CAAR;AACD,KAFD,MAEO;AACLA,cAAQC,OAAOD,KAAP,CAAR;AACD;AACD;AACAD,UAAMA,IAAIG,OAAJ,CAAY,IAAIC,MAAJ,CAAW,QAAQP,mBAAR,GAA8B,IAAzC,EAA+C,GAA/C,CAAZ,EAAiE,MAAjE,CAAN;AACAI,YAAQA,MAAME,OAAN,CAAc,IAAIC,MAAJ,CAAW,QAAQP,mBAAR,GAA8B,IAAzC,EAA+C,GAA/C,CAAd,EAAmE,MAAnE,CAAR;AACAR,UAAMG,IAAN,+DAAcQ,GAAd,EAAoBC,KAApB;AACD,GAXD;;AAaA,SAAOZ,MAAMO,QAAN,EAAP;AACD","file":"../../../commands/utils/cli-table.js","sourcesContent":["import CliTable from 'cli-table';\n\nexport function printTableJsonArray(headers, jsonArray, colWidths) {\n  let table = new CliTable({\n    head: headers,\n    colWidths,\n  });\n\n  jsonArray.forEach(json => {\n    table.push(headers.map(header => (json[header] ? json[header] : '')));\n  });\n\n  return table.toString();\n}\n\nconst VERTICAL_CELL_WIDTH = 80;\nexport function printTableJson(json, header1, header2) {\n  let table = new CliTable();\n  if (header1 || header2) {\n    header1 = header1 ? header1 : '';\n    header2 = header2 ? header2 : '';\n    table.push({ [header1]: header2 });\n  }\n  Object.entries(json).forEach(([key, value]) => {\n    // check if value is a JSON\n    if (typeof value === 'object') {\n      value = JSON.stringify(value);\n    } else {\n      value = String(value);\n    }\n    // Add newline every 80 chars\n    key = key.replace(new RegExp('(.{' + VERTICAL_CELL_WIDTH + '})', 'g'), '$1\\n');\n    value = value.replace(new RegExp('(.{' + VERTICAL_CELL_WIDTH + '})', 'g'), '$1\\n');\n    table.push({ [key]: value });\n  });\n\n  return table.toString();\n}\n"],"sourceRoot":"/exp@57.2.1/src"}