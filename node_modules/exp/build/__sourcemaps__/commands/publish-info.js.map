{"version":3,"sources":["commands/publish-info.js"],"names":["HORIZ_CELL_WIDTH_SMALL","HORIZ_CELL_WIDTH_BIG","VERSION","program","command","alias","description","option","parseInt","asyncActionProjectDir","projectDir","options","count","isNaN","Error","ensureLoggedInAsync","formData","append","getSlugAsync","releaseChannel","platform","callMethodAsync","result","raw","console","log","queryResult","length","sampleItem","generalTableString","printTableJson","fullName","headers","colWidths","bigCells","forEach","has","header","push","tableString","printTableJsonArray","publishId","manifest","manifestTableString"],"mappings":"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","file":"../../commands/publish-info.js","sourcesContent":["/**\n * @flow\n */\n\nimport { Api, Project, FormData, User } from 'xdl';\nimport log from '../log';\nimport * as table from '../commands/utils/cli-table';\n\nconst HORIZ_CELL_WIDTH_SMALL = 15;\nconst HORIZ_CELL_WIDTH_BIG = 40;\nconst VERSION = 2;\n\nexport default (program: any) => {\n  program\n    .command('publish:history [project-dir]')\n    .alias('ph')\n    .description('View a log of your published releases.')\n    .option(\n      '-c, --release-channel <channel-name>',\n      'Filter by release channel. If this flag is not included, the most recent publications will be shown.'\n    )\n    .option(\n      '-count, --count <number-of-logs>',\n      'Number of logs to view, maximum 100, default 5.',\n      parseInt\n    )\n    .option('-p, --platform <ios|android>', 'Filter by platform, android or ios.')\n    .option('-r, --raw', 'Produce some raw output.')\n    .asyncActionProjectDir(async (projectDir, options) => {\n      if (options.count && (isNaN(options.count) || options.count < 1 || options.count > 100)) {\n        throw new Error('-n must be a number between 1 and 100 inclusive');\n      }\n\n      // TODO(ville): handle the API result for not authenticated user instead of checking upfront\n      await User.ensureLoggedInAsync();\n\n      // TODO(ville): move request from multipart/form-data to JSON once supported by the endpoint.\n      let formData = new FormData();\n      formData.append('queryType', 'history');\n      formData.append('slug', await Project.getSlugAsync(projectDir, options));\n      formData.append('version', VERSION);\n      if (options.releaseChannel) {\n        formData.append('releaseChannel', options.releaseChannel);\n      }\n      if (options.count) {\n        formData.append('count', options.count);\n      }\n      if (options.platform) {\n        formData.append('platform', options.platform);\n      }\n\n      let result = await Api.callMethodAsync('publishInfo', [], 'post', null, {\n        formData,\n      });\n\n      if (options.raw) {\n        console.log(JSON.stringify(result));\n        return;\n      }\n\n      if (result.queryResult && result.queryResult.length > 0) {\n        // Print general publication info\n        let sampleItem = result.queryResult[0]; // get a sample item\n        let generalTableString = table.printTableJson(\n          {\n            fullName: sampleItem.fullName,\n          },\n          'General Info'\n        );\n        console.log(generalTableString);\n\n        // Print info specific to each publication\n        let headers = [\n          'publishedTime',\n          'appVersion',\n          'sdkVersion',\n          'platform',\n          'channel',\n          'channelId',\n          'publicationId',\n        ];\n\n        // colWidths contains the cell size of each header\n        let colWidths = [];\n        let bigCells = new Set(['publicationId', 'channelId', 'publishedTime']);\n        headers.forEach(header => {\n          bigCells.has(header)\n            ? colWidths.push(HORIZ_CELL_WIDTH_BIG)\n            : colWidths.push(HORIZ_CELL_WIDTH_SMALL);\n        });\n        let tableString = table.printTableJsonArray(headers, result.queryResult, colWidths);\n        console.log(tableString);\n      } else {\n        throw new Error('No records found matching your query.');\n      }\n    });\n  program\n    .command('publish:details [project-dir]')\n    .alias('pd')\n    .description('View the details of a published release.')\n    .option('--publish-id <publish-id>', 'Publication id. (Required)')\n    .option('-r, --raw', 'Produce some raw output.')\n    .asyncActionProjectDir(async (projectDir, options) => {\n      if (!options.publishId) {\n        throw new Error('publishId must be specified.');\n      }\n\n      // TODO(ville): handle the API result for not authenticated user instead of checking upfront\n      await User.ensureLoggedInAsync();\n\n      let formData = new FormData();\n      formData.append('queryType', 'details');\n      formData.append('publishId', options.publishId);\n      formData.append('slug', await Project.getSlugAsync(projectDir, options));\n\n      let result = await Api.callMethodAsync('publishInfo', null, 'post', null, {\n        formData,\n      });\n\n      if (options.raw) {\n        console.log(JSON.stringify(result));\n        return;\n      }\n\n      if (result.queryResult) {\n        let queryResult = result.queryResult;\n        let manifest = queryResult.manifest;\n        delete queryResult.manifest;\n\n        // Print general release info\n        let generalTableString = table.printTableJson(queryResult, 'Release Description');\n        console.log(generalTableString);\n\n        // Print manifest info\n        let manifestTableString = table.printTableJson(manifest, 'Manifest Details');\n        console.log(manifestTableString);\n      } else {\n        throw new Error('No records found matching your query.');\n      }\n    });\n};\n"],"sourceRoot":"/exp@57.2.1/src"}