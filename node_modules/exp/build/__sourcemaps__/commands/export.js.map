{"version":3,"sources":["commands/export.js"],"names":["projectDir","options","publicUrl","dev","isHttps","isURL","protocols","console","warn","currentStatus","status","startedOurOwn","parent","name","startOpts","reset","clear","nonPersistent","maxWorkers","startAsync","quiet","exportOptions","dumpAssetmap","dumpSourcemap","isDev","absoluteOutputDir","resolve","process","cwd","outputDir","exportForAppHosting","assetUrl","stopAsync","action","program","command","description","option","asyncActionProjectDir"],"mappings":";;;;;;;;;;;;;;;;;;;;4IAWO,iBAAsBA,UAAtB;AAAA,QAA0CC,OAA1C,uEAA6D,EAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACAA,QAAQC,SADR;AAAA;AAAA;AAAA;;AAAA,kBAEG,oDAAiB,oBAAjB,EAAuC,uCAAvC,CAFH;;AAAA;AAAA,kBAKD,CAACD,QAAQE,GAAT,IAAgB,CAAC,+BAASC,OAAT,CAAiBH,QAAQC,SAAzB,CALhB;AAAA;AAAA;AAAA;;AAAA,kBAMG,oDAAiB,oBAAjB,EAAuC,yCAAvC,CANH;;AAAA;AAOE,gBAAI,CAAC,0CAAUG,KAAV,CAAgBJ,QAAQC,SAAxB,EAAmC,EAAEI,WAAW,CAAC,MAAD,EAAS,OAAT,CAAb,EAAnC,CAAL,EAA2E;AAChFC,sBAAQC,IAAR,0BAAoCP,QAAQC,SAA5C;AACD;;AATI;AAAA;AAAA,mBAWgB,8BAAQO,aAAR,CAAsBT,UAAtB,CAXhB;;AAAA;AAWCU,kBAXD;AAaDC,yBAbC,GAae,KAbf;;AAAA,kBAcDD,WAAW,SAdV;AAAA;AAAA;AAAA;;AAeH,+EACgCT,QAAQW,MAAR,CAC3BC,IAFL;;AAKA,0DAAiBb,UAAjB;;AAEMc,qBAtBH,GAsBe,EAAEC,OAAOd,QAAQe,KAAjB,EAAwBC,eAAe,IAAvC,EAtBf;;AAuBH,gBAAIhB,QAAQiB,UAAZ,EAAwB;AACtBJ,wBAAUI,UAAV,GAAuBjB,QAAQiB,UAA/B;AACD;AACD,+CAAI,uBAAJ;AA1BG;AAAA,mBA2BG,8BAAQC,UAAR,CAAmBnB,UAAnB,EAA+Bc,SAA/B,EAA0C,CAACb,QAAQmB,KAAnD,CA3BH;;AAAA;AA4BHT,4BAAgB,IAAhB;;AA5BG;;AA+BL;AACMU,yBAhCD,GAgCiB;AACpBC,4BAAcrB,QAAQqB,YADF;AAEpBC,6BAAetB,QAAQsB,aAFH;AAGpBC,qBAAOvB,QAAQE;AAHK,aAhCjB;AAqCCsB,6BArCD,GAqCqB,cAAKC,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B3B,QAAQ4B,SAApC,CArCrB;AAAA;AAAA,mBAsCC,8BAAQC,mBAAR,CACJ9B,UADI,EAEJC,QAAQC,SAFJ,EAGJD,QAAQ8B,QAHJ,EAIJN,iBAJI,EAKJJ,aALI,CAtCD;;AAAA;AAAA,iBA8CDV,aA9CC;AAAA;AAAA;AAAA;;AA+CH,+CAAI,+BAAJ;AA/CG;AAAA,mBAgDG,8BAAQqB,SAAR,CAAkBhC,UAAlB,CAhDH;;AAAA;AAkDL,+GAAkEC,QAAQ4B,SAA1E;;AAlDK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeI,M;;;;;;;AARtB;AAAA;AAAA;;AACA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;kBAuDe,UAACC,OAAD,EAAkB;AAC/BA,UACGC,OADH,CACW,sBADX,EAEGC,WAFH,CAEe,qEAFf,EAGGC,MAHH,CAGU,wBAHV,EAGoC,4DAHpC,EAIGA,MAJH,CAKI,oBALJ,EAMI,0EANJ,EAOI,MAPJ,EASGA,MATH,CAUI,uBAVJ,EAWI,oIAXJ,EAYI,UAZJ,EAcGA,MAdH,CAcU,qBAdV,EAciC,4CAdjC,EAeGA,MAfH,CAeU,OAfV,EAemB,yEAfnB,EAgBGA,MAhBH,CAgBU,uBAhBV,EAgBmC,kDAhBnC,EAiBGA,MAjBH,CAiBU,aAjBV,EAiByB,yDAjBzB,EAkBGA,MAlBH,CAkBU,qBAlBV,EAkBiC,kDAlBjC,EAmBGC,qBAnBH,CAmByBL,MAnBzB,EAmBiC,KAnBjC,EAmBwC,IAnBxC;AAoBD,C","file":"../../commands/export.js","sourcesContent":["/**\n * @flow\n */\nimport validator from 'validator';\nimport path from 'path';\nimport { Project, UrlUtils } from 'xdl';\n\nimport log from '../log';\nimport { installExitHooks } from '../exit';\nimport CommandError from '../CommandError';\n\nexport async function action(projectDir: string, options: Options = {}) {\n  if (!options.publicUrl) {\n    throw new CommandError('MISSING_PUBLIC_URL', 'Missing required option: --public-url');\n  }\n  // If we are not in dev mode, ensure that url is https\n  if (!options.dev && !UrlUtils.isHttps(options.publicUrl)) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  } else if (!validator.isURL(options.publicUrl, { protocols: ['http', 'https'] })) {\n    console.warn(`Dev Mode: publicUrl ${options.publicUrl} does not conform to HTTP format.`);\n  }\n\n  const status = await Project.currentStatus(projectDir);\n\n  let startedOurOwn = false;\n  if (status !== 'running') {\n    log(\n      `Unable to find an existing ${options.parent\n        .name} instance for this directory, starting a new one...`\n    );\n\n    installExitHooks(projectDir);\n\n    const startOpts = { reset: options.clear, nonPersistent: true };\n    if (options.maxWorkers) {\n      startOpts.maxWorkers = options.maxWorkers;\n    }\n    log('Exporting your app...');\n    await Project.startAsync(projectDir, startOpts, !options.quiet);\n    startedOurOwn = true;\n  }\n\n  // Make outputDir an absolute path if it isnt already\n  const exportOptions = {\n    dumpAssetmap: options.dumpAssetmap,\n    dumpSourcemap: options.dumpSourcemap,\n    isDev: options.dev,\n  };\n  const absoluteOutputDir = path.resolve(process.cwd(), options.outputDir);\n  await Project.exportForAppHosting(\n    projectDir,\n    options.publicUrl,\n    options.assetUrl,\n    absoluteOutputDir,\n    exportOptions\n  );\n\n  if (startedOurOwn) {\n    log('Terminating server processes.');\n    await Project.stopAsync(projectDir);\n  }\n  log(`Export was successful. Your exported files can be found in ${options.outputDir}`);\n}\n\nexport default (program: any) => {\n  program\n    .command('export [project-dir]')\n    .description('Exports the static files of the app for hosting it on a web server.')\n    .option('-p, --public-url <url>', 'The public url that will host the static files. (Required)')\n    .option(\n      '--output-dir <dir>',\n      'The directory to export the static files to. Default directory is `dist`',\n      'dist'\n    )\n    .option(\n      '-a, --asset-url <url>',\n      \"The absolute or relative url that will host the asset files. Default is './assets', which will be resolved against the public-url.\",\n      './assets'\n    )\n    .option('-d, --dump-assetmap', 'Dump the asset map for further processing.')\n    .option('--dev', 'Configures static files for developing locally using a non-https server')\n    .option('--s, --dump-sourcemap', 'Dump the source map for debugging the JS bundle.')\n    .option('-q, --quiet', 'Suppress verbose output from the React Native packager.')\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .asyncActionProjectDir(action, false, true);\n};\n"],"sourceRoot":"/exp@57.2.1/src"}