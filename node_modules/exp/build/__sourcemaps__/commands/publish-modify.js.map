{"version":3,"sources":["commands/publish-modify.js"],"names":["program","command","alias","description","option","asyncActionProjectDir","projectDir","options","releaseChannel","Error","publishId","ensureLoggedInAsync","user","api","clientForUser","getSlugAsync","slug","postAsync","result","tableString","printTableJson","queryResult","console","log","error","channelId","getCurrentUserAsync"],"mappings":";;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;kBAEe,UAACA,OAAD,EAAkB;AAC/BA,UACGC,OADH,CACW,2BADX,EAEGC,KAFH,CAES,IAFT,EAGGC,WAHH,CAGe,gEAHf,EAIGC,MAJH,CAKI,sCALJ,EAMI,sDANJ,EAQGA,MARH,CASI,+BATJ,EAUI,uEAVJ,EAYGC,qBAZH;AAAA,8IAYyB,iBAAOC,UAAP,EAAmBC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAChBA,QAAQC,cADQ;AAAA;AAAA;AAAA;;AAAA,oBAEb,IAAIC,KAAJ,CAAU,qCAAV,CAFa;;AAAA;AAAA,kBAIhBF,QAAQG,SAJQ;AAAA;AAAA;AAAA;;AAAA,oBAKb,IAAID,KAAJ,CAAU,wEAAV,CALa;;AAAA;AAAA;AAAA,qBAOF,2BAAKE,mBAAL,EAPE;;AAAA;AAOfC,kBAPe;AAQfC,iBARe,GAQT,4BAAMC,aAAN,CAAoBF,IAApB,CARS;AAAA;AAAA,4BAUAC,GAVA;AAAA,4BAWDN,QAAQC,cAXP;AAAA,4BAYND,QAAQG,SAZF;AAAA;AAAA,qBAaL,8BAAQK,YAAR,CAAqBT,UAArB,EAAiCC,OAAjC,CAbK;;AAAA;AAAA;AAAA;AAWjBC,8BAXiB;AAYjBE,yBAZiB;AAajBM,oBAbiB;AAAA;AAAA;AAAA,iCAUIC,SAVJ,mBAUc,aAVd;;AAAA;AAUfC,oBAVe;AAefC,yBAfe,GAeD,gCAAMC,cAAN,CAChBF,OAAOG,WADS,EAEhB,qBAFgB,EAGhB,SAHgB,CAfC;;AAoBnBC,sBAAQC,GAAR,CAAYJ,WAAZ;AApBmB;AAAA;;AAAA;AAAA;AAAA;;AAsBnB,4CAAIK,KAAJ;;AAtBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAZzB;;AAAA;AAAA;AAAA;AAAA;AAqCAxB,UACGC,OADH,CACW,gCADX,EAEGC,KAFH,CAES,IAFT,EAGGC,WAHH,CAGe,kCAHf,EAIGC,MAJH,CAIU,2BAJV,EAIuC,uDAJvC,EAKGC,qBALH;AAAA,+IAKyB,kBAAOC,UAAP,EAAmBC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAChBA,QAAQkB,SADQ;AAAA;AAAA;AAAA;;AAAA,oBAEb,IAAIhB,KAAJ,CAAU,wEAAV,CAFa;;AAAA;AAAA;AAAA,qBAIF,2BAAKiB,mBAAL,EAJE;;AAAA;AAIfd,kBAJe;AAKfC,iBALe,GAKT,4BAAMC,aAAN,CAAoBF,IAApB,CALS;AAAA;AAAA,6BAOAC,GAPA;AAAA,6BAQNN,QAAQkB,SARF;AAAA;AAAA,qBASL,8BAAQV,YAAR,CAAqBT,UAArB,EAAiCC,OAAjC,CATK;;AAAA;AAAA;AAAA;AAQjBkB,yBARiB;AASjBT,oBATiB;AAAA;AAAA;AAAA,kCAOIC,SAPJ,oBAOc,kBAPd;;AAAA;AAOfC,oBAPe;AAWfC,yBAXe,GAWD,gCAAMC,cAAN,CAChBF,OAAOG,WADS,EAEhB,0BAFgB,EAGhB,SAHgB,CAXC;;AAgBnBC,sBAAQC,GAAR,CAAYJ,WAAZ;AAhBmB;AAAA;;AAAA;AAAA;AAAA;;AAkBnB,4CAAIK,KAAJ;;AAlBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALzB;;AAAA;AAAA;AAAA;AAAA;AA0BD,C","file":"../../commands/publish-modify.js","sourcesContent":["/**\n * @flow\n */\n\nimport { Api, Project, FormData } from 'xdl';\nimport { ApiV2, User } from 'xdl';\nimport log from '../log';\nimport * as table from '../commands/utils/cli-table';\n\nexport default (program: any) => {\n  program\n    .command('publish:set [project-dir]')\n    .alias('ps')\n    .description('Set a published release to be served from a specified channel.')\n    .option(\n      '-c, --release-channel <channel-name>',\n      'The channel to set the published release. (Required)'\n    )\n    .option(\n      '-p, --publish-id <publish-id>',\n      'The id of the published release to serve from the channel. (Required)'\n    )\n    .asyncActionProjectDir(async (projectDir, options) => {\n      if (!options.releaseChannel) {\n        throw new Error('You must specify a release channel.');\n      }\n      if (!options.publishId) {\n        throw new Error('You must specify a publish id. You can find ids using publish:history.');\n      }\n      const user = await User.ensureLoggedInAsync();\n      const api = ApiV2.clientForUser(user);\n      try {\n        let result = await api.postAsync('publish/set', {\n          releaseChannel: options.releaseChannel,\n          publishId: options.publishId,\n          slug: await Project.getSlugAsync(projectDir, options),\n        });\n        let tableString = table.printTableJson(\n          result.queryResult,\n          'Channel Set Status ',\n          'SUCCESS'\n        );\n        console.log(tableString);\n      } catch (e) {\n        log.error(e);\n      }\n    });\n  program\n    .command('publish:rollback [project-dir]')\n    .alias('pr')\n    .description('Rollback an update to a channel.')\n    .option('--channel-id <channel-id>', 'The channel id to rollback in the channel. (Required)')\n    .asyncActionProjectDir(async (projectDir, options) => {\n      if (!options.channelId) {\n        throw new Error('You must specify a channel id. You can find ids using publish:history.');\n      }\n      const user = await User.getCurrentUserAsync();\n      const api = ApiV2.clientForUser(user);\n      try {\n        let result = await api.postAsync('publish/rollback', {\n          channelId: options.channelId,\n          slug: await Project.getSlugAsync(projectDir, options),\n        });\n        let tableString = table.printTableJson(\n          result.queryResult,\n          'Channel Rollback Status ',\n          'SUCCESS'\n        );\n        console.log(tableString);\n      } catch (e) {\n        log.error(e);\n      }\n    });\n};\n"],"sourceRoot":"/exp@57.2.1/src"}