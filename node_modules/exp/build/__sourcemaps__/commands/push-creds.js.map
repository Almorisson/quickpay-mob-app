{"version":3,"sources":["commands/push-creds.js"],"names":["program","command","description","option","asyncActionProjectDir","projectDir","options","apiKey","length","Error","getPublishInfoAsync","remotePackageName","args","getCurrentUserAsync","user","apiClient","clientForUser","putAsync","fcmApiKey","getAsync","result","status","console","log","deleteAsync"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;kBAEe,UAACA,OAAD,EAAkB;AAC/BA,UACGC,OADH,CACW,mCADX,EAEGC,WAFH,CAEe,wEAFf,EAGGC,MAHH,CAGU,qBAHV,EAGiC,yBAHjC,EAIGC,qBAJH;AAAA,8IAIyB,iBAAOC,UAAP,EAAmBC,OAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACjB,CAACA,QAAQC,MAAT,IAAmBD,QAAQC,MAAR,CAAeC,MAAf,KAA0B,CAD5B;AAAA;AAAA;AAAA;;AAAA,oBAEb,IAAIC,KAAJ,CAAU,mDAAV,CAFa;;AAAA;;AAKrB,iDAAI,kCAAJ;;AALqB;AAAA,qBAOyB,0BAAIC,mBAAJ,CAAwBL,UAAxB,CAPzB;;AAAA;AAAA;AAOLM,+BAPK,SAObC,IAPa,CAOLD,iBAPK;;;AASrB,iDAAI,eAAJ;;AATqB;AAAA,qBAWJ,2BAAKE,mBAAL,EAXI;;AAAA;AAWjBC,kBAXiB;AAYjBC,uBAZiB,GAYL,4BAAMC,aAAN,CAAoBF,IAApB,CAZK;;;AAcrB,iDAAI,sCAAJ;;AAdqB;AAAA,qBAgBfC,UAAUE,QAAV,+BAA+CN,iBAA/C,EAAoE;AACxEO,2BAAWZ,QAAQC;AADqD,eAApE,CAhBe;;AAAA;;AAoBrB,iDAAI,WAAJ;;AApBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJzB;;AAAA;AAAA;AAAA;AAAA,OAyBK,IAzBL;;AA2BAP,UACGC,OADH,CACW,iCADX,EAEGC,WAFH,CAEe,0EAFf,EAGGE,qBAHH;AAAA,+IAGyB,kBAAOC,UAAP,EAAmBC,OAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACyB,0BAAII,mBAAJ,CAAwBL,UAAxB,CADzB;;AAAA;AAAA;AACLM,+BADK,SACbC,IADa,CACLD,iBADK;AAAA;AAAA,qBAEJ,2BAAKE,mBAAL,EAFI;;AAAA;AAEjBC,kBAFiB;AAGjBC,uBAHiB,GAGL,4BAAMC,aAAN,CAAoBF,IAApB,CAHK;AAAA;AAAA,qBAKFC,UAAUI,QAAV,+BAA+CR,iBAA/C,CALE;;AAAA;AAKjBS,oBALiB;;AAAA,oBAOjBA,OAAOC,MAAP,KAAkB,IAAlB,IAA0BD,OAAOF,SAPhB;AAAA;AAAA;AAAA;;AAQnBI,sBAAQC,GAAR,CAAY,+CAAeH,MAAf,CAAZ;AARmB;AAAA;;AAAA;AAAA,oBAUb,IAAIX,KAAJ,CAAU,oCAAV,CAVa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHzB;;AAAA;AAAA;AAAA;AAAA,OAeK,IAfL;;AAiBAT,UACGC,OADH,CACW,kCADX,EAEGC,WAFH,CAEe,+CAFf,EAGGE,qBAHH;AAAA,+IAGyB,kBAAOC,UAAP,EAAmBC,OAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrB,iDAAI,kCAAJ;AADqB;AAAA,qBAEyB,0BAAII,mBAAJ,CAAwBL,UAAxB,CAFzB;;AAAA;AAAA;AAELM,+BAFK,SAEbC,IAFa,CAELD,iBAFK;;;AAIrB,iDAAI,eAAJ;AAJqB;AAAA,qBAKJ,2BAAKE,mBAAL,EALI;;AAAA;AAKjBC,kBALiB;AAMjBC,uBANiB,GAML,4BAAMC,aAAN,CAAoBF,IAApB,CANK;;;AAQrB,iDAAI,yCAAJ;;AARqB;AAAA,qBAUfC,UAAUS,WAAV,+BAAkDb,iBAAlD,CAVe;;AAAA;;AAYrB,iDAAI,WAAJ;;AAZqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHzB;;AAAA;AAAA;AAAA;AAAA,OAgBK,IAhBL;AAiBD,C","file":"../../commands/push-creds.js","sourcesContent":["/**\n * @flow\n */\n\nimport { ApiV2, Exp, User } from 'xdl';\n\nimport log from '../log';\n\nexport default (program: any) => {\n  program\n    .command('push:android:upload [project-dir]')\n    .description('Uploads a Firebase Cloud Messaging key for Android push notifications.')\n    .option('--api-key [api-key]', 'Server API key for FCM.')\n    .asyncActionProjectDir(async (projectDir, options) => {\n      if (!options.apiKey || options.apiKey.length === 0) {\n        throw new Error('Must specify an API key to upload with --api-key.');\n      }\n\n      log('Reading project configuration...');\n\n      const { args: { remotePackageName } } = await Exp.getPublishInfoAsync(projectDir);\n\n      log('Logging in...');\n\n      let user = await User.getCurrentUserAsync();\n      let apiClient = ApiV2.clientForUser(user);\n\n      log(\"Setting API key on Expo's servers...\");\n\n      await apiClient.putAsync(`credentials/push/android/${remotePackageName}`, {\n        fcmApiKey: options.apiKey,\n      });\n\n      log('All done!');\n    }, true);\n\n  program\n    .command('push:android:show [project-dir]')\n    .description('Print the value currently in use for FCM notifications for this project.')\n    .asyncActionProjectDir(async (projectDir, options) => {\n      const { args: { remotePackageName } } = await Exp.getPublishInfoAsync(projectDir);\n      let user = await User.getCurrentUserAsync();\n      let apiClient = ApiV2.clientForUser(user);\n\n      let result = await apiClient.getAsync(`credentials/push/android/${remotePackageName}`);\n\n      if (result.status === 'ok' && result.fcmApiKey) {\n        console.log(JSON.stringify(result));\n      } else {\n        throw new Error('Server returned an invalid result!');\n      }\n    }, true);\n\n  program\n    .command('push:android:clear [project-dir]')\n    .description('Deletes a previously uploaded FCM credential.')\n    .asyncActionProjectDir(async (projectDir, options) => {\n      log('Reading project configuration...');\n      const { args: { remotePackageName } } = await Exp.getPublishInfoAsync(projectDir);\n\n      log('Logging in...');\n      let user = await User.getCurrentUserAsync();\n      let apiClient = ApiV2.clientForUser(user);\n\n      log(\"Deleting API key from Expo's servers...\");\n\n      await apiClient.deleteAsync(`credentials/push/android/${remotePackageName}`);\n\n      log('All done!');\n    }, true);\n};\n"],"sourceRoot":"/exp@57.2.1/src"}