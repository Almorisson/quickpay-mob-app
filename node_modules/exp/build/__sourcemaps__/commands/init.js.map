{"version":3,"sources":["commands/init.js"],"names":["projectDir","options","parentDir","name","versionsPromise","versionsAsync","root","resolve","dirname","basename","validationResult","validateName","process","cwd","message","filter","trim","validate","templateId","template","versions","wrap","stdout","columns","type","choices","templatesv2","map","value","id","bold","description","short","downloadAndExtractTemplate","projectPath","cdPath","relative","length","nested","parent","action","bar","total","width","clear","complete","incomplete","showProgress","opts","progressFunction","notifications","info","code","DOWNLOAD_CLI_PROGRESS","progress","update","retryFunction","cancel","terminate","DOWNLOAD_IS_SLOW","shouldRestart","downloadTemplateApp","templateDownload","extractTemplateApp","starterAppPath","__CANCEL__","_downloadIsSlowPrompt","test","dir","join","isNonExistentOrEmptyDir","statSync","isDirectory","readdirSync","error","program","command","alias","option","asyncAction"],"mappings":"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","file":"../../commands/init.js","sourcesContent":["import fs from 'fs';\nimport chalk from 'chalk';\nimport ProgressBar from 'progress';\nimport { Api, Exp, Logger, NotificationCode, MessageCode } from 'xdl';\nimport wordwrap from 'wordwrap';\n\nimport prompt from '../prompt';\nimport log from '../log';\nimport CommandError from '../CommandError';\n\nimport path from 'path';\n\nlet _downloadIsSlowPrompt = false;\n\nasync function action(projectDir, options) {\n  let parentDir;\n  let name;\n\n  // No `await` here, just start fetching versions in the background and block later.\n  let versionsPromise = Api.versionsAsync();\n\n  if (projectDir) {\n    let root = path.resolve(projectDir);\n    parentDir = path.dirname(root);\n    name = path.basename(root);\n    let validationResult = validateName(parentDir, name);\n    if (validationResult !== true) {\n      throw new CommandError('INVALID_PROJECT_DIR', validationResult);\n    }\n  } else {\n    parentDir = process.cwd();\n    ({ name } = await prompt({\n      name: 'name',\n      message: 'Choose a project name:',\n      filter: name => name.trim(),\n      validate: name => validateName(parentDir, name),\n    }));\n  }\n\n  let templateId;\n  if (options.template) {\n    templateId = options.template;\n  } else {\n    let versions = await versionsPromise;\n    let wrap = wordwrap(2, process.stdout.columns || 80);\n    ({ templateId } = await prompt({\n      type: 'list',\n      name: 'templateId',\n      message: 'Choose a template:',\n      choices: versions.templatesv2.map(template => ({\n        value: template.id,\n        name: chalk.bold(template.id) + '\\n' + wrap(template.description),\n        short: template.id,\n      })),\n    }));\n  }\n  let projectPath = await downloadAndExtractTemplate(templateId, parentDir, name);\n  let cdPath = path.relative(process.cwd(), projectPath);\n  if (cdPath.length > projectPath.length) {\n    cdPath = projectPath;\n  }\n  log.nested(`\\nYour project is ready at ${projectPath}`);\n  log.nested(`To get started, you can type:\\n`);\n  if (cdPath) {\n    // empty string if project was created in current directory\n    log.nested(`  cd ${cdPath}`);\n  }\n  log.nested(`  ${options.parent.name} start\\n`);\n}\n\nasync function downloadAndExtractTemplate(templateId, parentDir, name) {\n  let bar = new ProgressBar('[:bar] :percent', {\n    total: 100,\n    width: 50,\n    clear: true,\n    complete: '=',\n    incomplete: ' ',\n  });\n  let showProgress = true;\n  let opts = {\n    name,\n    progressFunction: progress => {\n      Logger.notifications.info({ code: NotificationCode.DOWNLOAD_CLI_PROGRESS }, progress + '%');\n      if (showProgress) {\n        bar.update(progress / 100);\n      }\n    },\n    retryFunction: async cancel => {\n      bar.terminate();\n      showProgress = false;\n      let { shouldRestart } = await prompt({\n        type: 'confirm',\n        name: 'shouldRestart',\n        message: MessageCode.DOWNLOAD_IS_SLOW,\n      });\n      if (shouldRestart) {\n        cancel();\n      } else {\n        showProgress = true;\n      }\n    },\n  };\n  try {\n    let templateDownload = await Exp.downloadTemplateApp(templateId, parentDir, opts);\n    return Exp.extractTemplateApp(\n      templateDownload.starterAppPath,\n      templateDownload.name,\n      templateDownload.root\n    );\n  } catch (error) {\n    if (error.__CANCEL__) {\n      log('Download was canceled. Starting again...');\n      return downloadAndExtractTemplate(templateId, parentDir, name);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction validateName(parentDir, name) {\n  if (!/^[a-z0-9@.\\-_]+$/i.test(name)) {\n    return 'The project name can only contain URL-friendly characters.';\n  }\n  let dir = path.join(parentDir, name);\n  if (!isNonExistentOrEmptyDir(dir)) {\n    return `The path \"${dir}\" already exists.\\nPlease choose a different parent directory or project name.`;\n  }\n  return true;\n}\n\nfunction isNonExistentOrEmptyDir(dir) {\n  try {\n    return fs.statSync(dir).isDirectory() && fs.readdirSync(dir).length === 0;\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return true;\n    }\n    throw error;\n  }\n}\n\nexport default program => {\n  program\n    .command('init [project-dir]')\n    .alias('i')\n    .description(\n      'Initializes a directory with an example project. Run it without any options and you will be prompted for the name and type.'\n    )\n    .option(\n      '-t, --template [name]',\n      'Specify which template to use. Run without this option to see all choices.'\n    )\n    .asyncAction(action);\n};\n"],"sourceRoot":"/exp@57.2.1/src"}