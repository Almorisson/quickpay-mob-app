{"version":3,"sources":["commands/whoami.js"],"names":["options","getCurrentUsernameAsync","username","green","raw","action","program","command","alias","description","asyncAction"],"mappings":";;;;;;;;;;;;;;;;;;;4IAUA,iBAAsBA,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACyB,2BAAKC,uBAAL,EADzB;;AAAA;AACQC,oBADR;;AAAA,iBAEMA,QAFN;AAAA;AAAA;AAAA;;AAGI,iEAAoB,kCAAMC,KAAN,CAAYD,QAAZ,CAApB;AACA,0CAAIE,GAAJ,CAAQF,QAAR;AAJJ;AAAA;;AAAA;AAAA,kBAMU,oDAAiB,eAAjB,EAAkC,eAAlC,CANV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,M;;;;;;;AANf;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;kBAYe,mBAAW;AACxBC,UACGC,OADH,CACW,QADX,EAEGC,KAFH,CAES,GAFT,EAGGC,WAHH,CAGe,+DAHf,EAIGC,WAJH,CAIeL,MAJf;AAKD,C","file":"../../commands/whoami.js","sourcesContent":["/**\n * @flow\n */\n\nimport { User } from 'xdl';\nimport chalk from 'chalk';\n\nimport log from '../log';\nimport CommandError from '../CommandError';\n\nasync function action(options) {\n  const username = await User.getCurrentUsernameAsync();\n  if (username) {\n    log(`Logged in as ${chalk.green(username)}`);\n    log.raw(username);\n  } else {\n    throw new CommandError('NOT_LOGGED_IN', 'Not logged in');\n  }\n}\n\nexport default program => {\n  program\n    .command('whoami')\n    .alias('w')\n    .description('Checks with the server and then says who you are logged in as')\n    .asyncAction(action);\n};\n"],"sourceRoot":"/exp@57.2.1/src"}