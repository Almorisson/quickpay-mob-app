{"version":3,"sources":["log.js"],"names":["_bundleProgressBar","_printNewLineBeforeNextLog","_isLastLineNewLine","_updateIsLastLineNewLine","args","length","lastArg","match","_maybePrintNewLine","console","log","consoleLog","consoleWarn","warn","consoleError","error","respectProgressBars","commitLogs","terminate","lastDraw","render","getPrefix","chalkColor","Date","toTimeString","slice","withPrefixAndTextColor","gray","map","arg","withPrefix","config","raw","nested","message","newLine","addNewLineIfNone","printNewLineBeforeNextLog","setBundleProgressBar","bar","red","nestedError","yellow","nestedWarn","chalk"],"mappings":"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","file":"../log.js","sourcesContent":["import chalk from 'chalk';\n\nlet _bundleProgressBar;\n\nlet _printNewLineBeforeNextLog = false;\nlet _isLastLineNewLine = false;\nfunction _updateIsLastLineNewLine(args) {\n  if (args.length === 0) {\n    _isLastLineNewLine = true;\n  } else {\n    let lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && (lastArg === '' || lastArg.match(/[\\r\\n]$/))) {\n      _isLastLineNewLine = true;\n    } else {\n      _isLastLineNewLine = false;\n    }\n  }\n}\n\nfunction _maybePrintNewLine() {\n  if (_printNewLineBeforeNextLog) {\n    _printNewLineBeforeNextLog = false;\n    console.log();\n  }\n}\n\nfunction consoleLog(...args) {\n  _maybePrintNewLine();\n  _updateIsLastLineNewLine(args);\n\n  console.log(...args);\n}\n\nfunction consoleWarn(...args) {\n  _maybePrintNewLine();\n  _updateIsLastLineNewLine(args);\n\n  console.warn(...args);\n}\n\nfunction consoleError(...args) {\n  _maybePrintNewLine();\n  _updateIsLastLineNewLine(args);\n\n  console.error(...args);\n}\n\nfunction respectProgressBars(commitLogs) {\n  if (_bundleProgressBar) {\n    _bundleProgressBar.terminate();\n    _bundleProgressBar.lastDraw = '';\n    commitLogs();\n    _bundleProgressBar.render();\n  } else {\n    commitLogs();\n  }\n}\n\nfunction getPrefix(chalkColor) {\n  return chalkColor(`[${new Date().toTimeString().slice(0, 8)}]`);\n}\n\nfunction withPrefixAndTextColor(args, chalkColor = chalk.gray) {\n  return [getPrefix(chalkColor), ...args.map(arg => chalkColor(arg))];\n}\n\nfunction withPrefix(args, chalkColor = chalk.gray) {\n  return [getPrefix(chalkColor), ...args];\n}\n\nfunction log(...args) {\n  if (log.config.raw) {\n    return;\n  }\n\n  respectProgressBars(() => {\n    consoleLog(...withPrefix(args));\n  });\n}\n\nlog.nested = function(message) {\n  respectProgressBars(() => {\n    consoleLog(message);\n  });\n};\n\nlog.newLine = function newLine() {\n  respectProgressBars(() => {\n    consoleLog();\n  });\n};\n\nlog.addNewLineIfNone = function addNewLineIfNone() {\n  if (!_isLastLineNewLine && !_printNewLineBeforeNextLog) {\n    log.newLine();\n  }\n};\n\nlog.printNewLineBeforeNextLog = function printNewLineBeforeNextLog() {\n  _printNewLineBeforeNextLog = true;\n};\n\nlog.setBundleProgressBar = function setBundleProgressBar(bar) {\n  _bundleProgressBar = bar;\n};\n\nlog.error = function error(...args) {\n  if (log.config.raw) {\n    return;\n  }\n\n  respectProgressBars(() => {\n    consoleError(...withPrefixAndTextColor(args, chalk.red));\n  });\n};\n\nlog.nestedError = function(message) {\n  respectProgressBars(() => {\n    consoleError(chalk.red(message));\n  });\n};\n\nlog.warn = function warn(...args) {\n  if (log.config.raw) {\n    return;\n  }\n\n  respectProgressBars(() => {\n    consoleWarn(...withPrefixAndTextColor(args, chalk.yellow));\n  });\n};\n\nlog.nestedWarn = function(message) {\n  respectProgressBars(() => {\n    consoleWarn(chalk.yellow(message));\n  });\n};\n\nlog.gray = function(...args) {\n  if (log.config.raw) {\n    return;\n  }\n\n  respectProgressBars(() => {\n    consoleLog(...withPrefixAndTextColor(args));\n  });\n};\n\nlog.raw = function(...args) {\n  if (!log.config.raw) {\n    return;\n  }\n\n  respectProgressBars(() => {\n    consoleLog(...args);\n  });\n};\n\nlog.chalk = chalk;\n\nlog.config = {\n  raw: false,\n};\n\nexport default log;\n"],"sourceRoot":"/exp@57.2.1/src"}