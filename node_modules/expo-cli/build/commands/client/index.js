'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2;

function _load_toConsumableArray() {
  return _toConsumableArray2 = _interopRequireDefault(require('babel-runtime/helpers/toConsumableArray'));
}

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _extends2;

function _load_extends() {
  return _extends2 = _interopRequireDefault(require('babel-runtime/helpers/extends'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _cliTable;

function _load_cliTable() {
  return _cliTable = _interopRequireDefault(require('cli-table'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('@expo/xdl');
}

var _CommandError;

function _load_CommandError() {
  return _CommandError = _interopRequireDefault(require('../../CommandError'));
}

var _urlOpts;

function _load_urlOpts() {
  return _urlOpts = _interopRequireDefault(require('../../urlOpts'));
}

var _appleApi;

function _load_appleApi() {
  return _appleApi = _interopRequireWildcard(require('../build/ios/appleApi'));
}

var _constants;

function _load_constants() {
  return _constants = require('../build/constants');
}

var _fastlane;

function _load_fastlane() {
  return _fastlane = require('../build/ios/appleApi/fastlane');
}

var _selectDistributionCert;

function _load_selectDistributionCert() {
  return _selectDistributionCert = _interopRequireDefault(require('./selectDistributionCert'));
}

var _selectPushKey;

function _load_selectPushKey() {
  return _selectPushKey = _interopRequireDefault(require('./selectPushKey'));
}

var _generateBundleIdentifier;

function _load_generateBundleIdentifier() {
  return _generateBundleIdentifier = _interopRequireDefault(require('./generateBundleIdentifier'));
}

var _clientBuildApi;

function _load_clientBuildApi() {
  return _clientBuildApi = require('./clientBuildApi');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

var _prompt;

function _load_prompt() {
  return _prompt = _interopRequireDefault(require('../../prompt'));
}

var _tagger;

function _load_tagger() {
  return _tagger = require('./tagger');
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IOS = (_constants || _load_constants()).PLATFORMS.IOS;

exports.default = function (program) {
  program.command('client:ios').option('--apple-id <login>', 'Apple ID username (please also set the Apple ID password as EXPO_APPLE_PASSWORD environment variable).').description('Build a custom version of the Expo Client for iOS using your own Apple credentials and install it on your mobile device using Safari.').asyncAction(function () {
    var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(options) {
      var authData, user, _ref2, isAllowed, errorMessage, bundleIdentifier, experienceName, context, distributionCert, pushKey, credentialsList, updateCredentialsFn, CredentialsUpdater, email, _ref4, _ref5, devices, udids, addUdid, table, udidPrompt, result;

      return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (_appleApi || _load_appleApi()).authenticate(options);

            case 2:
              authData = _context2.sent;
              _context2.next = 5;
              return (_xdl || _load_xdl()).User.getCurrentUserAsync();

            case 5:
              user = _context2.sent;
              _context2.next = 8;
              return (0, (_clientBuildApi || _load_clientBuildApi()).isAllowedToBuild)({
                user: user,
                appleTeamId: authData.team.id
              });

            case 8:
              _ref2 = _context2.sent;
              isAllowed = _ref2.isAllowed;
              errorMessage = _ref2.errorMessage;

              if (isAllowed) {
                _context2.next = 13;
                break;
              }

              throw new (_CommandError || _load_CommandError()).default('CLIENT_BUILD_REQUEST_NOT_ALLOWED', 'New Expo Client build request disallowed. Reason: ' + errorMessage);

            case 13:
              bundleIdentifier = (0, (_generateBundleIdentifier || _load_generateBundleIdentifier()).default)(authData.team.id);
              _context2.next = 16;
              return (0, (_clientBuildApi || _load_clientBuildApi()).getExperienceName)({ user: user, appleTeamId: authData.team.id });

            case 16:
              experienceName = _context2.sent;
              context = (0, (_extends2 || _load_extends()).default)({}, authData, {
                bundleIdentifier: bundleIdentifier,
                experienceName: experienceName,
                username: user ? user.username : null
              });
              _context2.next = 20;
              return (_appleApi || _load_appleApi()).ensureAppExists(context);

            case 20:
              _context2.next = 22;
              return (0, (_selectDistributionCert || _load_selectDistributionCert()).default)(context);

            case 22:
              distributionCert = _context2.sent;
              _context2.next = 25;
              return (0, (_selectPushKey || _load_selectPushKey()).default)(context);

            case 25:
              pushKey = _context2.sent;


              if (pushKey === null) {
                (0, (_log || _load_log()).default)('Push notifications will be disabled until you upload your push credentials. See https://docs.expo.io/versions/latest/guides/adhoc-builds/#push-notifications-arent-working for more details.');
              }

              // if user is logged in, then we should update credentials
              credentialsList = [distributionCert, pushKey].filter(function (i) {
                return i;
              });

              if (!user) {
                _context2.next = 35;
                break;
              }

              // store all the credentials that we mark for update
              updateCredentialsFn = function () {
                var _ref3 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(listOfCredentials) {
                  var credentials;
                  return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (!(listOfCredentials.length === 0)) {
                            _context.next = 2;
                            break;
                          }

                          return _context.abrupt('return');

                        case 2:
                          credentials = listOfCredentials.reduce(function (acc, credential) {
                            return (0, (_extends2 || _load_extends()).default)({}, acc, credential);
                          });
                          _context.next = 5;
                          return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform(IOS, credentials, [], {
                            username: user.username,
                            experienceName: experienceName,
                            bundleIdentifier: bundleIdentifier
                          });

                        case 5:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, undefined);
                }));

                return function updateCredentialsFn(_x2) {
                  return _ref3.apply(this, arguments);
                };
              }();

              CredentialsUpdater = new (_tagger || _load_tagger()).Updater(updateCredentialsFn);
              _context2.next = 33;
              return CredentialsUpdater.updateAllAsync(credentialsList);

            case 33:
              _context2.next = 36;
              break;

            case 35:
              // clear update tags, we dont store credentials for anonymous users
              (0, (_tagger || _load_tagger()).clearTags)(credentialsList);

            case 36:
              email = void 0;

              if (!user) {
                _context2.next = 41;
                break;
              }

              email = user.email;
              _context2.next = 45;
              break;

            case 41:
              _context2.next = 43;
              return (0, (_prompt || _load_prompt()).default)({
                name: 'email',
                message: 'Please enter an email address to notify, when the build is completed:',
                filter: function filter(value) {
                  return value.trim();
                },
                validate: function validate(value) {
                  return (/.+@.+/.test(value) ? true : "That doesn't look like a valid email."
                  );
                }
              });

            case 43:
              _ref4 = _context2.sent;
              email = _ref4.email;

            case 45:
              _context2.next = 47;
              return (0, (_fastlane || _load_fastlane()).runAction)((_fastlane || _load_fastlane()).travelingFastlane.listDevices, [context.appleId, context.appleIdPassword, context.team.id]);

            case 47:
              _ref5 = _context2.sent;
              devices = _ref5.devices;
              udids = devices.map(function (device) {
                return device.deviceNumber;
              });

              (_log || _load_log()).default.newLine();

              addUdid = void 0;

              if (!(udids.length === 0)) {
                _context2.next = 57;
                break;
              }

              (0, (_log || _load_log()).default)('There are no devices registered to your Apple Developer account. Please follow the instructions below to register an iOS device.');
              addUdid = true;
              _context2.next = 66;
              break;

            case 57:
              (0, (_log || _load_log()).default)('Custom builds of the Expo Client can only be installed on devices which have been registered with Apple at build-time.');
              (0, (_log || _load_log()).default)('These devices are currently registered on your Apple Developer account:');
              table = new (_cliTable || _load_cliTable()).default({ head: ['Name', 'Identifier'], style: { head: ['cyan'] } });

              table.push.apply(table, (0, (_toConsumableArray2 || _load_toConsumableArray()).default)(devices.map(function (device) {
                return [device.name, device.deviceNumber];
              })));
              (0, (_log || _load_log()).default)(table.toString());

              _context2.next = 64;
              return (0, (_prompt || _load_prompt()).default)({
                name: 'addUdid',
                message: 'Would you like to register a new device to use the Expo Client with?',
                type: 'confirm',
                default: true
              });

            case 64:
              udidPrompt = _context2.sent;

              addUdid = udidPrompt.addUdid;

            case 66:
              _context2.next = 68;
              return (0, (_clientBuildApi || _load_clientBuildApi()).createClientBuildRequest)({
                user: user,
                context: context,
                distributionCert: distributionCert,
                pushKey: pushKey,
                udids: udids,
                addUdid: addUdid,
                email: email
              });

            case 68:
              result = _context2.sent;


              (_log || _load_log()).default.newLine();
              if (addUdid) {
                (_urlOpts || _load_urlOpts()).default.printQRCode(result.registrationUrl);
                (0, (_log || _load_log()).default)('Open the following link on your iOS device (or scan the QR code) and follow the instructions to install the development profile:');
                (_log || _load_log()).default.newLine();
                (0, (_log || _load_log()).default)((_chalk || _load_chalk()).default.green('' + result.registrationUrl));
                (_log || _load_log()).default.newLine();
                (0, (_log || _load_log()).default)('Please note that you can only register one iOS device per request.');
                (0, (_log || _load_log()).default)("After you register your device, we'll start building your client, and you'll receive an email when it's ready to install.");
              } else {
                (_urlOpts || _load_urlOpts()).default.printQRCode(result.statusUrl);
                (0, (_log || _load_log()).default)('Your custom Expo Client is being built! 🛠');
                (0, (_log || _load_log()).default)('Open this link on your iOS device (or scan the QR code) to view build logs and install the client:');
                (_log || _load_log()).default.newLine();
                (0, (_log || _load_log()).default)((_chalk || _load_chalk()).default.green('' + result.statusUrl));
              }
              (_log || _load_log()).default.newLine();

            case 72:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());

  program.command('client:install:ios').description('Install the latest version of Expo Client for iOS on the simulator').asyncAction((0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3() {
    return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (_xdl || _load_xdl()).Simulator.upgradeExpoAsync();

          case 2:
            if (!_context3.sent) {
              _context3.next = 4;
              break;
            }

            (0, (_log || _load_log()).default)('Done!');

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })), true);

  program.command('client:install:android').description('Install the latest version of Expo Client for Android on a connected device or emulator').asyncAction((0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee4() {
    return (_regenerator || _load_regenerator()).default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return (_xdl || _load_xdl()).Android.upgradeExpoAsync();

          case 2:
            if (!_context4.sent) {
              _context4.next = 4;
              break;
            }

            (0, (_log || _load_log()).default)('Done!');

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })), true);
};

module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/client/index.js.map
